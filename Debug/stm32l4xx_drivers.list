
stm32l4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002818  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  080029a8  080029a8  000129a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a88  08002a88  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08002a88  08002a88  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a88  08002a88  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a88  08002a88  00012a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a8c  08002a8c  00012a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08002a90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  20000074  08002b04  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08002b04  00020220  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY
 13 .debug_info   000034e0  00000000  00000000  000200e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000cd2  00000000  00000000  000235c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003f0  00000000  00000000  00024298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002de  00000000  00000000  00024688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004703  00000000  00000000  00024966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004cc8  00000000  00000000  00029069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000e440  00000000  00000000  0002dd31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001690  00000000  00000000  0003c174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0003d804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002990 	.word	0x08002990

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08002990 	.word	0x08002990

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <RCC_config>:
	//I2CPins.GPIO_PinConf.GPIO_PinNumber = GPIO_PIN_NO_9;
	//GPIO_PeriClockControl(GPIOB, ENABLE);
	//GPIO_Init(&I2CPins);

//}
void RCC_config(void){
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
	RCC -> CR |= ( 1 << 0);
 8000274:	4b16      	ldr	r3, [pc, #88]	; (80002d0 <RCC_config+0x60>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a15      	ldr	r2, [pc, #84]	; (80002d0 <RCC_config+0x60>)
 800027a:	f043 0301 	orr.w	r3, r3, #1
 800027e:	6013      	str	r3, [r2, #0]
	RCC -> CR |= ( 1 << 1);
 8000280:	4b13      	ldr	r3, [pc, #76]	; (80002d0 <RCC_config+0x60>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a12      	ldr	r2, [pc, #72]	; (80002d0 <RCC_config+0x60>)
 8000286:	f043 0302 	orr.w	r3, r3, #2
 800028a:	6013      	str	r3, [r2, #0]
	RCC -> CR |= ( 1 << 8);
 800028c:	4b10      	ldr	r3, [pc, #64]	; (80002d0 <RCC_config+0x60>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a0f      	ldr	r2, [pc, #60]	; (80002d0 <RCC_config+0x60>)
 8000292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000296:	6013      	str	r3, [r2, #0]

	RCC -> CFGR |= ( 0x1 << 0);
 8000298:	4b0d      	ldr	r3, [pc, #52]	; (80002d0 <RCC_config+0x60>)
 800029a:	689b      	ldr	r3, [r3, #8]
 800029c:	4a0c      	ldr	r2, [pc, #48]	; (80002d0 <RCC_config+0x60>)
 800029e:	f043 0301 	orr.w	r3, r3, #1
 80002a2:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= ( 0x1 << 2);
 80002a4:	4b0a      	ldr	r3, [pc, #40]	; (80002d0 <RCC_config+0x60>)
 80002a6:	689b      	ldr	r3, [r3, #8]
 80002a8:	4a09      	ldr	r2, [pc, #36]	; (80002d0 <RCC_config+0x60>)
 80002aa:	f043 0304 	orr.w	r3, r3, #4
 80002ae:	6093      	str	r3, [r2, #8]

	RCC -> APB1ENR[0] |= ( 0x1 << 28);
 80002b0:	4b07      	ldr	r3, [pc, #28]	; (80002d0 <RCC_config+0x60>)
 80002b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80002b4:	4a06      	ldr	r2, [pc, #24]	; (80002d0 <RCC_config+0x60>)
 80002b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002ba:	6593      	str	r3, [r2, #88]	; 0x58
	RCC -> APB2ENR |= ( 0x1 << 0);
 80002bc:	4b04      	ldr	r3, [pc, #16]	; (80002d0 <RCC_config+0x60>)
 80002be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80002c0:	4a03      	ldr	r2, [pc, #12]	; (80002d0 <RCC_config+0x60>)
 80002c2:	f043 0301 	orr.w	r3, r3, #1
 80002c6:	6613      	str	r3, [r2, #96]	; 0x60
	//RCC -> CR |=( 1 << 10);
}
 80002c8:	bf00      	nop
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bc80      	pop	{r7}
 80002ce:	4770      	bx	lr
 80002d0:	40021000 	.word	0x40021000

080002d4 <GPIO_LCDInit>:
	//I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;

	I2C_Init(&I2C1Handle);
}
void GPIO_LCDInit(void){
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b08a      	sub	sp, #40	; 0x28
 80002d8:	af00      	add	r7, sp, #0
// LCD_GPIO_D5           GPIO_PIN_3   //PC3   ARD.A2
// LCD_GPIO_D6           GPIO_PIN_2   //PC2   ARD.A3
// LCD_GPIO_D7           GPIO_PIN_1   //PC1   ARD.A4
	/*************************************************************************/
	GPIO_Handle_t GpioPA, GpioPB, GpioPC;
	memset(&GpioPA,0,sizeof(GpioPA));
 80002da:	f107 031c 	add.w	r3, r7, #28
 80002de:	220c      	movs	r2, #12
 80002e0:	2100      	movs	r1, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f001 fd3b 	bl	8001d5e <memset>
	memset(&GpioPB,0,sizeof(GpioPB));
 80002e8:	f107 0310 	add.w	r3, r7, #16
 80002ec:	220c      	movs	r2, #12
 80002ee:	2100      	movs	r1, #0
 80002f0:	4618      	mov	r0, r3
 80002f2:	f001 fd34 	bl	8001d5e <memset>
	memset(&GpioPC,0,sizeof(GpioPC));
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	220c      	movs	r2, #12
 80002fa:	2100      	movs	r1, #0
 80002fc:	4618      	mov	r0, r3
 80002fe:	f001 fd2e 	bl	8001d5e <memset>
    /************    PORT B************************/
	GpioPB.pGPIOx = GPIOB;
 8000302:	4b3a      	ldr	r3, [pc, #232]	; (80003ec <GPIO_LCDInit+0x118>)
 8000304:	613b      	str	r3, [r7, #16]

	GpioPB.GPIO_PinConf.GPIO_PinMode = GPIO_MODE_OUT;
 8000306:	2301      	movs	r3, #1
 8000308:	757b      	strb	r3, [r7, #21]
	GpioPB.GPIO_PinConf.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800030a:	2300      	movs	r3, #0
 800030c:	75bb      	strb	r3, [r7, #22]
	GpioPB.GPIO_PinConf.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800030e:	2302      	movs	r3, #2
 8000310:	75fb      	strb	r3, [r7, #23]
	GpioPB.GPIO_PinConf.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000312:	2300      	movs	r3, #0
 8000314:	763b      	strb	r3, [r7, #24]

	GpioPB.GPIO_PinConf.GPIO_PinNumber = LCD_GPIO_RS;
 8000316:	2302      	movs	r3, #2
 8000318:	753b      	strb	r3, [r7, #20]
	GPIO_PeriClockControl(GPIOB, ENABLE);
 800031a:	2101      	movs	r1, #1
 800031c:	4833      	ldr	r0, [pc, #204]	; (80003ec <GPIO_LCDInit+0x118>)
 800031e:	f000 fda1 	bl	8000e64 <GPIO_PeriClockControl>
	GPIO_Init(&GpioPB);
 8000322:	f107 0310 	add.w	r3, r7, #16
 8000326:	4618      	mov	r0, r3
 8000328:	f000 fe6a 	bl	8001000 <GPIO_Init>
	/************    PORT A************************/
	GpioPA.pGPIOx = GPIOA;
 800032c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000330:	61fb      	str	r3, [r7, #28]

	GpioPA.GPIO_PinConf.GPIO_PinMode = GPIO_MODE_OUT;
 8000332:	2301      	movs	r3, #1
 8000334:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	GpioPA.GPIO_PinConf.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000338:	2300      	movs	r3, #0
 800033a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	GpioPA.GPIO_PinConf.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800033e:	2302      	movs	r3, #2
 8000340:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	GpioPA.GPIO_PinConf.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000344:	2300      	movs	r3, #0
 8000346:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	GpioPA.GPIO_PinConf.GPIO_PinNumber =LCD_GPIO_RW;
 800034a:	2304      	movs	r3, #4
 800034c:	f887 3020 	strb.w	r3, [r7, #32]
	GPIO_PeriClockControl(GPIOA, ENABLE);
 8000350:	2101      	movs	r1, #1
 8000352:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000356:	f000 fd85 	bl	8000e64 <GPIO_PeriClockControl>
	GPIO_Init(&GpioPA);
 800035a:	f107 031c 	add.w	r3, r7, #28
 800035e:	4618      	mov	r0, r3
 8000360:	f000 fe4e 	bl	8001000 <GPIO_Init>

	GpioPA.GPIO_PinConf.GPIO_PinNumber =LCD_GPIO_EN;
 8000364:	2303      	movs	r3, #3
 8000366:	f887 3020 	strb.w	r3, [r7, #32]
	GPIO_PeriClockControl(GPIOA, ENABLE);
 800036a:	2101      	movs	r1, #1
 800036c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000370:	f000 fd78 	bl	8000e64 <GPIO_PeriClockControl>
	GPIO_Init(&GpioPA);
 8000374:	f107 031c 	add.w	r3, r7, #28
 8000378:	4618      	mov	r0, r3
 800037a:	f000 fe41 	bl	8001000 <GPIO_Init>
	/************    PORT C************************/
	GpioPC.pGPIOx = GPIOC;
 800037e:	4b1c      	ldr	r3, [pc, #112]	; (80003f0 <GPIO_LCDInit+0x11c>)
 8000380:	607b      	str	r3, [r7, #4]

	GpioPC.GPIO_PinConf.GPIO_PinMode = GPIO_MODE_OUT;
 8000382:	2301      	movs	r3, #1
 8000384:	727b      	strb	r3, [r7, #9]
	GpioPC.GPIO_PinConf.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000386:	2300      	movs	r3, #0
 8000388:	72bb      	strb	r3, [r7, #10]
	GpioPC.GPIO_PinConf.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800038a:	2302      	movs	r3, #2
 800038c:	72fb      	strb	r3, [r7, #11]
	GpioPC.GPIO_PinConf.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800038e:	2300      	movs	r3, #0
 8000390:	733b      	strb	r3, [r7, #12]

	GpioPC.GPIO_PinConf.GPIO_PinNumber =LCD_GPIO_D4;
 8000392:	2304      	movs	r3, #4
 8000394:	723b      	strb	r3, [r7, #8]
	GPIO_PeriClockControl(GPIOC, ENABLE);
 8000396:	2101      	movs	r1, #1
 8000398:	4815      	ldr	r0, [pc, #84]	; (80003f0 <GPIO_LCDInit+0x11c>)
 800039a:	f000 fd63 	bl	8000e64 <GPIO_PeriClockControl>
	GPIO_Init(&GpioPC);
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	4618      	mov	r0, r3
 80003a2:	f000 fe2d 	bl	8001000 <GPIO_Init>

	GpioPC.GPIO_PinConf.GPIO_PinNumber =LCD_GPIO_D5;
 80003a6:	2303      	movs	r3, #3
 80003a8:	723b      	strb	r3, [r7, #8]
	GPIO_PeriClockControl(GPIOC, ENABLE);
 80003aa:	2101      	movs	r1, #1
 80003ac:	4810      	ldr	r0, [pc, #64]	; (80003f0 <GPIO_LCDInit+0x11c>)
 80003ae:	f000 fd59 	bl	8000e64 <GPIO_PeriClockControl>
	GPIO_Init(&GpioPC);
 80003b2:	1d3b      	adds	r3, r7, #4
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 fe23 	bl	8001000 <GPIO_Init>

	GpioPC.GPIO_PinConf.GPIO_PinNumber =LCD_GPIO_D6;
 80003ba:	2302      	movs	r3, #2
 80003bc:	723b      	strb	r3, [r7, #8]
	GPIO_PeriClockControl(GPIOC, ENABLE);
 80003be:	2101      	movs	r1, #1
 80003c0:	480b      	ldr	r0, [pc, #44]	; (80003f0 <GPIO_LCDInit+0x11c>)
 80003c2:	f000 fd4f 	bl	8000e64 <GPIO_PeriClockControl>
	GPIO_Init(&GpioPC);
 80003c6:	1d3b      	adds	r3, r7, #4
 80003c8:	4618      	mov	r0, r3
 80003ca:	f000 fe19 	bl	8001000 <GPIO_Init>

	GpioPC.GPIO_PinConf.GPIO_PinNumber =LCD_GPIO_D7;
 80003ce:	2301      	movs	r3, #1
 80003d0:	723b      	strb	r3, [r7, #8]
	GPIO_PeriClockControl(GPIOC, ENABLE);
 80003d2:	2101      	movs	r1, #1
 80003d4:	4806      	ldr	r0, [pc, #24]	; (80003f0 <GPIO_LCDInit+0x11c>)
 80003d6:	f000 fd45 	bl	8000e64 <GPIO_PeriClockControl>
	GPIO_Init(&GpioPC);
 80003da:	1d3b      	adds	r3, r7, #4
 80003dc:	4618      	mov	r0, r3
 80003de:	f000 fe0f 	bl	8001000 <GPIO_Init>
}
 80003e2:	bf00      	nop
 80003e4:	3728      	adds	r7, #40	; 0x28
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	48000400 	.word	0x48000400
 80003f0:	48000800 	.word	0x48000800

080003f4 <get_day_of_week>:
   *pSCSR |= ( 1 << 0); //enables the counter

}

char * get_day_of_week(uint8_t i)
{
 80003f4:	b4b0      	push	{r4, r5, r7}
 80003f6:	b08b      	sub	sp, #44	; 0x2c
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	4603      	mov	r3, r0
 80003fc:	71fb      	strb	r3, [r7, #7]
	char* days[] = {"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
 80003fe:	4b0b      	ldr	r3, [pc, #44]	; (800042c <get_day_of_week+0x38>)
 8000400:	f107 040c 	add.w	r4, r7, #12
 8000404:	461d      	mov	r5, r3
 8000406:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000408:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800040a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800040e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	return days[i-1];
 8000412:	79fb      	ldrb	r3, [r7, #7]
 8000414:	3b01      	subs	r3, #1
 8000416:	009b      	lsls	r3, r3, #2
 8000418:	3328      	adds	r3, #40	; 0x28
 800041a:	443b      	add	r3, r7
 800041c:	f853 3c1c 	ldr.w	r3, [r3, #-28]
}
 8000420:	4618      	mov	r0, r3
 8000422:	372c      	adds	r7, #44	; 0x2c
 8000424:	46bd      	mov	sp, r7
 8000426:	bcb0      	pop	{r4, r5, r7}
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	080029ec 	.word	0x080029ec

08000430 <number_to_string>:

void number_to_string(uint8_t num, char* buf)
{
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0
 8000436:	4603      	mov	r3, r0
 8000438:	6039      	str	r1, [r7, #0]
 800043a:	71fb      	strb	r3, [r7, #7]
	if(num < 10){
 800043c:	79fb      	ldrb	r3, [r7, #7]
 800043e:	2b09      	cmp	r3, #9
 8000440:	d809      	bhi.n	8000456 <number_to_string+0x26>
		buf[0] = '0';
 8000442:	683b      	ldr	r3, [r7, #0]
 8000444:	2230      	movs	r2, #48	; 0x30
 8000446:	701a      	strb	r2, [r3, #0]
		buf[1] = num + 48;
 8000448:	683b      	ldr	r3, [r7, #0]
 800044a:	3301      	adds	r3, #1
 800044c:	79fa      	ldrb	r2, [r7, #7]
 800044e:	3230      	adds	r2, #48	; 0x30
 8000450:	b2d2      	uxtb	r2, r2
 8000452:	701a      	strb	r2, [r3, #0]
	}else if(num >= 10 && num < 99)
	{
		buf[0] = (num / 10) + 48;
		buf[1] = (num % 10) + 48;
	}
}
 8000454:	e01f      	b.n	8000496 <number_to_string+0x66>
	}else if(num >= 10 && num < 99)
 8000456:	79fb      	ldrb	r3, [r7, #7]
 8000458:	2b09      	cmp	r3, #9
 800045a:	d91c      	bls.n	8000496 <number_to_string+0x66>
 800045c:	79fb      	ldrb	r3, [r7, #7]
 800045e:	2b62      	cmp	r3, #98	; 0x62
 8000460:	d819      	bhi.n	8000496 <number_to_string+0x66>
		buf[0] = (num / 10) + 48;
 8000462:	79fb      	ldrb	r3, [r7, #7]
 8000464:	4a0e      	ldr	r2, [pc, #56]	; (80004a0 <number_to_string+0x70>)
 8000466:	fba2 2303 	umull	r2, r3, r2, r3
 800046a:	08db      	lsrs	r3, r3, #3
 800046c:	b2db      	uxtb	r3, r3
 800046e:	3330      	adds	r3, #48	; 0x30
 8000470:	b2da      	uxtb	r2, r3
 8000472:	683b      	ldr	r3, [r7, #0]
 8000474:	701a      	strb	r2, [r3, #0]
		buf[1] = (num % 10) + 48;
 8000476:	79fa      	ldrb	r2, [r7, #7]
 8000478:	4b09      	ldr	r3, [pc, #36]	; (80004a0 <number_to_string+0x70>)
 800047a:	fba3 1302 	umull	r1, r3, r3, r2
 800047e:	08d9      	lsrs	r1, r3, #3
 8000480:	460b      	mov	r3, r1
 8000482:	009b      	lsls	r3, r3, #2
 8000484:	440b      	add	r3, r1
 8000486:	005b      	lsls	r3, r3, #1
 8000488:	1ad3      	subs	r3, r2, r3
 800048a:	b2da      	uxtb	r2, r3
 800048c:	683b      	ldr	r3, [r7, #0]
 800048e:	3301      	adds	r3, #1
 8000490:	3230      	adds	r2, #48	; 0x30
 8000492:	b2d2      	uxtb	r2, r2
 8000494:	701a      	strb	r2, [r3, #0]
}
 8000496:	bf00      	nop
 8000498:	370c      	adds	r7, #12
 800049a:	46bd      	mov	sp, r7
 800049c:	bc80      	pop	{r7}
 800049e:	4770      	bx	lr
 80004a0:	cccccccd 	.word	0xcccccccd

080004a4 <time_to_string>:
//hh:mm:ss
char* time_to_string(RTC_time_t * rtc_time)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
	static char buf[9];

	buf[2] = ':';
 80004ac:	4b0f      	ldr	r3, [pc, #60]	; (80004ec <time_to_string+0x48>)
 80004ae:	223a      	movs	r2, #58	; 0x3a
 80004b0:	709a      	strb	r2, [r3, #2]
	buf[5] = ':';
 80004b2:	4b0e      	ldr	r3, [pc, #56]	; (80004ec <time_to_string+0x48>)
 80004b4:	223a      	movs	r2, #58	; 0x3a
 80004b6:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_time -> hours, buf);
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	789b      	ldrb	r3, [r3, #2]
 80004bc:	490b      	ldr	r1, [pc, #44]	; (80004ec <time_to_string+0x48>)
 80004be:	4618      	mov	r0, r3
 80004c0:	f7ff ffb6 	bl	8000430 <number_to_string>
	number_to_string(rtc_time -> minutes, &buf[3]);
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	785b      	ldrb	r3, [r3, #1]
 80004c8:	4909      	ldr	r1, [pc, #36]	; (80004f0 <time_to_string+0x4c>)
 80004ca:	4618      	mov	r0, r3
 80004cc:	f7ff ffb0 	bl	8000430 <number_to_string>
	number_to_string(rtc_time -> seconds, &buf[6]);
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	4907      	ldr	r1, [pc, #28]	; (80004f4 <time_to_string+0x50>)
 80004d6:	4618      	mov	r0, r3
 80004d8:	f7ff ffaa 	bl	8000430 <number_to_string>
	buf[8] = '\0';
 80004dc:	4b03      	ldr	r3, [pc, #12]	; (80004ec <time_to_string+0x48>)
 80004de:	2200      	movs	r2, #0
 80004e0:	721a      	strb	r2, [r3, #8]

	return buf;
 80004e2:	4b02      	ldr	r3, [pc, #8]	; (80004ec <time_to_string+0x48>)
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	3708      	adds	r7, #8
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	20000090 	.word	0x20000090
 80004f0:	20000093 	.word	0x20000093
 80004f4:	20000096 	.word	0x20000096

080004f8 <date_to_string>:

//dd/mm/yy
char* date_to_string(RTC_date_t * rtc_date)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	static char buf[9];

	buf[2] = '/';
 8000500:	4b0f      	ldr	r3, [pc, #60]	; (8000540 <date_to_string+0x48>)
 8000502:	222f      	movs	r2, #47	; 0x2f
 8000504:	709a      	strb	r2, [r3, #2]
	buf[5] = '/';
 8000506:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <date_to_string+0x48>)
 8000508:	222f      	movs	r2, #47	; 0x2f
 800050a:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_date -> date, buf);
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	490b      	ldr	r1, [pc, #44]	; (8000540 <date_to_string+0x48>)
 8000512:	4618      	mov	r0, r3
 8000514:	f7ff ff8c 	bl	8000430 <number_to_string>
	number_to_string(rtc_date -> month, &buf[3]);
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	785b      	ldrb	r3, [r3, #1]
 800051c:	4909      	ldr	r1, [pc, #36]	; (8000544 <date_to_string+0x4c>)
 800051e:	4618      	mov	r0, r3
 8000520:	f7ff ff86 	bl	8000430 <number_to_string>
	number_to_string(rtc_date -> year, &buf[6]);
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	789b      	ldrb	r3, [r3, #2]
 8000528:	4907      	ldr	r1, [pc, #28]	; (8000548 <date_to_string+0x50>)
 800052a:	4618      	mov	r0, r3
 800052c:	f7ff ff80 	bl	8000430 <number_to_string>
	buf[8] = '\0';
 8000530:	4b03      	ldr	r3, [pc, #12]	; (8000540 <date_to_string+0x48>)
 8000532:	2200      	movs	r2, #0
 8000534:	721a      	strb	r2, [r3, #8]

	return buf;
 8000536:	4b02      	ldr	r3, [pc, #8]	; (8000540 <date_to_string+0x48>)
}
 8000538:	4618      	mov	r0, r3
 800053a:	3708      	adds	r7, #8
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	2000009c 	.word	0x2000009c
 8000544:	2000009f 	.word	0x2000009f
 8000548:	200000a2 	.word	0x200000a2

0800054c <mdelay>:
static void mdelay(uint32_t cnt)
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0 ; i < (cnt * 1000 ); i++);
 8000554:	2300      	movs	r3, #0
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	e002      	b.n	8000560 <mdelay+0x14>
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	3301      	adds	r3, #1
 800055e:	60fb      	str	r3, [r7, #12]
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000566:	fb02 f303 	mul.w	r3, r2, r3
 800056a:	68fa      	ldr	r2, [r7, #12]
 800056c:	429a      	cmp	r2, r3
 800056e:	d3f4      	bcc.n	800055a <mdelay+0xe>
}
 8000570:	bf00      	nop
 8000572:	bf00      	nop
 8000574:	3714      	adds	r7, #20
 8000576:	46bd      	mov	sp, r7
 8000578:	bc80      	pop	{r7}
 800057a:	4770      	bx	lr

0800057c <main>:

int main (void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
	RTC_time_t current_time;
	RTC_date_t current_date;

	RCC_config();
 8000582:	f7ff fe75 	bl	8000270 <RCC_config>
	GPIO_LCDInit();
 8000586:	f7ff fea5 	bl	80002d4 <GPIO_LCDInit>
	lcd_initx();
 800058a:	f000 fb81 	bl	8000c90 <lcd_initx>


	mdelay(2000);
 800058e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000592:	f7ff ffdb 	bl	800054c <mdelay>
	ds3231_init();
 8000596:	f000 f933 	bl	8000800 <ds3231_init>

	current_date.day = THURSDAY;
 800059a:	2305      	movs	r3, #5
 800059c:	70fb      	strb	r3, [r7, #3]
	current_date.date = 11;
 800059e:	230b      	movs	r3, #11
 80005a0:	703b      	strb	r3, [r7, #0]
	current_date.month = 4;
 80005a2:	2304      	movs	r3, #4
 80005a4:	707b      	strb	r3, [r7, #1]
	current_date.year = 24;
 80005a6:	2318      	movs	r3, #24
 80005a8:	70bb      	strb	r3, [r7, #2]

	current_time.hours = 4;
 80005aa:	2304      	movs	r3, #4
 80005ac:	71bb      	strb	r3, [r7, #6]
	current_time.minutes = 25;
 80005ae:	2319      	movs	r3, #25
 80005b0:	717b      	strb	r3, [r7, #5]
	current_time.seconds = 41;
 80005b2:	2329      	movs	r3, #41	; 0x29
 80005b4:	713b      	strb	r3, [r7, #4]
	current_time.time_format = TIME_FORMAT_12HRS_PM;
 80005b6:	2301      	movs	r3, #1
 80005b8:	71fb      	strb	r3, [r7, #7]

	ds3231_set_current_date(&current_date);
 80005ba:	463b      	mov	r3, r7
 80005bc:	4618      	mov	r0, r3
 80005be:	f000 f9c5 	bl	800094c <ds3231_set_current_date>
	ds3231_set_current_time(&current_time);
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	4618      	mov	r0, r3
 80005c6:	f000 f933 	bl	8000830 <ds3231_set_current_time>

	while(1){

	 /* Infinite loop */

		lcd_print_string(" ");
 80005ca:	4807      	ldr	r0, [pc, #28]	; (80005e8 <main+0x6c>)
 80005cc:	f000 fb4c 	bl	8000c68 <lcd_print_string>
		lcd_print_string("Nicthe Jimenez");
 80005d0:	4806      	ldr	r0, [pc, #24]	; (80005ec <main+0x70>)
 80005d2:	f000 fb49 	bl	8000c68 <lcd_print_string>
		mdelay(2000);
 80005d6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005da:	f7ff ffb7 	bl	800054c <mdelay>
		lcd_display_clear();
 80005de:	f000 fbf1 	bl	8000dc4 <lcd_display_clear>
		lcd_display_return_home();
 80005e2:	f000 fbad 	bl	8000d40 <lcd_display_return_home>
		lcd_print_string(" ");
 80005e6:	e7f0      	b.n	80005ca <main+0x4e>
 80005e8:	08002a08 	.word	0x08002a08
 80005ec:	08002a0c 	.word	0x08002a0c

080005f0 <SysTick_Handler>:

		return 0;
}

	void SysTick_Handler(void)
	{
 80005f0:	b590      	push	{r4, r7, lr}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
		RTC_time_t current_time;
		RTC_date_t current_date;

		ds3231_get_current_time(&current_time);
 80005f6:	f107 0308 	add.w	r3, r7, #8
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 f961 	bl	80008c2 <ds3231_get_current_time>

		char *am_pm;

		if(current_time.time_format |= TIME_FORMAT_24HRS)
 8000600:	7afb      	ldrb	r3, [r7, #11]
 8000602:	f043 0302 	orr.w	r3, r3, #2
 8000606:	b2db      	uxtb	r3, r3
 8000608:	72fb      	strb	r3, [r7, #11]
		{
			am_pm = (current_time.time_format) ? "PM" : "AM";
 800060a:	7afb      	ldrb	r3, [r7, #11]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SysTick_Handler+0x24>
 8000610:	4b12      	ldr	r3, [pc, #72]	; (800065c <SysTick_Handler+0x6c>)
 8000612:	e000      	b.n	8000616 <SysTick_Handler+0x26>
 8000614:	4b12      	ldr	r3, [pc, #72]	; (8000660 <SysTick_Handler+0x70>)
 8000616:	60fb      	str	r3, [r7, #12]
			printf("Current time = %s %s\n", time_to_string(&current_time),am_pm); // 04:25:41 PM
 8000618:	f107 0308 	add.w	r3, r7, #8
 800061c:	4618      	mov	r0, r3
 800061e:	f7ff ff41 	bl	80004a4 <time_to_string>
 8000622:	4603      	mov	r3, r0
 8000624:	68fa      	ldr	r2, [r7, #12]
 8000626:	4619      	mov	r1, r3
 8000628:	480e      	ldr	r0, [pc, #56]	; (8000664 <SysTick_Handler+0x74>)
 800062a:	f001 fb43 	bl	8001cb4 <iprintf>
		}else{
			printf("Current time = %s \n", time_to_string(&current_time)); // 04:25:41
		}

		ds3231_get_current_date(&current_date);
 800062e:	1d3b      	adds	r3, r7, #4
 8000630:	4618      	mov	r0, r3
 8000632:	f000 f9bb 	bl	80009ac <ds3231_get_current_date>
			//15/01/21 <friday>
		printf("Current date = %s <%s> \n",date_to_string(&current_date), get_day_of_week(current_date.day));
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff ff5d 	bl	80004f8 <date_to_string>
 800063e:	4604      	mov	r4, r0
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	4618      	mov	r0, r3
 8000644:	f7ff fed6 	bl	80003f4 <get_day_of_week>
 8000648:	4603      	mov	r3, r0
 800064a:	461a      	mov	r2, r3
 800064c:	4621      	mov	r1, r4
 800064e:	4806      	ldr	r0, [pc, #24]	; (8000668 <SysTick_Handler+0x78>)
 8000650:	f001 fb30 	bl	8001cb4 <iprintf>

}
 8000654:	bf00      	nop
 8000656:	3714      	adds	r7, #20
 8000658:	46bd      	mov	sp, r7
 800065a:	bd90      	pop	{r4, r7, pc}
 800065c:	08002a1c 	.word	0x08002a1c
 8000660:	08002a20 	.word	0x08002a20
 8000664:	08002a24 	.word	0x08002a24
 8000668:	08002a3c 	.word	0x08002a3c

0800066c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af00      	add	r7, sp, #0
 8000672:	60f8      	str	r0, [r7, #12]
 8000674:	60b9      	str	r1, [r7, #8]
 8000676:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]
 800067c:	e00a      	b.n	8000694 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800067e:	f3af 8000 	nop.w
 8000682:	4601      	mov	r1, r0
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	1c5a      	adds	r2, r3, #1
 8000688:	60ba      	str	r2, [r7, #8]
 800068a:	b2ca      	uxtb	r2, r1
 800068c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800068e:	697b      	ldr	r3, [r7, #20]
 8000690:	3301      	adds	r3, #1
 8000692:	617b      	str	r3, [r7, #20]
 8000694:	697a      	ldr	r2, [r7, #20]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	429a      	cmp	r2, r3
 800069a:	dbf0      	blt.n	800067e <_read+0x12>
	}

return len;
 800069c:	687b      	ldr	r3, [r7, #4]
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3718      	adds	r7, #24
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b086      	sub	sp, #24
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	60f8      	str	r0, [r7, #12]
 80006ae:	60b9      	str	r1, [r7, #8]
 80006b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006b2:	2300      	movs	r3, #0
 80006b4:	617b      	str	r3, [r7, #20]
 80006b6:	e009      	b.n	80006cc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	1c5a      	adds	r2, r3, #1
 80006bc:	60ba      	str	r2, [r7, #8]
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	4618      	mov	r0, r3
 80006c2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006c6:	697b      	ldr	r3, [r7, #20]
 80006c8:	3301      	adds	r3, #1
 80006ca:	617b      	str	r3, [r7, #20]
 80006cc:	697a      	ldr	r2, [r7, #20]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	429a      	cmp	r2, r3
 80006d2:	dbf1      	blt.n	80006b8 <_write+0x12>
	}
	return len;
 80006d4:	687b      	ldr	r3, [r7, #4]
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	3718      	adds	r7, #24
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}

080006de <_close>:

int _close(int file)
{
 80006de:	b480      	push	{r7}
 80006e0:	b083      	sub	sp, #12
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	6078      	str	r0, [r7, #4]
	return -1;
 80006e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bc80      	pop	{r7}
 80006f2:	4770      	bx	lr

080006f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000704:	605a      	str	r2, [r3, #4]
	return 0;
 8000706:	2300      	movs	r3, #0
}
 8000708:	4618      	mov	r0, r3
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	bc80      	pop	{r7}
 8000710:	4770      	bx	lr

08000712 <_isatty>:

int _isatty(int file)
{
 8000712:	b480      	push	{r7}
 8000714:	b083      	sub	sp, #12
 8000716:	af00      	add	r7, sp, #0
 8000718:	6078      	str	r0, [r7, #4]
	return 1;
 800071a:	2301      	movs	r3, #1
}
 800071c:	4618      	mov	r0, r3
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	bc80      	pop	{r7}
 8000724:	4770      	bx	lr

08000726 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000726:	b480      	push	{r7}
 8000728:	b085      	sub	sp, #20
 800072a:	af00      	add	r7, sp, #0
 800072c:	60f8      	str	r0, [r7, #12]
 800072e:	60b9      	str	r1, [r7, #8]
 8000730:	607a      	str	r2, [r7, #4]
	return 0;
 8000732:	2300      	movs	r3, #0
}
 8000734:	4618      	mov	r0, r3
 8000736:	3714      	adds	r7, #20
 8000738:	46bd      	mov	sp, r7
 800073a:	bc80      	pop	{r7}
 800073c:	4770      	bx	lr
	...

08000740 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b086      	sub	sp, #24
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000748:	4a14      	ldr	r2, [pc, #80]	; (800079c <_sbrk+0x5c>)
 800074a:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <_sbrk+0x60>)
 800074c:	1ad3      	subs	r3, r2, r3
 800074e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000754:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <_sbrk+0x64>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d102      	bne.n	8000762 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800075c:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <_sbrk+0x64>)
 800075e:	4a12      	ldr	r2, [pc, #72]	; (80007a8 <_sbrk+0x68>)
 8000760:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000762:	4b10      	ldr	r3, [pc, #64]	; (80007a4 <_sbrk+0x64>)
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	4413      	add	r3, r2
 800076a:	693a      	ldr	r2, [r7, #16]
 800076c:	429a      	cmp	r2, r3
 800076e:	d207      	bcs.n	8000780 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000770:	f001 fb44 	bl	8001dfc <__errno>
 8000774:	4603      	mov	r3, r0
 8000776:	220c      	movs	r2, #12
 8000778:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800077a:	f04f 33ff 	mov.w	r3, #4294967295
 800077e:	e009      	b.n	8000794 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000780:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <_sbrk+0x64>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000786:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <_sbrk+0x64>)
 8000788:	681a      	ldr	r2, [r3, #0]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4413      	add	r3, r2
 800078e:	4a05      	ldr	r2, [pc, #20]	; (80007a4 <_sbrk+0x64>)
 8000790:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000792:	68fb      	ldr	r3, [r7, #12]
}
 8000794:	4618      	mov	r0, r3
 8000796:	3718      	adds	r7, #24
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20018000 	.word	0x20018000
 80007a0:	00000400 	.word	0x00000400
 80007a4:	200000a8 	.word	0x200000a8
 80007a8:	20000220 	.word	0x20000220

080007ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007ac:	480d      	ldr	r0, [pc, #52]	; (80007e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007ae:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80007b0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007b4:	480c      	ldr	r0, [pc, #48]	; (80007e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80007b6:	490d      	ldr	r1, [pc, #52]	; (80007ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80007b8:	4a0d      	ldr	r2, [pc, #52]	; (80007f0 <LoopForever+0xe>)
  movs r3, #0
 80007ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007bc:	e002      	b.n	80007c4 <LoopCopyDataInit>

080007be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007c2:	3304      	adds	r3, #4

080007c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007c8:	d3f9      	bcc.n	80007be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ca:	4a0a      	ldr	r2, [pc, #40]	; (80007f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007cc:	4c0a      	ldr	r4, [pc, #40]	; (80007f8 <LoopForever+0x16>)
  movs r3, #0
 80007ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007d0:	e001      	b.n	80007d6 <LoopFillZerobss>

080007d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007d4:	3204      	adds	r2, #4

080007d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007d8:	d3fb      	bcc.n	80007d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007da:	f001 fb15 	bl	8001e08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007de:	f7ff fecd 	bl	800057c <main>

080007e2 <LoopForever>:

LoopForever:
    b LoopForever
 80007e2:	e7fe      	b.n	80007e2 <LoopForever>
  ldr   r0, =_estack
 80007e4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80007e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007ec:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80007f0:	08002a90 	.word	0x08002a90
  ldr r2, =_sbss
 80007f4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80007f8:	20000220 	.word	0x20000220

080007fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007fc:	e7fe      	b.n	80007fc <ADC1_2_IRQHandler>
	...

08000800 <ds3231_init>:
	for(uint32_t i=0 ; i < (cnt * 1000 ); i++);
}
//returns 1 : CH = 1 ; then init failed
//returns 0 : CH = 0 ; then init success
uint8_t ds3231_init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
	//1. init the i2c
	ds3231_i2c_pin_config();
 8000804:	f000 f906 	bl	8000a14 <ds3231_i2c_pin_config>

	//2. initialize the i2c peripheral
	ds3231_i2c_config();
 8000808:	f000 f948 	bl	8000a9c <ds3231_i2c_config>
	//for(uint32_t i = 0; i < 500000/2; i++);

	//3. Enable the I2C peripheral
	//I2C_PeripheralControl(DS3231_I2C, DISABLE);
	//mdelay(2000);
	I2C_PeripheralControl(DS3231_I2C, ENABLE);
 800080c:	2101      	movs	r1, #1
 800080e:	4807      	ldr	r0, [pc, #28]	; (800082c <ds3231_init+0x2c>)
 8000810:	f001 f90a 	bl	8001a28 <I2C_PeripheralControl>

	//4. Make clock halt = 0;
	//uint8_t clock_state = ds3231_read(DS3231_ADDR_CONTROL_STATUS);
	ds3231_write(0x00,DS3231_ADDR_CONTROL_STATUS);
 8000814:	210f      	movs	r1, #15
 8000816:	2000      	movs	r0, #0
 8000818:	f000 f956 	bl	8000ac8 <ds3231_write>
	ds3231_write(0x00,DS3231_ADDR_CONTROL);
 800081c:	210e      	movs	r1, #14
 800081e:	2000      	movs	r0, #0
 8000820:	f000 f952 	bl	8000ac8 <ds3231_write>

	//5. Read back clock halt bit
	//uint8_t clock_state = ds3231_read(DS3231_ADDR_CONTROL);

	return 0;// ((clock_state >> 7) & 0x1);
 8000824:	2300      	movs	r3, #0
}
 8000826:	4618      	mov	r0, r3
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40005400 	.word	0x40005400

08000830 <ds3231_set_current_time>:

void ds3231_set_current_time(RTC_time_t * rtc_time)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
	uint8_t seconds, hrs;
	seconds = binary_to_bcd(rtc_time->seconds);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	4618      	mov	r0, r3
 800083e:	f000 f983 	bl	8000b48 <binary_to_bcd>
 8000842:	4603      	mov	r3, r0
 8000844:	73bb      	strb	r3, [r7, #14]
	seconds &= ~(1 << 7);
 8000846:	7bbb      	ldrb	r3, [r7, #14]
 8000848:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800084c:	73bb      	strb	r3, [r7, #14]
	ds3231_write(seconds,DS3231_ADDR_SEC);
 800084e:	7bbb      	ldrb	r3, [r7, #14]
 8000850:	2100      	movs	r1, #0
 8000852:	4618      	mov	r0, r3
 8000854:	f000 f938 	bl	8000ac8 <ds3231_write>
	ds3231_write(binary_to_bcd(rtc_time -> minutes),DS3231_ADDR_MIN);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	785b      	ldrb	r3, [r3, #1]
 800085c:	4618      	mov	r0, r3
 800085e:	f000 f973 	bl	8000b48 <binary_to_bcd>
 8000862:	4603      	mov	r3, r0
 8000864:	2101      	movs	r1, #1
 8000866:	4618      	mov	r0, r3
 8000868:	f000 f92e 	bl	8000ac8 <ds3231_write>
	hrs = binary_to_bcd(rtc_time -> hours);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	789b      	ldrb	r3, [r3, #2]
 8000870:	4618      	mov	r0, r3
 8000872:	f000 f969 	bl	8000b48 <binary_to_bcd>
 8000876:	4603      	mov	r3, r0
 8000878:	73fb      	strb	r3, [r7, #15]

	if(rtc_time -> time_format == TIME_FORMAT_24HRS)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	78db      	ldrb	r3, [r3, #3]
 800087e:	2b02      	cmp	r3, #2
 8000880:	d104      	bne.n	800088c <ds3231_set_current_time+0x5c>
	{
		hrs &= ~(1 << 6);
 8000882:	7bfb      	ldrb	r3, [r7, #15]
 8000884:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000888:	73fb      	strb	r3, [r7, #15]
 800088a:	e011      	b.n	80008b0 <ds3231_set_current_time+0x80>
	}else{
		hrs |= (1 << 6);
 800088c:	7bfb      	ldrb	r3, [r7, #15]
 800088e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000892:	73fb      	strb	r3, [r7, #15]
		hrs = (rtc_time -> time_format == TIME_FORMAT_12HRS_PM) ? hrs | (1 << 5) : hrs & ~(1 << 5);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	78db      	ldrb	r3, [r3, #3]
 8000898:	2b01      	cmp	r3, #1
 800089a:	d104      	bne.n	80008a6 <ds3231_set_current_time+0x76>
 800089c:	7bfb      	ldrb	r3, [r7, #15]
 800089e:	f043 0320 	orr.w	r3, r3, #32
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	e003      	b.n	80008ae <ds3231_set_current_time+0x7e>
 80008a6:	7bfb      	ldrb	r3, [r7, #15]
 80008a8:	f023 0320 	bic.w	r3, r3, #32
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	73fb      	strb	r3, [r7, #15]
	}
	ds3231_write(hrs,DS3231_ADDR_HRS);
 80008b0:	7bfb      	ldrb	r3, [r7, #15]
 80008b2:	2102      	movs	r1, #2
 80008b4:	4618      	mov	r0, r3
 80008b6:	f000 f907 	bl	8000ac8 <ds3231_write>
}
 80008ba:	bf00      	nop
 80008bc:	3710      	adds	r7, #16
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <ds3231_get_current_time>:

void ds3231_get_current_time(RTC_time_t * rtc_time)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b084      	sub	sp, #16
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
	uint8_t seconds, hrs;

	seconds = ds3231_read(DS3231_ADDR_SEC);
 80008ca:	2000      	movs	r0, #0
 80008cc:	f000 f91a 	bl	8000b04 <ds3231_read>
 80008d0:	4603      	mov	r3, r0
 80008d2:	73bb      	strb	r3, [r7, #14]

	seconds &= ~(1 >> 7);

	rtc_time -> seconds = bcd_to_binary(seconds);
 80008d4:	7bbb      	ldrb	r3, [r7, #14]
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 f962 	bl	8000ba0 <bcd_to_binary>
 80008dc:	4603      	mov	r3, r0
 80008de:	461a      	mov	r2, r3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	701a      	strb	r2, [r3, #0]

	rtc_time -> minutes = bcd_to_binary(ds3231_read(DS3231_ADDR_MIN));
 80008e4:	2001      	movs	r0, #1
 80008e6:	f000 f90d 	bl	8000b04 <ds3231_read>
 80008ea:	4603      	mov	r3, r0
 80008ec:	4618      	mov	r0, r3
 80008ee:	f000 f957 	bl	8000ba0 <bcd_to_binary>
 80008f2:	4603      	mov	r3, r0
 80008f4:	461a      	mov	r2, r3
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	705a      	strb	r2, [r3, #1]

	hrs = ds3231_read(DS3231_ADDR_HRS);
 80008fa:	2002      	movs	r0, #2
 80008fc:	f000 f902 	bl	8000b04 <ds3231_read>
 8000900:	4603      	mov	r3, r0
 8000902:	73fb      	strb	r3, [r7, #15]
	if(hrs & (1 << 6)){
 8000904:	7bfb      	ldrb	r3, [r7, #15]
 8000906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800090a:	2b00      	cmp	r3, #0
 800090c:	d00f      	beq.n	800092e <ds3231_get_current_time+0x6c>
		//12 hr format
		rtc_time -> time_format = !((hrs & (1 << 5)) ==  0);
 800090e:	7bfb      	ldrb	r3, [r7, #15]
 8000910:	f003 0320 	and.w	r3, r3, #32
 8000914:	2b00      	cmp	r3, #0
 8000916:	bf14      	ite	ne
 8000918:	2301      	movne	r3, #1
 800091a:	2300      	moveq	r3, #0
 800091c:	b2db      	uxtb	r3, r3
 800091e:	461a      	mov	r2, r3
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	70da      	strb	r2, [r3, #3]
		hrs &= ~(0x3 << 5);
 8000924:	7bfb      	ldrb	r3, [r7, #15]
 8000926:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800092a:	73fb      	strb	r3, [r7, #15]
 800092c:	e002      	b.n	8000934 <ds3231_get_current_time+0x72>
	}else{
		//24 hr format
		rtc_time -> time_format = TIME_FORMAT_24HRS;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2202      	movs	r2, #2
 8000932:	70da      	strb	r2, [r3, #3]
	}
	rtc_time -> hours = bcd_to_binary(hrs);
 8000934:	7bfb      	ldrb	r3, [r7, #15]
 8000936:	4618      	mov	r0, r3
 8000938:	f000 f932 	bl	8000ba0 <bcd_to_binary>
 800093c:	4603      	mov	r3, r0
 800093e:	461a      	mov	r2, r3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	709a      	strb	r2, [r3, #2]
}
 8000944:	bf00      	nop
 8000946:	3710      	adds	r7, #16
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <ds3231_set_current_date>:


void ds3231_set_current_date(RTC_date_t * rtc_date)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	ds3231_write(binary_to_bcd(rtc_date -> date), DS3231_ADDR_DATE);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	4618      	mov	r0, r3
 800095a:	f000 f8f5 	bl	8000b48 <binary_to_bcd>
 800095e:	4603      	mov	r3, r0
 8000960:	2104      	movs	r1, #4
 8000962:	4618      	mov	r0, r3
 8000964:	f000 f8b0 	bl	8000ac8 <ds3231_write>
	ds3231_write(binary_to_bcd(rtc_date -> month), DS3231_ADDR_MONTH);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	785b      	ldrb	r3, [r3, #1]
 800096c:	4618      	mov	r0, r3
 800096e:	f000 f8eb 	bl	8000b48 <binary_to_bcd>
 8000972:	4603      	mov	r3, r0
 8000974:	2105      	movs	r1, #5
 8000976:	4618      	mov	r0, r3
 8000978:	f000 f8a6 	bl	8000ac8 <ds3231_write>
	ds3231_write(binary_to_bcd(rtc_date -> year), DS3231_ADDR_YEAR);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	789b      	ldrb	r3, [r3, #2]
 8000980:	4618      	mov	r0, r3
 8000982:	f000 f8e1 	bl	8000b48 <binary_to_bcd>
 8000986:	4603      	mov	r3, r0
 8000988:	2106      	movs	r1, #6
 800098a:	4618      	mov	r0, r3
 800098c:	f000 f89c 	bl	8000ac8 <ds3231_write>
	ds3231_write(binary_to_bcd(rtc_date -> day), DS3231_ADDR_DAY);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	78db      	ldrb	r3, [r3, #3]
 8000994:	4618      	mov	r0, r3
 8000996:	f000 f8d7 	bl	8000b48 <binary_to_bcd>
 800099a:	4603      	mov	r3, r0
 800099c:	2103      	movs	r1, #3
 800099e:	4618      	mov	r0, r3
 80009a0:	f000 f892 	bl	8000ac8 <ds3231_write>
}
 80009a4:	bf00      	nop
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <ds3231_get_current_date>:

void ds3231_get_current_date(RTC_date_t * rtc_date)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
	rtc_date -> day = bcd_to_binary(ds3231_read(DS3231_ADDR_DAY));
 80009b4:	2003      	movs	r0, #3
 80009b6:	f000 f8a5 	bl	8000b04 <ds3231_read>
 80009ba:	4603      	mov	r3, r0
 80009bc:	4618      	mov	r0, r3
 80009be:	f000 f8ef 	bl	8000ba0 <bcd_to_binary>
 80009c2:	4603      	mov	r3, r0
 80009c4:	461a      	mov	r2, r3
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	70da      	strb	r2, [r3, #3]
	rtc_date -> date = bcd_to_binary(ds3231_read(DS3231_ADDR_DATE));
 80009ca:	2004      	movs	r0, #4
 80009cc:	f000 f89a 	bl	8000b04 <ds3231_read>
 80009d0:	4603      	mov	r3, r0
 80009d2:	4618      	mov	r0, r3
 80009d4:	f000 f8e4 	bl	8000ba0 <bcd_to_binary>
 80009d8:	4603      	mov	r3, r0
 80009da:	461a      	mov	r2, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	701a      	strb	r2, [r3, #0]
	rtc_date -> month = bcd_to_binary(ds3231_read(DS3231_ADDR_MONTH));
 80009e0:	2005      	movs	r0, #5
 80009e2:	f000 f88f 	bl	8000b04 <ds3231_read>
 80009e6:	4603      	mov	r3, r0
 80009e8:	4618      	mov	r0, r3
 80009ea:	f000 f8d9 	bl	8000ba0 <bcd_to_binary>
 80009ee:	4603      	mov	r3, r0
 80009f0:	461a      	mov	r2, r3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	705a      	strb	r2, [r3, #1]
	rtc_date -> year = bcd_to_binary(ds3231_read(DS3231_ADDR_YEAR));
 80009f6:	2006      	movs	r0, #6
 80009f8:	f000 f884 	bl	8000b04 <ds3231_read>
 80009fc:	4603      	mov	r3, r0
 80009fe:	4618      	mov	r0, r3
 8000a00:	f000 f8ce 	bl	8000ba0 <bcd_to_binary>
 8000a04:	4603      	mov	r3, r0
 8000a06:	461a      	mov	r2, r3
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	709a      	strb	r2, [r3, #2]
}
 8000a0c:	bf00      	nop
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <ds3231_i2c_pin_config>:

static void ds3231_i2c_pin_config(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af00      	add	r7, sp, #0
	GPIO_Handle_t i2c_sda, i2c_scl;

	memset(&i2c_sda,0,sizeof(i2c_sda));
 8000a1a:	f107 030c 	add.w	r3, r7, #12
 8000a1e:	220c      	movs	r2, #12
 8000a20:	2100      	movs	r1, #0
 8000a22:	4618      	mov	r0, r3
 8000a24:	f001 f99b 	bl	8001d5e <memset>
	memset(&i2c_scl,0,sizeof(i2c_scl));
 8000a28:	463b      	mov	r3, r7
 8000a2a:	220c      	movs	r2, #12
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f001 f995 	bl	8001d5e <memset>
	 * ***************************************************************************
	 * I2C1_SCL          PB8            4            CN1                   10
	 * I2C1_SDA          PB9            4            CN1                    9
	 * ***************************************************************************
	 */
	i2c_sda.pGPIOx = DS3231_I2C_GPIO_PORT;
 8000a34:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <ds3231_i2c_pin_config+0x84>)
 8000a36:	60fb      	str	r3, [r7, #12]
	i2c_sda.GPIO_PinConf.GPIO_PinAltFunMode = 4;
 8000a38:	2304      	movs	r3, #4
 8000a3a:	757b      	strb	r3, [r7, #21]
	i2c_sda.GPIO_PinConf.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	747b      	strb	r3, [r7, #17]
	i2c_sda.GPIO_PinConf.GPIO_PinNumber = DS3231_I2C_SDA_PIN;
 8000a40:	2309      	movs	r3, #9
 8000a42:	743b      	strb	r3, [r7, #16]
	i2c_sda.GPIO_PinConf.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000a44:	2301      	movs	r3, #1
 8000a46:	74bb      	strb	r3, [r7, #18]
	i2c_sda.GPIO_PinConf.GPIO_PinPuPdControl = DS3231_I2C_PUPD;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	753b      	strb	r3, [r7, #20]
	i2c_sda.GPIO_PinConf.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	74fb      	strb	r3, [r7, #19]

	GPIO_PeriClockControl(DS3231_I2C_GPIO_PORT, ENABLE);
 8000a50:	2101      	movs	r1, #1
 8000a52:	4811      	ldr	r0, [pc, #68]	; (8000a98 <ds3231_i2c_pin_config+0x84>)
 8000a54:	f000 fa06 	bl	8000e64 <GPIO_PeriClockControl>
	GPIO_Init(&i2c_sda);
 8000a58:	f107 030c 	add.w	r3, r7, #12
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f000 facf 	bl	8001000 <GPIO_Init>

	i2c_scl.pGPIOx = DS3231_I2C_GPIO_PORT;
 8000a62:	4b0d      	ldr	r3, [pc, #52]	; (8000a98 <ds3231_i2c_pin_config+0x84>)
 8000a64:	603b      	str	r3, [r7, #0]
	i2c_scl.GPIO_PinConf.GPIO_PinAltFunMode = 4;
 8000a66:	2304      	movs	r3, #4
 8000a68:	727b      	strb	r3, [r7, #9]
	i2c_scl.GPIO_PinConf.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	717b      	strb	r3, [r7, #5]
	i2c_scl.GPIO_PinConf.GPIO_PinNumber = DS3231_I2C_SCL_PIN;
 8000a6e:	2308      	movs	r3, #8
 8000a70:	713b      	strb	r3, [r7, #4]
	i2c_scl.GPIO_PinConf.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000a72:	2301      	movs	r3, #1
 8000a74:	71bb      	strb	r3, [r7, #6]
	i2c_scl.GPIO_PinConf.GPIO_PinPuPdControl = DS3231_I2C_PUPD;
 8000a76:	2301      	movs	r3, #1
 8000a78:	723b      	strb	r3, [r7, #8]
	i2c_scl.GPIO_PinConf.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClockControl(DS3231_I2C_GPIO_PORT, ENABLE);
 8000a7e:	2101      	movs	r1, #1
 8000a80:	4805      	ldr	r0, [pc, #20]	; (8000a98 <ds3231_i2c_pin_config+0x84>)
 8000a82:	f000 f9ef 	bl	8000e64 <GPIO_PeriClockControl>
	GPIO_Init(&i2c_scl);
 8000a86:	463b      	mov	r3, r7
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f000 fab9 	bl	8001000 <GPIO_Init>
}
 8000a8e:	bf00      	nop
 8000a90:	3718      	adds	r7, #24
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	48000400 	.word	0x48000400

08000a9c <ds3231_i2c_config>:

static void ds3231_i2c_config(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
	g_ds3231I2CHandle.pI2Cx = DS3231_I2C;
 8000aa0:	4b06      	ldr	r3, [pc, #24]	; (8000abc <ds3231_i2c_config+0x20>)
 8000aa2:	4a07      	ldr	r2, [pc, #28]	; (8000ac0 <ds3231_i2c_config+0x24>)
 8000aa4:	601a      	str	r2, [r3, #0]
	g_ds3231I2CHandle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8000aa6:	4b05      	ldr	r3, [pc, #20]	; (8000abc <ds3231_i2c_config+0x20>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	725a      	strb	r2, [r3, #9]
	g_ds3231I2CHandle.I2C_Config.I2C_SCLSpeed = DS3231_I2C_SPEED;
 8000aac:	4b03      	ldr	r3, [pc, #12]	; (8000abc <ds3231_i2c_config+0x20>)
 8000aae:	4a05      	ldr	r2, [pc, #20]	; (8000ac4 <ds3231_i2c_config+0x28>)
 8000ab0:	605a      	str	r2, [r3, #4]
	I2C_Init(&g_ds3231I2CHandle);
 8000ab2:	4802      	ldr	r0, [pc, #8]	; (8000abc <ds3231_i2c_config+0x20>)
 8000ab4:	f000 fe2c 	bl	8001710 <I2C_Init>
}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	200000ac 	.word	0x200000ac
 8000ac0:	40005400 	.word	0x40005400
 8000ac4:	000186a0 	.word	0x000186a0

08000ac8 <ds3231_write>:

static void ds3231_write(uint8_t value,uint8_t reg_addr)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af02      	add	r7, sp, #8
 8000ace:	4603      	mov	r3, r0
 8000ad0:	460a      	mov	r2, r1
 8000ad2:	71fb      	strb	r3, [r7, #7]
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	71bb      	strb	r3, [r7, #6]
	uint8_t tx[2];
	tx[0] = reg_addr;
 8000ad8:	79bb      	ldrb	r3, [r7, #6]
 8000ada:	733b      	strb	r3, [r7, #12]
	tx[1] = value;
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	737b      	strb	r3, [r7, #13]

	I2C_MasterSendData(&g_ds3231I2CHandle, tx, 2, DS3231_I2C_ADDRESS, ENABLE, DISABLE);
 8000ae0:	f107 010c 	add.w	r1, r7, #12
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	9301      	str	r3, [sp, #4]
 8000ae8:	2301      	movs	r3, #1
 8000aea:	9300      	str	r3, [sp, #0]
 8000aec:	23d0      	movs	r3, #208	; 0xd0
 8000aee:	2202      	movs	r2, #2
 8000af0:	4803      	ldr	r0, [pc, #12]	; (8000b00 <ds3231_write+0x38>)
 8000af2:	f000 fe95 	bl	8001820 <I2C_MasterSendData>
}
 8000af6:	bf00      	nop
 8000af8:	3710      	adds	r7, #16
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	200000ac 	.word	0x200000ac

08000b04 <ds3231_read>:

static uint8_t ds3231_read(uint8_t reg_addr)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af02      	add	r7, sp, #8
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	71fb      	strb	r3, [r7, #7]
	uint8_t read_reg_data;
	I2C_MasterSendData(&g_ds3231I2CHandle, &reg_addr, 1, DS3231_I2C_ADDRESS, DISABLE, DISABLE);
 8000b0e:	1df9      	adds	r1, r7, #7
 8000b10:	2300      	movs	r3, #0
 8000b12:	9301      	str	r3, [sp, #4]
 8000b14:	2300      	movs	r3, #0
 8000b16:	9300      	str	r3, [sp, #0]
 8000b18:	23d0      	movs	r3, #208	; 0xd0
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	4809      	ldr	r0, [pc, #36]	; (8000b44 <ds3231_read+0x40>)
 8000b1e:	f000 fe7f 	bl	8001820 <I2C_MasterSendData>
	I2C_MasterReceiveData(&g_ds3231I2CHandle, &read_reg_data, 1, DS3231_I2C_ADDRESS, DISABLE, DISABLE); //Read data from the reg_addrs is currently pointer to, then first operation is write
 8000b22:	f107 010f 	add.w	r1, r7, #15
 8000b26:	2300      	movs	r3, #0
 8000b28:	9301      	str	r3, [sp, #4]
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	9300      	str	r3, [sp, #0]
 8000b2e:	23d0      	movs	r3, #208	; 0xd0
 8000b30:	2201      	movs	r2, #1
 8000b32:	4804      	ldr	r0, [pc, #16]	; (8000b44 <ds3231_read+0x40>)
 8000b34:	f000 ff0a 	bl	800194c <I2C_MasterReceiveData>

	return read_reg_data;
 8000b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3710      	adds	r7, #16
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	200000ac 	.word	0x200000ac

08000b48 <binary_to_bcd>:
 * _______
 * 01000001    41
 *
 ***************************************************** */
static uint8_t binary_to_bcd(uint8_t value)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	71fb      	strb	r3, [r7, #7]
	uint8_t m, n;
	uint8_t bcd;

	bcd = value;
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	73fb      	strb	r3, [r7, #15]
	if(value >= 10)
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	2b09      	cmp	r3, #9
 8000b5a:	d918      	bls.n	8000b8e <binary_to_bcd+0x46>
	{
		m = value / 10;
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	4a0f      	ldr	r2, [pc, #60]	; (8000b9c <binary_to_bcd+0x54>)
 8000b60:	fba2 2303 	umull	r2, r3, r2, r3
 8000b64:	08db      	lsrs	r3, r3, #3
 8000b66:	73bb      	strb	r3, [r7, #14]
		n = value % 10;
 8000b68:	79fa      	ldrb	r2, [r7, #7]
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <binary_to_bcd+0x54>)
 8000b6c:	fba3 1302 	umull	r1, r3, r3, r2
 8000b70:	08d9      	lsrs	r1, r3, #3
 8000b72:	460b      	mov	r3, r1
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	440b      	add	r3, r1
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	1ad3      	subs	r3, r2, r3
 8000b7c:	737b      	strb	r3, [r7, #13]
		bcd = ((m << 4) | n);
 8000b7e:	7bbb      	ldrb	r3, [r7, #14]
 8000b80:	011b      	lsls	r3, r3, #4
 8000b82:	b25a      	sxtb	r2, r3
 8000b84:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	b25b      	sxtb	r3, r3
 8000b8c:	73fb      	strb	r3, [r7, #15]
	}
	return bcd;
 8000b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3714      	adds	r7, #20
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bc80      	pop	{r7}
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	cccccccd 	.word	0xcccccccd

08000ba0 <bcd_to_binary>:
 * n = (x & 0x0f)  = 2
 * res = m+n
 * 10 +2 = 12
 */
static uint8_t bcd_to_binary(uint8_t value)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	71fb      	strb	r3, [r7, #7]
	uint8_t m, n;
	uint8_t bin;

	bin = value;
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	73fb      	strb	r3, [r7, #15]
	m = (uint8_t)((value >> 4) * 10);
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	091b      	lsrs	r3, r3, #4
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	0092      	lsls	r2, r2, #2
 8000bb8:	4413      	add	r3, r2
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	73bb      	strb	r3, [r7, #14]
	n = (value & (uint8_t)0x0F);
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	f003 030f 	and.w	r3, r3, #15
 8000bc4:	737b      	strb	r3, [r7, #13]
	bin = m + n;
 8000bc6:	7bba      	ldrb	r2, [r7, #14]
 8000bc8:	7b7b      	ldrb	r3, [r7, #13]
 8000bca:	4413      	add	r3, r2
 8000bcc:	73fb      	strb	r3, [r7, #15]
	return bin;
 8000bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3714      	adds	r7, #20
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bc80      	pop	{r7}
 8000bd8:	4770      	bx	lr
	...

08000bdc <lcd_send_command>:
static void lcd_enable(void);
static void mdelay(uint8_t);
static void udelay(uint8_t);

void lcd_send_command(uint8_t cmd)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
	/* RS = 0 for LCD command */
	//HAL_GPIO_WritePin(GPIOB, LCD_GPIO_RS, RESET);
	GPIO_WriteToOuputPin(GPIOB, LCD_GPIO_RS, GPIO_PIN_RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2102      	movs	r1, #2
 8000bea:	480d      	ldr	r0, [pc, #52]	; (8000c20 <lcd_send_command+0x44>)
 8000bec:	f000 fbaa 	bl	8001344 <GPIO_WriteToOuputPin>

	/* RnW = 0, writing to ldc */
	//HAL_GPIO_WritePin(GPIOA, LCD_GPIO_RW, RESET);
	GPIO_WriteToOuputPin(LCD_GPIO_PORTA, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2104      	movs	r1, #4
 8000bf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf8:	f000 fba4 	bl	8001344 <GPIO_WriteToOuputPin>

	write_4_bits(cmd >> 4); /* Higher nibble */
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	091b      	lsrs	r3, r3, #4
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	4618      	mov	r0, r3
 8000c04:	f000 f8a6 	bl	8000d54 <write_4_bits>

	write_4_bits(cmd & 0x0F); /* Lower nibble */
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	f003 030f 	and.w	r3, r3, #15
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	4618      	mov	r0, r3
 8000c12:	f000 f89f 	bl	8000d54 <write_4_bits>
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	48000400 	.word	0x48000400

08000c24 <lcd_print_char>:
 * First higher nibble of the data will be sent on to the data lines D4,D5,D6,D7
 * Then lower nibble of the data will be set on the data lines D4,D5,D6,D7
 *
 */
void lcd_print_char(uint8_t data)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	71fb      	strb	r3, [r7, #7]
	/* RS = 1 for LCD user data */
	//HAL_GPIO_WritePin(GPIOB, LCD_GPIO_RS, SET);
	/* RnW = 0, writing to ldc */
	//HAL_GPIO_WritePin(GPIOA, LCD_GPIO_RW, RESET);
	GPIO_WriteToOuputPin(LCD_GPIO_PORTA, LCD_GPIO_RS, GPIO_PIN_SET);
 8000c2e:	2201      	movs	r2, #1
 8000c30:	2102      	movs	r1, #2
 8000c32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c36:	f000 fb85 	bl	8001344 <GPIO_WriteToOuputPin>
	/* RnW = 0, writing to ldc */
	GPIO_WriteToOuputPin(LCD_GPIO_PORTA, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2104      	movs	r1, #4
 8000c3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c42:	f000 fb7f 	bl	8001344 <GPIO_WriteToOuputPin>

	write_4_bits(data >> 4); /* Higher nibble */
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	091b      	lsrs	r3, r3, #4
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f000 f881 	bl	8000d54 <write_4_bits>

	write_4_bits(data & 0x0F); /* Lower nibble */
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	f003 030f 	and.w	r3, r3, #15
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f000 f87a 	bl	8000d54 <write_4_bits>
}
 8000c60:	bf00      	nop
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <lcd_print_string>:
void lcd_print_string(char *message)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
	do
	{
		lcd_print_char((uint8_t)*message++);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	1c5a      	adds	r2, r3, #1
 8000c74:	607a      	str	r2, [r7, #4]
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff ffd3 	bl	8000c24 <lcd_print_char>
	}
	while (*message != '\0');
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d1f4      	bne.n	8000c70 <lcd_print_string+0x8>
}
 8000c86:	bf00      	nop
 8000c88:	bf00      	nop
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <lcd_initx>:
void lcd_initx(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, LCD_GPIO_D4, RESET);
	HAL_GPIO_WritePin(GPIOC, LCD_GPIO_D5, RESET);
	HAL_GPIO_WritePin(GPIOC, LCD_GPIO_D6, RESET);
	HAL_GPIO_WritePin(GPIOC, LCD_GPIO_D7, RESET);
    */
	GPIO_WriteToOuputPin(GPIOB, LCD_GPIO_RS, GPIO_PIN_RESET);
 8000c94:	2200      	movs	r2, #0
 8000c96:	2102      	movs	r1, #2
 8000c98:	4827      	ldr	r0, [pc, #156]	; (8000d38 <lcd_initx+0xa8>)
 8000c9a:	f000 fb53 	bl	8001344 <GPIO_WriteToOuputPin>
	GPIO_WriteToOuputPin(GPIOA, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2104      	movs	r1, #4
 8000ca2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca6:	f000 fb4d 	bl	8001344 <GPIO_WriteToOuputPin>
	GPIO_WriteToOuputPin(GPIOA, LCD_GPIO_EN, GPIO_PIN_RESET);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2103      	movs	r1, #3
 8000cae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb2:	f000 fb47 	bl	8001344 <GPIO_WriteToOuputPin>
	GPIO_WriteToOuputPin(GPIOC, LCD_GPIO_D4, GPIO_PIN_RESET);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2104      	movs	r1, #4
 8000cba:	4820      	ldr	r0, [pc, #128]	; (8000d3c <lcd_initx+0xac>)
 8000cbc:	f000 fb42 	bl	8001344 <GPIO_WriteToOuputPin>
	GPIO_WriteToOuputPin(GPIOC, LCD_GPIO_D5, GPIO_PIN_RESET);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2103      	movs	r1, #3
 8000cc4:	481d      	ldr	r0, [pc, #116]	; (8000d3c <lcd_initx+0xac>)
 8000cc6:	f000 fb3d 	bl	8001344 <GPIO_WriteToOuputPin>
	GPIO_WriteToOuputPin(GPIOC, LCD_GPIO_D6, GPIO_PIN_RESET);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2102      	movs	r1, #2
 8000cce:	481b      	ldr	r0, [pc, #108]	; (8000d3c <lcd_initx+0xac>)
 8000cd0:	f000 fb38 	bl	8001344 <GPIO_WriteToOuputPin>
	GPIO_WriteToOuputPin(GPIOC, LCD_GPIO_D7, GPIO_PIN_RESET);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	4818      	ldr	r0, [pc, #96]	; (8000d3c <lcd_initx+0xac>)
 8000cda:	f000 fb33 	bl	8001344 <GPIO_WriteToOuputPin>

	//2. Do the LCD initialization

	mdelay(40);
 8000cde:	2028      	movs	r0, #40	; 0x28
 8000ce0:	f000 f890 	bl	8000e04 <mdelay>
	//HAL_GPIO_WritePin(GPIOB, LCD_GPIO_RS, RESET);

	/* RnW = 0, writing to ldc */
	//HAL_GPIO_WritePin(GPIOA, LCD_GPIO_RW, RESET);
	/* RS = 0, for LCD command */
	GPIO_WriteToOuputPin(GPIOB, LCD_GPIO_RS, GPIO_PIN_RESET);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2102      	movs	r1, #2
 8000ce8:	4813      	ldr	r0, [pc, #76]	; (8000d38 <lcd_initx+0xa8>)
 8000cea:	f000 fb2b 	bl	8001344 <GPIO_WriteToOuputPin>

	/* RnW = 0, writing to ldc */
	GPIO_WriteToOuputPin(GPIOA, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2104      	movs	r1, #4
 8000cf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf6:	f000 fb25 	bl	8001344 <GPIO_WriteToOuputPin>
                        // B7 B6 B5 B4
	write_4_bits(0x3); // 0  0  1   1
 8000cfa:	2003      	movs	r0, #3
 8000cfc:	f000 f82a 	bl	8000d54 <write_4_bits>

	mdelay(5);
 8000d00:	2005      	movs	r0, #5
 8000d02:	f000 f87f 	bl	8000e04 <mdelay>

	write_4_bits(0x3); // 0  0  1   1
 8000d06:	2003      	movs	r0, #3
 8000d08:	f000 f824 	bl	8000d54 <write_4_bits>

	udelay(150);
 8000d0c:	2096      	movs	r0, #150	; 0x96
 8000d0e:	f000 f893 	bl	8000e38 <udelay>

	write_4_bits(0x3); // 0  0  1   1
 8000d12:	2003      	movs	r0, #3
 8000d14:	f000 f81e 	bl	8000d54 <write_4_bits>

	write_4_bits(0x2); // 0  0  1   0
 8000d18:	2002      	movs	r0, #2
 8000d1a:	f000 f81b 	bl	8000d54 <write_4_bits>

	//function set command
	lcd_send_command(LCD_CMD_4DL_2N_5X8F);
 8000d1e:	2028      	movs	r0, #40	; 0x28
 8000d20:	f7ff ff5c 	bl	8000bdc <lcd_send_command>

	//display ON and cursor ON
	lcd_send_command(LCD_CMD_DON_CURON);
 8000d24:	200e      	movs	r0, #14
 8000d26:	f7ff ff59 	bl	8000bdc <lcd_send_command>

	lcd_display_clear();
 8000d2a:	f000 f84b 	bl	8000dc4 <lcd_display_clear>

	lcd_send_command(LCD_CMD_INCADD);
 8000d2e:	2006      	movs	r0, #6
 8000d30:	f7ff ff54 	bl	8000bdc <lcd_send_command>
}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	48000400 	.word	0x48000400
 8000d3c:	48000800 	.word	0x48000800

08000d40 <lcd_display_return_home>:
    default:
      break;
  }
}
void lcd_display_return_home(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
	lcd_send_command(LCD_CMD_DIS_RETURN_HOME);
 8000d44:	2002      	movs	r0, #2
 8000d46:	f7ff ff49 	bl	8000bdc <lcd_send_command>
	mdelay(2);
 8000d4a:	2002      	movs	r0, #2
 8000d4c:	f000 f85a 	bl	8000e04 <mdelay>
}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <write_4_bits>:


/* Writes 4 bits of data/command on to D4,D5,D6,D7 lines*/
static void write_4_bits(uint8_t value)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, LCD_GPIO_D4, ((value >> 0) & 0x1));
	HAL_GPIO_WritePin(GPIOC, LCD_GPIO_D5, ((value >> 1) & 0x1));
	HAL_GPIO_WritePin(GPIOC, LCD_GPIO_D6, ((value >> 2) & 0x1));
	HAL_GPIO_WritePin(GPIOC, LCD_GPIO_D7, ((value >> 3) & 0x1));
	*/
	GPIO_WriteToOuputPin(GPIOC, LCD_GPIO_D4, ((value >> 0) & 0x1));
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	f003 0301 	and.w	r3, r3, #1
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	461a      	mov	r2, r3
 8000d68:	2104      	movs	r1, #4
 8000d6a:	4815      	ldr	r0, [pc, #84]	; (8000dc0 <write_4_bits+0x6c>)
 8000d6c:	f000 faea 	bl	8001344 <GPIO_WriteToOuputPin>
	GPIO_WriteToOuputPin(GPIOC, LCD_GPIO_D5, ((value >> 1) & 0x1));
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	085b      	lsrs	r3, r3, #1
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	2103      	movs	r1, #3
 8000d80:	480f      	ldr	r0, [pc, #60]	; (8000dc0 <write_4_bits+0x6c>)
 8000d82:	f000 fadf 	bl	8001344 <GPIO_WriteToOuputPin>
	GPIO_WriteToOuputPin(GPIOC, LCD_GPIO_D6, ((value >> 2) & 0x1));
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	089b      	lsrs	r3, r3, #2
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	f003 0301 	and.w	r3, r3, #1
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	461a      	mov	r2, r3
 8000d94:	2102      	movs	r1, #2
 8000d96:	480a      	ldr	r0, [pc, #40]	; (8000dc0 <write_4_bits+0x6c>)
 8000d98:	f000 fad4 	bl	8001344 <GPIO_WriteToOuputPin>
	GPIO_WriteToOuputPin(GPIOC, LCD_GPIO_D7, ((value >> 3) & 0x1));
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	08db      	lsrs	r3, r3, #3
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	461a      	mov	r2, r3
 8000daa:	2101      	movs	r1, #1
 8000dac:	4804      	ldr	r0, [pc, #16]	; (8000dc0 <write_4_bits+0x6c>)
 8000dae:	f000 fac9 	bl	8001344 <GPIO_WriteToOuputPin>

	lcd_enable();
 8000db2:	f000 f811 	bl	8000dd8 <lcd_enable>
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	48000800 	.word	0x48000800

08000dc4 <lcd_display_clear>:

void lcd_display_clear(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
	//display clear
	lcd_send_command(LCD_CMD_DIS_CLEAR);
 8000dc8:	2001      	movs	r0, #1
 8000dca:	f7ff ff07 	bl	8000bdc <lcd_send_command>
	mdelay(2);
 8000dce:	2002      	movs	r0, #2
 8000dd0:	f000 f818 	bl	8000e04 <mdelay>
}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <lcd_enable>:

	mdelay(2);
}
*/
static void lcd_enable(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOA, LCD_GPIO_EN, GPIO_PIN_SET);
	GPIO_WriteToOuputPin(LCD_GPIO_PORTA, LCD_GPIO_EN, GPIO_PIN_SET);
 8000ddc:	2201      	movs	r2, #1
 8000dde:	2103      	movs	r1, #3
 8000de0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de4:	f000 faae 	bl	8001344 <GPIO_WriteToOuputPin>
	udelay(10);
 8000de8:	200a      	movs	r0, #10
 8000dea:	f000 f825 	bl	8000e38 <udelay>
	//HAL_GPIO_WritePin(GPIOA, LCD_GPIO_EN, GPIO_PIN_RESET);
	GPIO_WriteToOuputPin(LCD_GPIO_PORTA, LCD_GPIO_EN, GPIO_PIN_RESET);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2103      	movs	r1, #3
 8000df2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df6:	f000 faa5 	bl	8001344 <GPIO_WriteToOuputPin>
	udelay(100); /* Execution time > 37 micro seconds */
 8000dfa:	2064      	movs	r0, #100	; 0x64
 8000dfc:	f000 f81c 	bl	8000e38 <udelay>
}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <mdelay>:
static void mdelay(uint8_t cnt)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
	for(uint32_t i = 0; i< (cnt * 1000); i++);
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	e002      	b.n	8000e1a <mdelay+0x16>
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	3301      	adds	r3, #1
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e20:	fb02 f303 	mul.w	r3, r2, r3
 8000e24:	461a      	mov	r2, r3
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d3f3      	bcc.n	8000e14 <mdelay+0x10>

}
 8000e2c:	bf00      	nop
 8000e2e:	bf00      	nop
 8000e30:	3714      	adds	r7, #20
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr

08000e38 <udelay>:
static void udelay(uint8_t cnt)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	71fb      	strb	r3, [r7, #7]
	for(uint32_t i = 0; i< (cnt * 1); i++);
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	e002      	b.n	8000e4e <udelay+0x16>
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	68fa      	ldr	r2, [r7, #12]
 8000e52:	429a      	cmp	r2, r3
 8000e54:	d3f8      	bcc.n	8000e48 <udelay+0x10>

}
 8000e56:	bf00      	nop
 8000e58:	bf00      	nop
 8000e5a:	3714      	adds	r7, #20
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bc80      	pop	{r7}
 8000e60:	4770      	bx	lr
	...

08000e64 <GPIO_PeriClockControl>:
 ****************************************************************************************************************************************
 *
 *                  This function enables or disables peripheral clock for the given GPIO port
 *                  Param <base address of the GPIO peripheral><ENABLE or DISABLE macros>
 */
void GPIO_PeriClockControl(GPIO_RegDef_t* pGPIOx, uint8_t EnorDi) {
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE) {
 8000e70:	78fb      	ldrb	r3, [r7, #3]
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d157      	bne.n	8000f26 <GPIO_PeriClockControl+0xc2>
		if (pGPIOx == GPIOA){
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e7c:	d106      	bne.n	8000e8c <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 8000e7e:	4b58      	ldr	r3, [pc, #352]	; (8000fe0 <GPIO_PeriClockControl+0x17c>)
 8000e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e82:	4a57      	ldr	r2, [pc, #348]	; (8000fe0 <GPIO_PeriClockControl+0x17c>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	64d3      	str	r3, [r2, #76]	; 0x4c
		}else if(pGPIOx == GPIOH){
			GPIOH_PCLK_DI();
		}
	}

}
 8000e8a:	e0a3      	b.n	8000fd4 <GPIO_PeriClockControl+0x170>
		} else if (pGPIOx == GPIOB){
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a55      	ldr	r2, [pc, #340]	; (8000fe4 <GPIO_PeriClockControl+0x180>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d106      	bne.n	8000ea2 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000e94:	4b52      	ldr	r3, [pc, #328]	; (8000fe0 <GPIO_PeriClockControl+0x17c>)
 8000e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e98:	4a51      	ldr	r2, [pc, #324]	; (8000fe0 <GPIO_PeriClockControl+0x17c>)
 8000e9a:	f043 0302 	orr.w	r3, r3, #2
 8000e9e:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000ea0:	e098      	b.n	8000fd4 <GPIO_PeriClockControl+0x170>
		} else if (pGPIOx == GPIOC){
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a50      	ldr	r2, [pc, #320]	; (8000fe8 <GPIO_PeriClockControl+0x184>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d106      	bne.n	8000eb8 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000eaa:	4b4d      	ldr	r3, [pc, #308]	; (8000fe0 <GPIO_PeriClockControl+0x17c>)
 8000eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eae:	4a4c      	ldr	r2, [pc, #304]	; (8000fe0 <GPIO_PeriClockControl+0x17c>)
 8000eb0:	f043 0304 	orr.w	r3, r3, #4
 8000eb4:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000eb6:	e08d      	b.n	8000fd4 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx ==GPIOD){
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	4a4c      	ldr	r2, [pc, #304]	; (8000fec <GPIO_PeriClockControl+0x188>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d106      	bne.n	8000ece <GPIO_PeriClockControl+0x6a>
		    GPIOD_PCLK_EN();
 8000ec0:	4b47      	ldr	r3, [pc, #284]	; (8000fe0 <GPIO_PeriClockControl+0x17c>)
 8000ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec4:	4a46      	ldr	r2, [pc, #280]	; (8000fe0 <GPIO_PeriClockControl+0x17c>)
 8000ec6:	f043 0308 	orr.w	r3, r3, #8
 8000eca:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000ecc:	e082      	b.n	8000fd4 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOE){
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a47      	ldr	r2, [pc, #284]	; (8000ff0 <GPIO_PeriClockControl+0x18c>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d106      	bne.n	8000ee4 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000ed6:	4b42      	ldr	r3, [pc, #264]	; (8000fe0 <GPIO_PeriClockControl+0x17c>)
 8000ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eda:	4a41      	ldr	r2, [pc, #260]	; (8000fe0 <GPIO_PeriClockControl+0x17c>)
 8000edc:	f043 0310 	orr.w	r3, r3, #16
 8000ee0:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000ee2:	e077      	b.n	8000fd4 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOF){
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4a43      	ldr	r2, [pc, #268]	; (8000ff4 <GPIO_PeriClockControl+0x190>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d106      	bne.n	8000efa <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000eec:	4b3c      	ldr	r3, [pc, #240]	; (8000fe0 <GPIO_PeriClockControl+0x17c>)
 8000eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef0:	4a3b      	ldr	r2, [pc, #236]	; (8000fe0 <GPIO_PeriClockControl+0x17c>)
 8000ef2:	f043 0320 	orr.w	r3, r3, #32
 8000ef6:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000ef8:	e06c      	b.n	8000fd4 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOG){
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a3e      	ldr	r2, [pc, #248]	; (8000ff8 <GPIO_PeriClockControl+0x194>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d106      	bne.n	8000f10 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000f02:	4b37      	ldr	r3, [pc, #220]	; (8000fe0 <GPIO_PeriClockControl+0x17c>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f06:	4a36      	ldr	r2, [pc, #216]	; (8000fe0 <GPIO_PeriClockControl+0x17c>)
 8000f08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f0c:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000f0e:	e061      	b.n	8000fd4 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOH){
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4a3a      	ldr	r2, [pc, #232]	; (8000ffc <GPIO_PeriClockControl+0x198>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d15d      	bne.n	8000fd4 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 8000f18:	4b31      	ldr	r3, [pc, #196]	; (8000fe0 <GPIO_PeriClockControl+0x17c>)
 8000f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1c:	4a30      	ldr	r2, [pc, #192]	; (8000fe0 <GPIO_PeriClockControl+0x17c>)
 8000f1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f22:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000f24:	e056      	b.n	8000fd4 <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA){
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f2c:	d106      	bne.n	8000f3c <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 8000f2e:	4b2c      	ldr	r3, [pc, #176]	; (8000fe0 <GPIO_PeriClockControl+0x17c>)
 8000f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f32:	4a2b      	ldr	r2, [pc, #172]	; (8000fe0 <GPIO_PeriClockControl+0x17c>)
 8000f34:	f023 0301 	bic.w	r3, r3, #1
 8000f38:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000f3a:	e04b      	b.n	8000fd4 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOB){
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4a29      	ldr	r2, [pc, #164]	; (8000fe4 <GPIO_PeriClockControl+0x180>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d106      	bne.n	8000f52 <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 8000f44:	4b26      	ldr	r3, [pc, #152]	; (8000fe0 <GPIO_PeriClockControl+0x17c>)
 8000f46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f48:	4a25      	ldr	r2, [pc, #148]	; (8000fe0 <GPIO_PeriClockControl+0x17c>)
 8000f4a:	f023 0302 	bic.w	r3, r3, #2
 8000f4e:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000f50:	e040      	b.n	8000fd4 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOC){
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a24      	ldr	r2, [pc, #144]	; (8000fe8 <GPIO_PeriClockControl+0x184>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d106      	bne.n	8000f68 <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 8000f5a:	4b21      	ldr	r3, [pc, #132]	; (8000fe0 <GPIO_PeriClockControl+0x17c>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5e:	4a20      	ldr	r2, [pc, #128]	; (8000fe0 <GPIO_PeriClockControl+0x17c>)
 8000f60:	f023 0304 	bic.w	r3, r3, #4
 8000f64:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000f66:	e035      	b.n	8000fd4 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx ==GPIOD){
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4a20      	ldr	r2, [pc, #128]	; (8000fec <GPIO_PeriClockControl+0x188>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d106      	bne.n	8000f7e <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 8000f70:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <GPIO_PeriClockControl+0x17c>)
 8000f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f74:	4a1a      	ldr	r2, [pc, #104]	; (8000fe0 <GPIO_PeriClockControl+0x17c>)
 8000f76:	f023 0308 	bic.w	r3, r3, #8
 8000f7a:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000f7c:	e02a      	b.n	8000fd4 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOE){
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a1b      	ldr	r2, [pc, #108]	; (8000ff0 <GPIO_PeriClockControl+0x18c>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d106      	bne.n	8000f94 <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 8000f86:	4b16      	ldr	r3, [pc, #88]	; (8000fe0 <GPIO_PeriClockControl+0x17c>)
 8000f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8a:	4a15      	ldr	r2, [pc, #84]	; (8000fe0 <GPIO_PeriClockControl+0x17c>)
 8000f8c:	f023 0310 	bic.w	r3, r3, #16
 8000f90:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000f92:	e01f      	b.n	8000fd4 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOF){
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4a17      	ldr	r2, [pc, #92]	; (8000ff4 <GPIO_PeriClockControl+0x190>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d106      	bne.n	8000faa <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 8000f9c:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <GPIO_PeriClockControl+0x17c>)
 8000f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa0:	4a0f      	ldr	r2, [pc, #60]	; (8000fe0 <GPIO_PeriClockControl+0x17c>)
 8000fa2:	f023 0320 	bic.w	r3, r3, #32
 8000fa6:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000fa8:	e014      	b.n	8000fd4 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOG){
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a12      	ldr	r2, [pc, #72]	; (8000ff8 <GPIO_PeriClockControl+0x194>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d106      	bne.n	8000fc0 <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <GPIO_PeriClockControl+0x17c>)
 8000fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb6:	4a0a      	ldr	r2, [pc, #40]	; (8000fe0 <GPIO_PeriClockControl+0x17c>)
 8000fb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000fbc:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000fbe:	e009      	b.n	8000fd4 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOH){
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4a0e      	ldr	r2, [pc, #56]	; (8000ffc <GPIO_PeriClockControl+0x198>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d105      	bne.n	8000fd4 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 8000fc8:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <GPIO_PeriClockControl+0x17c>)
 8000fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fcc:	4a04      	ldr	r2, [pc, #16]	; (8000fe0 <GPIO_PeriClockControl+0x17c>)
 8000fce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000fd2:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bc80      	pop	{r7}
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	48000400 	.word	0x48000400
 8000fe8:	48000800 	.word	0x48000800
 8000fec:	48000c00 	.word	0x48000c00
 8000ff0:	48001000 	.word	0x48001000
 8000ff4:	48001400 	.word	0x48001400
 8000ff8:	48001800 	.word	0x48001800
 8000ffc:	48001c00 	.word	0x48001c00

08001000 <GPIO_Init>:
 *********************************************************************************************************************************
 */
/*
 * GPIO_Init
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 8001000:	b480      	push	{r7}
 8001002:	b087      	sub	sp, #28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; //temp. register
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]

	// enable the peripheral clock
	//GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);

	//1. configure the mode of gpio pin
	if (pGPIOHandle->GPIO_PinConf.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	795b      	ldrb	r3, [r3, #5]
 8001010:	2b03      	cmp	r3, #3
 8001012:	d822      	bhi.n	800105a <GPIO_Init+0x5a>
		// the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConf.GPIO_PinMode
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	795b      	ldrb	r3, [r3, #5]
 8001018:	461a      	mov	r2, r3
				<< (2 * pGPIOHandle->GPIO_PinConf.GPIO_PinNumber)); //setting
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	791b      	ldrb	r3, [r3, #4]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
		temp = (pGPIOHandle->GPIO_PinConf.GPIO_PinMode
 8001024:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
				<< 2 * pGPIOHandle->GPIO_PinConf.GPIO_PinNumber); //clearing
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	791b      	ldrb	r3, [r3, #4]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	2103      	movs	r1, #3
 8001034:	fa01 f303 	lsl.w	r3, r1, r3
		pGPIOHandle->pGPIOx->MODER &= ~(0x3
 8001038:	43db      	mvns	r3, r3
 800103a:	4619      	mov	r1, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	400a      	ands	r2, r1
 8001042:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	6819      	ldr	r1, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	697a      	ldr	r2, [r7, #20]
 8001050:	430a      	orrs	r2, r1
 8001052:	601a      	str	r2, [r3, #0]
		temp = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]
 8001058:	e0c9      	b.n	80011ee <GPIO_Init+0x1ee>
	} else {
		//interrupt mode
		if (pGPIOHandle->GPIO_PinConf.GPIO_PinMode > GPIO_MODE_IT_FT) {
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	795b      	ldrb	r3, [r3, #5]
 800105e:	2b04      	cmp	r3, #4
 8001060:	d917      	bls.n	8001092 <GPIO_Init+0x92>
			// 1. configure the FTSR
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConf.GPIO_PinNumber);
 8001062:	4b45      	ldr	r3, [pc, #276]	; (8001178 <GPIO_Init+0x178>)
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	7912      	ldrb	r2, [r2, #4]
 800106a:	4611      	mov	r1, r2
 800106c:	2201      	movs	r2, #1
 800106e:	408a      	lsls	r2, r1
 8001070:	4611      	mov	r1, r2
 8001072:	4a41      	ldr	r2, [pc, #260]	; (8001178 <GPIO_Init+0x178>)
 8001074:	430b      	orrs	r3, r1
 8001076:	60d3      	str	r3, [r2, #12]
			// clear the corresponding RTSR bit
			EXTI->RTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConf.GPIO_PinNumber);
 8001078:	4b3f      	ldr	r3, [pc, #252]	; (8001178 <GPIO_Init+0x178>)
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	7912      	ldrb	r2, [r2, #4]
 8001080:	4611      	mov	r1, r2
 8001082:	2201      	movs	r2, #1
 8001084:	408a      	lsls	r2, r1
 8001086:	43d2      	mvns	r2, r2
 8001088:	4611      	mov	r1, r2
 800108a:	4a3b      	ldr	r2, [pc, #236]	; (8001178 <GPIO_Init+0x178>)
 800108c:	400b      	ands	r3, r1
 800108e:	6093      	str	r3, [r2, #8]
 8001090:	e035      	b.n	80010fe <GPIO_Init+0xfe>
		} else if (pGPIOHandle->GPIO_PinConf.GPIO_PinMode > GPIO_MODE_IT_RT) {
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	795b      	ldrb	r3, [r3, #5]
 8001096:	2b05      	cmp	r3, #5
 8001098:	d917      	bls.n	80010ca <GPIO_Init+0xca>
			// 1. configure the RTSR
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConf.GPIO_PinNumber);
 800109a:	4b37      	ldr	r3, [pc, #220]	; (8001178 <GPIO_Init+0x178>)
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	7912      	ldrb	r2, [r2, #4]
 80010a2:	4611      	mov	r1, r2
 80010a4:	2201      	movs	r2, #1
 80010a6:	408a      	lsls	r2, r1
 80010a8:	4611      	mov	r1, r2
 80010aa:	4a33      	ldr	r2, [pc, #204]	; (8001178 <GPIO_Init+0x178>)
 80010ac:	430b      	orrs	r3, r1
 80010ae:	6093      	str	r3, [r2, #8]
			// clear the corresponding FTSR bit
			EXTI->FTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConf.GPIO_PinNumber);
 80010b0:	4b31      	ldr	r3, [pc, #196]	; (8001178 <GPIO_Init+0x178>)
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	7912      	ldrb	r2, [r2, #4]
 80010b8:	4611      	mov	r1, r2
 80010ba:	2201      	movs	r2, #1
 80010bc:	408a      	lsls	r2, r1
 80010be:	43d2      	mvns	r2, r2
 80010c0:	4611      	mov	r1, r2
 80010c2:	4a2d      	ldr	r2, [pc, #180]	; (8001178 <GPIO_Init+0x178>)
 80010c4:	400b      	ands	r3, r1
 80010c6:	60d3      	str	r3, [r2, #12]
 80010c8:	e019      	b.n	80010fe <GPIO_Init+0xfe>
		} else if (pGPIOHandle->GPIO_PinConf.GPIO_PinMode > GPIO_MODE_IT_FRT) {
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	795b      	ldrb	r3, [r3, #5]
 80010ce:	2b06      	cmp	r3, #6
 80010d0:	d915      	bls.n	80010fe <GPIO_Init+0xfe>
			// 1. configure both FTSR and RTSR
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConf.GPIO_PinNumber);
 80010d2:	4b29      	ldr	r3, [pc, #164]	; (8001178 <GPIO_Init+0x178>)
 80010d4:	68db      	ldr	r3, [r3, #12]
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	7912      	ldrb	r2, [r2, #4]
 80010da:	4611      	mov	r1, r2
 80010dc:	2201      	movs	r2, #1
 80010de:	408a      	lsls	r2, r1
 80010e0:	4611      	mov	r1, r2
 80010e2:	4a25      	ldr	r2, [pc, #148]	; (8001178 <GPIO_Init+0x178>)
 80010e4:	430b      	orrs	r3, r1
 80010e6:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConf.GPIO_PinNumber);
 80010e8:	4b23      	ldr	r3, [pc, #140]	; (8001178 <GPIO_Init+0x178>)
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	7912      	ldrb	r2, [r2, #4]
 80010f0:	4611      	mov	r1, r2
 80010f2:	2201      	movs	r2, #1
 80010f4:	408a      	lsls	r2, r1
 80010f6:	4611      	mov	r1, r2
 80010f8:	4a1f      	ldr	r2, [pc, #124]	; (8001178 <GPIO_Init+0x178>)
 80010fa:	430b      	orrs	r3, r1
 80010fc:	6093      	str	r3, [r2, #8]
		}

		// 2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t x = 0, PortCode = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	74fb      	strb	r3, [r7, #19]
 8001102:	2300      	movs	r3, #0
 8001104:	74bb      	strb	r3, [r7, #18]
		PortCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800110e:	d043      	beq.n	8001198 <GPIO_Init+0x198>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a19      	ldr	r2, [pc, #100]	; (800117c <GPIO_Init+0x17c>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d02b      	beq.n	8001172 <GPIO_Init+0x172>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a18      	ldr	r2, [pc, #96]	; (8001180 <GPIO_Init+0x180>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d024      	beq.n	800116e <GPIO_Init+0x16e>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a16      	ldr	r2, [pc, #88]	; (8001184 <GPIO_Init+0x184>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d01d      	beq.n	800116a <GPIO_Init+0x16a>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a15      	ldr	r2, [pc, #84]	; (8001188 <GPIO_Init+0x188>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d016      	beq.n	8001166 <GPIO_Init+0x166>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a13      	ldr	r2, [pc, #76]	; (800118c <GPIO_Init+0x18c>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d00f      	beq.n	8001162 <GPIO_Init+0x162>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a12      	ldr	r2, [pc, #72]	; (8001190 <GPIO_Init+0x190>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d008      	beq.n	800115e <GPIO_Init+0x15e>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a10      	ldr	r2, [pc, #64]	; (8001194 <GPIO_Init+0x194>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d101      	bne.n	800115a <GPIO_Init+0x15a>
 8001156:	2307      	movs	r3, #7
 8001158:	e01f      	b.n	800119a <GPIO_Init+0x19a>
 800115a:	2300      	movs	r3, #0
 800115c:	e01d      	b.n	800119a <GPIO_Init+0x19a>
 800115e:	2306      	movs	r3, #6
 8001160:	e01b      	b.n	800119a <GPIO_Init+0x19a>
 8001162:	2305      	movs	r3, #5
 8001164:	e019      	b.n	800119a <GPIO_Init+0x19a>
 8001166:	2304      	movs	r3, #4
 8001168:	e017      	b.n	800119a <GPIO_Init+0x19a>
 800116a:	2303      	movs	r3, #3
 800116c:	e015      	b.n	800119a <GPIO_Init+0x19a>
 800116e:	2302      	movs	r3, #2
 8001170:	e013      	b.n	800119a <GPIO_Init+0x19a>
 8001172:	2301      	movs	r3, #1
 8001174:	e011      	b.n	800119a <GPIO_Init+0x19a>
 8001176:	bf00      	nop
 8001178:	40010400 	.word	0x40010400
 800117c:	48000400 	.word	0x48000400
 8001180:	48000800 	.word	0x48000800
 8001184:	48000c00 	.word	0x48000c00
 8001188:	48001000 	.word	0x48001000
 800118c:	48001400 	.word	0x48001400
 8001190:	48001800 	.word	0x48001800
 8001194:	48001c00 	.word	0x48001c00
 8001198:	2300      	movs	r3, #0
 800119a:	74bb      	strb	r3, [r7, #18]
		x = (pGPIOHandle->GPIO_PinConf.GPIO_PinNumber / 4);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	791b      	ldrb	r3, [r3, #4]
 80011a0:	089b      	lsrs	r3, r3, #2
 80011a2:	74fb      	strb	r3, [r7, #19]
		SYSCFG_PCLK_EN();
 80011a4:	4b64      	ldr	r3, [pc, #400]	; (8001338 <GPIO_Init+0x338>)
 80011a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011a8:	4a63      	ldr	r2, [pc, #396]	; (8001338 <GPIO_Init+0x338>)
 80011aa:	f043 0301 	orr.w	r3, r3, #1
 80011ae:	6613      	str	r3, [r2, #96]	; 0x60
		SYSCFG->EXTICR[x] |= (PortCode
 80011b0:	4a62      	ldr	r2, [pc, #392]	; (800133c <GPIO_Init+0x33c>)
 80011b2:	7cfb      	ldrb	r3, [r7, #19]
 80011b4:	3302      	adds	r3, #2
 80011b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
				<< (pGPIOHandle->GPIO_PinConf.GPIO_PinNumber % 4) * 4);
 80011ba:	7cb9      	ldrb	r1, [r7, #18]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	791b      	ldrb	r3, [r3, #4]
 80011c0:	f003 0303 	and.w	r3, r3, #3
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ca:	4618      	mov	r0, r3
		SYSCFG->EXTICR[x] |= (PortCode
 80011cc:	495b      	ldr	r1, [pc, #364]	; (800133c <GPIO_Init+0x33c>)
 80011ce:	7cfb      	ldrb	r3, [r7, #19]
 80011d0:	4302      	orrs	r2, r0
 80011d2:	3302      	adds	r3, #2
 80011d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// 3. enable the exti interrupt delivery using IMR
		EXTI->IMR1 |= (1 << pGPIOHandle->GPIO_PinConf.GPIO_PinNumber);
 80011d8:	4b59      	ldr	r3, [pc, #356]	; (8001340 <GPIO_Init+0x340>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	7912      	ldrb	r2, [r2, #4]
 80011e0:	4611      	mov	r1, r2
 80011e2:	2201      	movs	r2, #1
 80011e4:	408a      	lsls	r2, r1
 80011e6:	4611      	mov	r1, r2
 80011e8:	4a55      	ldr	r2, [pc, #340]	; (8001340 <GPIO_Init+0x340>)
 80011ea:	430b      	orrs	r3, r1
 80011ec:	6013      	str	r3, [r2, #0]
	}

	// 2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConf.GPIO_PinSpeed
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	79db      	ldrb	r3, [r3, #7]
 80011f2:	461a      	mov	r2, r3
			<< (2 * pGPIOHandle->GPIO_PinConf.GPIO_PinNumber));
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	791b      	ldrb	r3, [r3, #4]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConf.GPIO_PinSpeed
 80011fe:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	689a      	ldr	r2, [r3, #8]
			<< 2 * pGPIOHandle->GPIO_PinConf.GPIO_PinNumber); //clearing
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	791b      	ldrb	r3, [r3, #4]
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	2103      	movs	r1, #3
 800120e:	fa01 f303 	lsl.w	r3, r1, r3
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3
 8001212:	43db      	mvns	r3, r3
 8001214:	4619      	mov	r1, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	400a      	ands	r2, r1
 800121c:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	6899      	ldr	r1, [r3, #8]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	697a      	ldr	r2, [r7, #20]
 800122a:	430a      	orrs	r2, r1
 800122c:	609a      	str	r2, [r3, #8]
	temp = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]

	// 3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConf.GPIO_PinPuPdControl
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	7a1b      	ldrb	r3, [r3, #8]
 8001236:	461a      	mov	r2, r3
			<< (2 * pGPIOHandle->GPIO_PinConf.GPIO_PinNumber));
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	791b      	ldrb	r3, [r3, #4]
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConf.GPIO_PinPuPdControl
 8001242:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	68da      	ldr	r2, [r3, #12]
			<< 2 * pGPIOHandle->GPIO_PinConf.GPIO_PinNumber); //clearing
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	791b      	ldrb	r3, [r3, #4]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	2103      	movs	r1, #3
 8001252:	fa01 f303 	lsl.w	r3, r1, r3
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3
 8001256:	43db      	mvns	r3, r3
 8001258:	4619      	mov	r1, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	400a      	ands	r2, r1
 8001260:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	68d9      	ldr	r1, [r3, #12]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	697a      	ldr	r2, [r7, #20]
 800126e:	430a      	orrs	r2, r1
 8001270:	60da      	str	r2, [r3, #12]
	temp = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	617b      	str	r3, [r7, #20]

	// 4. configure optypes
	temp = (pGPIOHandle->GPIO_PinConf.GPIO_PinOPType
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	799b      	ldrb	r3, [r3, #6]
 800127a:	461a      	mov	r2, r3
			<< (pGPIOHandle->GPIO_PinConf.GPIO_PinNumber));
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	791b      	ldrb	r3, [r3, #4]
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConf.GPIO_PinOPType
 8001284:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	685a      	ldr	r2, [r3, #4]
			<< pGPIOHandle->GPIO_PinConf.GPIO_PinNumber); //clearing
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	791b      	ldrb	r3, [r3, #4]
 8001290:	4619      	mov	r1, r3
 8001292:	2303      	movs	r3, #3
 8001294:	408b      	lsls	r3, r1
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x3
 8001296:	43db      	mvns	r3, r3
 8001298:	4619      	mov	r1, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	400a      	ands	r2, r1
 80012a0:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	6859      	ldr	r1, [r3, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	697a      	ldr	r2, [r7, #20]
 80012ae:	430a      	orrs	r2, r1
 80012b0:	605a      	str	r2, [r3, #4]

	temp = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	617b      	str	r3, [r7, #20]

	// 5. configure the alt functionality
	if (pGPIOHandle->GPIO_PinConf.GPIO_PinMode == GPIO_MODE_ALTFN) {
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	795b      	ldrb	r3, [r3, #5]
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d136      	bne.n	800132c <GPIO_Init+0x32c>
		//configure the alt function registers
		uint32_t temp1 = 0, temp2 = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	2300      	movs	r3, #0
 80012c4:	60bb      	str	r3, [r7, #8]
		temp1 = (pGPIOHandle->GPIO_PinConf.GPIO_PinNumber / 8);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	791b      	ldrb	r3, [r3, #4]
 80012ca:	08db      	lsrs	r3, r3, #3
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	60fb      	str	r3, [r7, #12]
		temp2 = (pGPIOHandle->GPIO_PinConf.GPIO_PinNumber % 8);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	791b      	ldrb	r3, [r3, #4]
 80012d4:	f003 0307 	and.w	r3, r3, #7
 80012d8:	60bb      	str	r3, [r7, #8]

		pGPIOHandle->pGPIOx->AFRL[temp1] &= ~(0xF << (4 * temp2)); //clearing
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	3208      	adds	r2, #8
 80012e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	210f      	movs	r1, #15
 80012ec:	fa01 f303 	lsl.w	r3, r1, r3
 80012f0:	43db      	mvns	r3, r3
 80012f2:	4619      	mov	r1, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4011      	ands	r1, r2
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	3208      	adds	r2, #8
 80012fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFRL[temp1] |=
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	68fa      	ldr	r2, [r7, #12]
 8001308:	3208      	adds	r2, #8
 800130a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				(pGPIOHandle->GPIO_PinConf.GPIO_PinAltFunMode << (4 * temp2));
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	7a5b      	ldrb	r3, [r3, #9]
 8001312:	4619      	mov	r1, r3
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	fa01 f303 	lsl.w	r3, r1, r3
 800131c:	4619      	mov	r1, r3
		pGPIOHandle->pGPIOx->AFRL[temp1] |=
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4311      	orrs	r1, r2
 8001324:	68fa      	ldr	r2, [r7, #12]
 8001326:	3208      	adds	r2, #8
 8001328:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 800132c:	bf00      	nop
 800132e:	371c      	adds	r7, #28
 8001330:	46bd      	mov	sp, r7
 8001332:	bc80      	pop	{r7}
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	40021000 	.word	0x40021000
 800133c:	40010000 	.word	0x40010000
 8001340:	40010400 	.word	0x40010400

08001344 <GPIO_WriteToOuputPin>:
 *
 * ****************************************************************************************************************************************
 *                                                      GPIO Write To Output Pin
 * ****************************************************************************************************************************************
 */
void GPIO_WriteToOuputPin(GPIO_RegDef_t * pGPIOx, uint8_t PinNumber,uint8_t Value){
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	460b      	mov	r3, r1
 800134e:	70fb      	strb	r3, [r7, #3]
 8001350:	4613      	mov	r3, r2
 8001352:	70bb      	strb	r3, [r7, #2]

	if(Value == GPIO_PIN_SET){
 8001354:	78bb      	ldrb	r3, [r7, #2]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d109      	bne.n	800136e <GPIO_WriteToOuputPin+0x2a>
		//write 1 to the output data register at the bit field corresponding to the pin number
		pGPIOx -> ODR |= (1 << PinNumber);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	78fa      	ldrb	r2, [r7, #3]
 8001360:	2101      	movs	r1, #1
 8001362:	fa01 f202 	lsl.w	r2, r1, r2
 8001366:	431a      	orrs	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	615a      	str	r2, [r3, #20]
	}else{
		//write 0
		pGPIOx -> ODR &= ~(1 << PinNumber);
	}
}
 800136c:	e009      	b.n	8001382 <GPIO_WriteToOuputPin+0x3e>
		pGPIOx -> ODR &= ~(1 << PinNumber);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	695b      	ldr	r3, [r3, #20]
 8001372:	78fa      	ldrb	r2, [r7, #3]
 8001374:	2101      	movs	r1, #1
 8001376:	fa01 f202 	lsl.w	r2, r1, r2
 800137a:	43d2      	mvns	r2, r2
 800137c:	401a      	ands	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	615a      	str	r2, [r3, #20]
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr

0800138c <I2C_CalcDelay>:

static uint32_t I2C_CalcDelay(uint32_t delay);
/*
* Count rough delay for timeouts
*/
static uint32_t I2C_CalcDelay(uint32_t delay) {
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
	uint32_t cnt, SystemCoreClock = 16000000;;
 8001394:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <I2C_CalcDelay+0x54>)
 8001396:	60bb      	str	r3, [r7, #8]

	if (SystemCoreClock > 1000000U) {
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	4a12      	ldr	r2, [pc, #72]	; (80013e4 <I2C_CalcDelay+0x58>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d90a      	bls.n	80013b6 <I2C_CalcDelay+0x2a>
		cnt = (delay * ((SystemCoreClock / 1000000U) + 1U));
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	4a11      	ldr	r2, [pc, #68]	; (80013e8 <I2C_CalcDelay+0x5c>)
 80013a4:	fba2 2303 	umull	r2, r3, r2, r3
 80013a8:	0c9b      	lsrs	r3, r3, #18
 80013aa:	1c5a      	adds	r2, r3, #1
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	fb02 f303 	mul.w	r3, r2, r3
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	e00e      	b.n	80013d4 <I2C_CalcDelay+0x48>
	} else {
		cnt = (((delay / 100U) + 1U) * ((SystemCoreClock / 10000U) + 1U));
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a0c      	ldr	r2, [pc, #48]	; (80013ec <I2C_CalcDelay+0x60>)
 80013ba:	fba2 2303 	umull	r2, r3, r2, r3
 80013be:	095b      	lsrs	r3, r3, #5
 80013c0:	3301      	adds	r3, #1
 80013c2:	68ba      	ldr	r2, [r7, #8]
 80013c4:	490a      	ldr	r1, [pc, #40]	; (80013f0 <I2C_CalcDelay+0x64>)
 80013c6:	fba1 1202 	umull	r1, r2, r1, r2
 80013ca:	0b52      	lsrs	r2, r2, #13
 80013cc:	3201      	adds	r2, #1
 80013ce:	fb02 f303 	mul.w	r3, r2, r3
 80013d2:	60fb      	str	r3, [r7, #12]
	}

	return cnt;
 80013d4:	68fb      	ldr	r3, [r7, #12]
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3714      	adds	r7, #20
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr
 80013e0:	00f42400 	.word	0x00f42400
 80013e4:	000f4240 	.word	0x000f4240
 80013e8:	431bde83 	.word	0x431bde83
 80013ec:	51eb851f 	.word	0x51eb851f
 80013f0:	d1b71759 	.word	0xd1b71759

080013f4 <I2C_AddressMode7bits>:
/*
 * ADD10: 10-bit addressing mode (master mode)
0: The master operates in 7-bit addressing mode
 */
static void I2C_AddressMode7bits(I2C_RegDef_t *pI2Cx){
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
	pI2Cx ->CR2 &= ~(1 << I2C_CR2_ADD10);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	605a      	str	r2, [r3, #4]
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr

08001412 <I2C_TransferDirWriteMasterM>:
/*
 * RD_WRN: Transfer direction (master mode)
0: Master requests a write transfer.
1: Master requests a read transfer
 */
static void  I2C_TransferDirWriteMasterM(I2C_RegDef_t *pI2Cx){
 8001412:	b480      	push	{r7}
 8001414:	b083      	sub	sp, #12
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
	 // Master requests a write transfer.   (master mode)
		pI2Cx -> CR2 &= ~(1 << I2C_CR2_RDWRN);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	605a      	str	r2, [r3, #4]

}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr

08001430 <I2C_TransferDirReadMasterM>:

static void  I2C_TransferDirReadMasterM(I2C_RegDef_t *pI2Cx){
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]

		pI2Cx -> CR2 |= (1 << I2C_CR2_RDWRN);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	605a      	str	r2, [r3, #4]

}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr

0800144e <I2C_TransferDirWorRMasterM>:

static void I2C_TransferDirWorRMasterM(I2C_RegDef_t *pI2Cx,uint8_t RorWTransfer){
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
 8001456:	460b      	mov	r3, r1
 8001458:	70fb      	strb	r3, [r7, #3]
	if(RorWTransfer == I2C_WRITE_TRANSFER_MM){
 800145a:	78fb      	ldrb	r3, [r7, #3]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d106      	bne.n	800146e <I2C_TransferDirWorRMasterM+0x20>
		pI2Cx -> CR2 &= ~(1 << I2C_CR2_RDWRN);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	605a      	str	r2, [r3, #4]
	}else if(RorWTransfer == I2C_READ_TRANSFER_MM){
		pI2Cx -> CR2 |= (1 << I2C_CR2_RDWRN);
	}
}
 800146c:	e008      	b.n	8001480 <I2C_TransferDirWorRMasterM+0x32>
	}else if(RorWTransfer == I2C_READ_TRANSFER_MM){
 800146e:	78fb      	ldrb	r3, [r7, #3]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d105      	bne.n	8001480 <I2C_TransferDirWorRMasterM+0x32>
		pI2Cx -> CR2 |= (1 << I2C_CR2_RDWRN);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	605a      	str	r2, [r3, #4]
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr

0800148a <I2C_GenerateStartCondition>:
sequence is sent, by an arbitration loss, by a timeout error detection, or when PE = 0. It can
also be cleared by software by writing ‘1’ to the ADDRCF bit in the I2C_ICR register.
0: No Start generation.
1: Restart/Start generation:
 */
static void I2C_GenerateStartCondition(I2C_RegDef_t * pI2Cx){
 800148a:	b480      	push	{r7}
 800148c:	b083      	sub	sp, #12
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]

	pI2Cx -> CR2 |= (1 << I2C_CR2_START);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	605a      	str	r2, [r3, #4]

}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr

080014a8 <I2C_ExecuteAddressPhase>:

static void I2C_ExecuteAddressPhase(I2C_RegDef_t * pI2Cx, uint8_t SlaveAddr){
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	460b      	mov	r3, r1
 80014b2:	70fb      	strb	r3, [r7, #3]
	//pI2Cx -> CR2 &= ~( 0x7F << 1);
	//SlaveAddr = SlaveAddr >> 1;
	//SlaveAddr &= ~(1); // SlaveAddr is Slave Address + r/w bit = 0
	pI2Cx -> CR2 |= (SlaveAddr << 0 );
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685a      	ldr	r2, [r3, #4]
 80014b8:	78fb      	ldrb	r3, [r7, #3]
 80014ba:	431a      	orrs	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	605a      	str	r2, [r3, #4]
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr

080014ca <I2C_NBytestobeTransferred>:
/*Number of bytes
*The number of bytes to be transmitted/received is programmed there. This field is don’t care
*in slave mode with SBC=0.
*Note: Changing these bits when the START bit is set is not allowed.
 */
static void I2C_NBytestobeTransferred(I2C_RegDef_t *pI2Cx,uint8_t Len){
 80014ca:	b480      	push	{r7}
 80014cc:	b083      	sub	sp, #12
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
 80014d2:	460b      	mov	r3, r1
 80014d4:	70fb      	strb	r3, [r7, #3]
	pI2Cx ->CR2 &= ~(0xFF << I2C_CR2_NBYTES);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	605a      	str	r2, [r3, #4]
	pI2Cx ->CR2 |= (Len << I2C_CR2_NBYTES);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	78fa      	ldrb	r2, [r7, #3]
 80014e8:	0412      	lsls	r2, r2, #16
 80014ea:	431a      	orrs	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	605a      	str	r2, [r3, #4]
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr

080014fa <I2C_AutoendCondition>:

	dummySet = (1 << I2C_ICR_NACKCF);
	pI2Cx->ICR |= dummySet;
}

static void I2C_AutoendCondition(I2C_RegDef_t *pI2Cx, uint8_t AutoendEnorDi){
 80014fa:	b480      	push	{r7}
 80014fc:	b083      	sub	sp, #12
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
 8001502:	460b      	mov	r3, r1
 8001504:	70fb      	strb	r3, [r7, #3]
	if (AutoendEnorDi == DISABLE) { // Master requests a write transfer.   (master mode)
 8001506:	78fb      	ldrb	r3, [r7, #3]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d106      	bne.n	800151a <I2C_AutoendCondition+0x20>
		pI2Cx->CR2 &= ~(1 << I2C_CR2_AUTOEND); //1: Automatic end mode: a STOP condition is automatically sent when NBYTES data are transferred.
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	605a      	str	r2, [r3, #4]
	} else if (AutoendEnorDi == ENABLE) {
		pI2Cx->CR2 |= (1 << I2C_CR2_AUTOEND); //0: software end mode: TC flag is set when NBYTES data are transferred, stretching SCL low.
	}
}
 8001518:	e008      	b.n	800152c <I2C_AutoendCondition+0x32>
	} else if (AutoendEnorDi == ENABLE) {
 800151a:	78fb      	ldrb	r3, [r7, #3]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d105      	bne.n	800152c <I2C_AutoendCondition+0x32>
		pI2Cx->CR2 |= (1 << I2C_CR2_AUTOEND); //0: software end mode: TC flag is set when NBYTES data are transferred, stretching SCL low.
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	605a      	str	r2, [r3, #4]
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr

08001536 <I2C_RestartCondition>:

static void I2C_RestartCondition(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr,
		uint8_t RorWTransfer, uint8_t Len, uint8_t AutoendEnorDi,
		uint8_t RestartdEnorDi) {
 8001536:	b580      	push	{r7, lr}
 8001538:	b082      	sub	sp, #8
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
 800153e:	4608      	mov	r0, r1
 8001540:	4611      	mov	r1, r2
 8001542:	461a      	mov	r2, r3
 8001544:	4603      	mov	r3, r0
 8001546:	70fb      	strb	r3, [r7, #3]
 8001548:	460b      	mov	r3, r1
 800154a:	70bb      	strb	r3, [r7, #2]
 800154c:	4613      	mov	r3, r2
 800154e:	707b      	strb	r3, [r7, #1]

	//Addressing mode (7-bit or 10-bit): ADD10 => 0 <=: 10-bit addressing mode (master mode)
	//0: The master operates in 7-bit addressing mode,
	//1: The master operates in 10-bit addressing mode
	I2C_AddressMode7bits(pI2Cx);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff ff4f 	bl	80013f4 <I2C_AddressMode7bits>
	//program the device address
	//: Slave address (master mode)
	//In 7-bit addressing mode (ADD10 = 0):
	//SADD[7:1] should be written with the 7-bit slave address to be sent. The bits SADD[9],
	//SADD[8] and SADD[0] are don't care.
	I2C_ExecuteAddressPhase(pI2Cx, SlaveAddr);
 8001556:	78fb      	ldrb	r3, [r7, #3]
 8001558:	4619      	mov	r1, r3
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f7ff ffa4 	bl	80014a8 <I2C_ExecuteAddressPhase>

	//Transfer direction: RD_WRN
	I2C_TransferDirWorRMasterM(pI2Cx, RorWTransfer);
 8001560:	78bb      	ldrb	r3, [r7, #2]
 8001562:	4619      	mov	r1, r3
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f7ff ff72 	bl	800144e <I2C_TransferDirWorRMasterM>

	//The number of bytes to be transferred: NBYTES[7:0]. If the number of bytes is equal to
	//or greater than 255 bytes, NBYTES[7:0] must initially be filled with 0xFF.
	I2C_NBytestobeTransferred(pI2Cx, Len);
 800156a:	787b      	ldrb	r3, [r7, #1]
 800156c:	4619      	mov	r1, r3
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f7ff ffab 	bl	80014ca <I2C_NBytestobeTransferred>

	//In automatic end mode (AUTOEND=1), a STOP is automatically sent.
	//In software end mode (AUTOEND=0), the TC flag is
	I2C_AutoendCondition(pI2Cx, AutoendEnorDi);
 8001574:	7c3b      	ldrb	r3, [r7, #16]
 8001576:	4619      	mov	r1, r3
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff ffbe 	bl	80014fa <I2C_AutoendCondition>
	//This bit is set by software, and cleared by hardware after the Start followed by the address
	// sequence is sent, by an arbitration loss, by a timeout error detection, or when PE = 0. It can
	// also be cleared by software by writing ‘1’ to the ADDRCF bit in the I2C_ICR register.
	// 0: No Start generation.
	// 1: Restart/Start generation:
	I2C_GenerateStartCondition(pI2Cx);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff ff83 	bl	800148a <I2C_GenerateStartCondition>

}
 8001584:	bf00      	nop
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <I2C_GenerateStopCondition>:
PE = 0.
In Master Mode:
0: No Stop generation.
1: Stop generation after current byte transfer.
 */
static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx){
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
	pI2Cx -> CR2 &= ~(1 << I2C_CR2_STOP);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	605a      	str	r2, [r3, #4]
	pI2Cx -> CR2 |= (1 << I2C_CR2_STOP);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	605a      	str	r2, [r3, #4]
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bc80      	pop	{r7}
 80015b4:	4770      	bx	lr

080015b6 <Timing_Settings>:

 /*
  * Clock configuration register (RCC_CFGR)
 */

void Timing_Settings(I2C_Handle_t *pI2CHandle){
 80015b6:	b480      	push	{r7}
 80015b8:	b083      	sub	sp, #12
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]

	pI2CHandle ->pI2Cx ->TIMINGR &= ~(0xFF << I2C_TIMINGR_SCLL);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	691a      	ldr	r2, [r3, #16]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80015cc:	611a      	str	r2, [r3, #16]
	pI2CHandle ->pI2Cx ->TIMINGR |= (0x5D << I2C_TIMINGR_SCLL);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	691a      	ldr	r2, [r3, #16]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f042 025d 	orr.w	r2, r2, #93	; 0x5d
 80015dc:	611a      	str	r2, [r3, #16]
   //pI2CHandle ->pI2Cx ->TIMINGR |= (0x13 << I2C_TIMINGR_SCLL);

	pI2CHandle ->pI2Cx ->TIMINGR &= ~(0xFF << I2C_TIMINGR_SCLH);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	691a      	ldr	r2, [r3, #16]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80015ec:	611a      	str	r2, [r3, #16]
	pI2CHandle ->pI2Cx ->TIMINGR |= (0x3d << I2C_TIMINGR_SCLH);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	691a      	ldr	r2, [r3, #16]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f442 5274 	orr.w	r2, r2, #15616	; 0x3d00
 80015fc:	611a      	str	r2, [r3, #16]
	//pI2CHandle ->pI2Cx ->TIMINGR |= (0xF << I2C_TIMINGR_SCLH);

	pI2CHandle ->pI2Cx ->TIMINGR &= ~(0xF << I2C_TIMINGR_SDADEL);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	691a      	ldr	r2, [r3, #16]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800160c:	611a      	str	r2, [r3, #16]
	pI2CHandle ->pI2Cx ->TIMINGR |= (0x0 << I2C_TIMINGR_SDADEL);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6912      	ldr	r2, [r2, #16]
 8001618:	611a      	str	r2, [r3, #16]
	//pI2CHandle ->pI2Cx ->TIMINGR |= (0x2 << I2C_TIMINGR_SDADEL);

	pI2CHandle ->pI2Cx ->TIMINGR &= ~(0xF << I2C_TIMINGR_SCLDEL);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	691a      	ldr	r2, [r3, #16]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001628:	611a      	str	r2, [r3, #16]
	pI2CHandle ->pI2Cx ->TIMINGR |= (0x3 << I2C_TIMINGR_SCLDEL);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	691a      	ldr	r2, [r3, #16]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f442 1240 	orr.w	r2, r2, #3145728	; 0x300000
 8001638:	611a      	str	r2, [r3, #16]
	//pI2CHandle ->pI2Cx ->TIMINGR |= (0x4 << I2C_TIMINGR_SCLDEL);

	pI2CHandle ->pI2Cx ->TIMINGR &= ~(0xF << I2C_TIMINGR_PRESC);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	691a      	ldr	r2, [r3, #16]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8001648:	611a      	str	r2, [r3, #16]
	//pI2CHandle ->pI2Cx ->TIMINGR |= (3 << I2C_TIMINGR_PRESC);
	pI2CHandle ->pI2Cx ->TIMINGR |= (0x0 << I2C_TIMINGR_PRESC);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6912      	ldr	r2, [r2, #16]
 8001654:	611a      	str	r2, [r3, #16]
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr

08001660 <I2C_PeriClockControl>:

 /* Peripheral Clock Setup
 */
void I2C_PeriClockControl(I2C_RegDef_t* pI2Cx, uint8_t EnorDi){
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	460b      	mov	r3, r1
 800166a:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE) {
 800166c:	78fb      	ldrb	r3, [r7, #3]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d120      	bne.n	80016b4 <I2C_PeriClockControl+0x54>
		if (pI2Cx == I2C1) {
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a22      	ldr	r2, [pc, #136]	; (8001700 <I2C_PeriClockControl+0xa0>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d106      	bne.n	8001688 <I2C_PeriClockControl+0x28>
			I2C1_PCLK_EN();
 800167a:	4b22      	ldr	r3, [pc, #136]	; (8001704 <I2C_PeriClockControl+0xa4>)
 800167c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167e:	4a21      	ldr	r2, [pc, #132]	; (8001704 <I2C_PeriClockControl+0xa4>)
 8001680:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001684:	6593      	str	r3, [r2, #88]	; 0x58
	} else if (pI2Cx == I2C2) {
		I2C2_PCLK_DI();
	} else if (pI2Cx == I2C3) {
		I2C3_PCLK_DI();
	}
}
 8001686:	e035      	b.n	80016f4 <I2C_PeriClockControl+0x94>
		} else if (pI2Cx == I2C2) {
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a1f      	ldr	r2, [pc, #124]	; (8001708 <I2C_PeriClockControl+0xa8>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d106      	bne.n	800169e <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8001690:	4b1c      	ldr	r3, [pc, #112]	; (8001704 <I2C_PeriClockControl+0xa4>)
 8001692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001694:	4a1b      	ldr	r2, [pc, #108]	; (8001704 <I2C_PeriClockControl+0xa4>)
 8001696:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800169a:	6593      	str	r3, [r2, #88]	; 0x58
}
 800169c:	e02a      	b.n	80016f4 <I2C_PeriClockControl+0x94>
		} else if (pI2Cx == I2C3) {
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a1a      	ldr	r2, [pc, #104]	; (800170c <I2C_PeriClockControl+0xac>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d126      	bne.n	80016f4 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 80016a6:	4b17      	ldr	r3, [pc, #92]	; (8001704 <I2C_PeriClockControl+0xa4>)
 80016a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016aa:	4a16      	ldr	r2, [pc, #88]	; (8001704 <I2C_PeriClockControl+0xa4>)
 80016ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016b0:	6593      	str	r3, [r2, #88]	; 0x58
}
 80016b2:	e01f      	b.n	80016f4 <I2C_PeriClockControl+0x94>
	} else if (pI2Cx == I2C1) {
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4a12      	ldr	r2, [pc, #72]	; (8001700 <I2C_PeriClockControl+0xa0>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d106      	bne.n	80016ca <I2C_PeriClockControl+0x6a>
		I2C1_PCLK_DI();
 80016bc:	4b11      	ldr	r3, [pc, #68]	; (8001704 <I2C_PeriClockControl+0xa4>)
 80016be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c0:	4a10      	ldr	r2, [pc, #64]	; (8001704 <I2C_PeriClockControl+0xa4>)
 80016c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80016c6:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 80016c8:	e014      	b.n	80016f4 <I2C_PeriClockControl+0x94>
	} else if (pI2Cx == I2C2) {
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a0e      	ldr	r2, [pc, #56]	; (8001708 <I2C_PeriClockControl+0xa8>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d106      	bne.n	80016e0 <I2C_PeriClockControl+0x80>
		I2C2_PCLK_DI();
 80016d2:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <I2C_PeriClockControl+0xa4>)
 80016d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d6:	4a0b      	ldr	r2, [pc, #44]	; (8001704 <I2C_PeriClockControl+0xa4>)
 80016d8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80016dc:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 80016de:	e009      	b.n	80016f4 <I2C_PeriClockControl+0x94>
	} else if (pI2Cx == I2C3) {
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	4a0a      	ldr	r2, [pc, #40]	; (800170c <I2C_PeriClockControl+0xac>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d105      	bne.n	80016f4 <I2C_PeriClockControl+0x94>
		I2C3_PCLK_DI();
 80016e8:	4b06      	ldr	r3, [pc, #24]	; (8001704 <I2C_PeriClockControl+0xa4>)
 80016ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ec:	4a05      	ldr	r2, [pc, #20]	; (8001704 <I2C_PeriClockControl+0xa4>)
 80016ee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80016f2:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bc80      	pop	{r7}
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	40005400 	.word	0x40005400
 8001704:	40021000 	.word	0x40021000
 8001708:	40005800 	.word	0x40005800
 800170c:	40005c00 	.word	0x40005c00

08001710 <I2C_Init>:
/*
 * Init
 */
void I2C_Init(I2C_Handle_t *pI2CHandle){
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 8001718:	2300      	movs	r3, #0
 800171a:	60fb      	str	r3, [r7, #12]
	I2C_PeripheralControl(pI2CHandle -> pI2Cx, DISABLE);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2100      	movs	r1, #0
 8001722:	4618      	mov	r0, r3
 8001724:	f000 f980 	bl	8001a28 <I2C_PeripheralControl>
	//enable the clock for the i2cx peripheral
	I2C_PeriClockControl(pI2CHandle ->pI2Cx, ENABLE);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2101      	movs	r1, #1
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff ff96 	bl	8001660 <I2C_PeriClockControl>

	pI2CHandle -> pI2Cx -> CR1 &= ~(1 << I2C_CR1_ANFOFF);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001742:	601a      	str	r2, [r3, #0]
	pI2CHandle -> pI2Cx -> CR1 &= ~(0x3 << I2C_CR1_DNF);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001752:	601a      	str	r2, [r3, #0]

	pI2CHandle -> pI2Cx -> CR2 &= ~(1 << I2C_CR2_NACK);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	685a      	ldr	r2, [r3, #4]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001762:	605a      	str	r2, [r3, #4]
	pI2CHandle -> pI2Cx -> CR2 = tempreg;
*/


    //configure timings settings
	tempreg = 0;
 8001764:	2300      	movs	r3, #0
 8001766:	60fb      	str	r3, [r7, #12]
	tempreg = RCC_GetPCLK1Value();
 8001768:	f000 f98c 	bl	8001a84 <RCC_GetPCLK1Value>
 800176c:	60f8      	str	r0, [r7, #12]
	Timing_Settings(pI2CHandle);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f7ff ff21 	bl	80015b6 <Timing_Settings>

	//I2C slave mode
	//I2C slave initialization
	// hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);

	tempreg = pI2CHandle -> I2C_Config.I2C_DeviceAddress << 1;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	7a1b      	ldrb	r3, [r3, #8]
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	60fb      	str	r3, [r7, #12]
	pI2CHandle -> pI2Cx -> OAR1 &= ~(1 << I2C_OAR1_OA1EN);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	689a      	ldr	r2, [r3, #8]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800178a:	609a      	str	r2, [r3, #8]
	pI2CHandle -> pI2Cx -> OAR1 |= tempreg;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6899      	ldr	r1, [r3, #8]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	430a      	orrs	r2, r1
 800179a:	609a      	str	r2, [r3, #8]
	tempreg = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	60fb      	str	r3, [r7, #12]
	tempreg = (1 << I2C_OAR1_OA1EN);
 80017a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017a4:	60fb      	str	r3, [r7, #12]
	pI2CHandle -> pI2Cx -> OAR1 &= ~tempreg;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	6899      	ldr	r1, [r3, #8]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	43da      	mvns	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	400a      	ands	r2, r1
 80017b6:	609a      	str	r2, [r3, #8]

	pI2CHandle -> pI2Cx -> OAR1 |= tempreg;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6899      	ldr	r1, [r3, #8]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	430a      	orrs	r2, r1
 80017c6:	609a      	str	r2, [r3, #8]
	//The general call address is enabled by setting the GCEN bit in the I2C_CR1 register.
	//
	//pI2CHandle -> pI2Cx -> CR1 &= ~(1 << I2C_CR1_GCEN);
	//pI2CHandle -> pI2Cx -> CR1 |= (1 << I2C_CR1_GCEN);

	pI2CHandle -> pI2Cx -> CR1 &= ~(1 << I2C_CR1_NOSTRETCH);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80017d6:	601a      	str	r2, [r3, #0]
	//addressed, or when ADDR=1
	//pI2CHandle -> pI2Cx -> CR1 &= ~(1 << I2C_CR1_SBC);
	//pI2CHandle -> pI2Cx -> CR1 |= (1 << I2C_CR1_SBC);

	//Bit 6 TCIE: Transfer complete interrupt enable
	pI2CHandle -> pI2Cx -> CR1 &= ~(1 << I2C_CR1_TCIE);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017e6:	601a      	str	r2, [r3, #0]
	pI2CHandle -> pI2Cx -> CR1 &= ~(1 << I2C_CR1_NACKIE);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f022 0210 	bic.w	r2, r2, #16
 80017f6:	601a      	str	r2, [r3, #0]
	pI2CHandle -> pI2Cx -> CR1 &= ~(1 << I2C_CR1_TXIE);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f022 0202 	bic.w	r2, r2, #2
 8001806:	601a      	str	r2, [r3, #0]

	//The user must then set the START bit in I2C_CR2 register. Changing all the above bits is
	//not allowed when START bit is set.
	pI2CHandle -> pI2Cx -> CR2 |= (1 << I2C_CR2_AUTOEND);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	685a      	ldr	r2, [r3, #4]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001816:	605a      	str	r2, [r3, #4]
	//pI2CHandle -> pI2Cx -> CR2 &= ~(1 << I2C_CR2_STOP);
}
 8001818:	bf00      	nop
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <I2C_MasterSendData>:
	while(I2C_GetFlagStatus(pI2CHandle -> pI2Cx, I2C_FLAG_TC));
	//8. Generate Stop condition and master need not wait for the completion of Stop condition.
	// Note: generating STOP
	I2C_GenerateStopCondition(pI2CHandle -> pI2Cx);
}
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxBuffer, uint8_t nbytes, uint8_t SlaveAddr, uint8_t AutoendEnorDi, uint8_t RestartdEnorDi){
 8001820:	b5b0      	push	{r4, r5, r7, lr}
 8001822:	b088      	sub	sp, #32
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	4611      	mov	r1, r2
 800182c:	461a      	mov	r2, r3
 800182e:	460b      	mov	r3, r1
 8001830:	71fb      	strb	r3, [r7, #7]
 8001832:	4613      	mov	r3, r2
 8001834:	71bb      	strb	r3, [r7, #6]
	uint32_t delay_val = I2C_CalcDelay(I2C_TIMEOUT);
 8001836:	20c8      	movs	r0, #200	; 0xc8
 8001838:	f7ff fda8 	bl	800138c <I2C_CalcDelay>
 800183c:	61f8      	str	r0, [r7, #28]
	register uint32_t reg;
	register uint32_t tx_count;
	register volatile uint32_t wait;

	//Clear all flags
	pI2CHandle -> pI2Cx -> ICR = I2C_ICR_ALL;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	220f      	movs	r2, #15
 8001844:	61da      	str	r2, [r3, #28]

	// Everything regarding to the transmission is in the CR2 register
	reg = pI2CHandle -> pI2Cx -> CR2;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	685c      	ldr	r4, [r3, #4]
	reg &= ~I2C_CR2_ALL;

	// Whether it need to generate START condition
	if((pI2CHandle -> pI2Cx -> CR2 & (1 << I2C_CR2_START)) == DISABLE) {
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d107      	bne.n	800186a <I2C_MasterSendData+0x4a>
		pI2CHandle -> pI2Cx -> CR2 |= (1 << I2C_CR2_START);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	685a      	ldr	r2, [r3, #4]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001868:	605a      	str	r2, [r3, #4]
	if ((nbytes  > I2C_NBYTES_MAX)){
		reg |= I2C_CR2_RELOAD;
	}

	// Transfer length
	tx_count = (nbytes  > I2C_NBYTES_MAX) ? I2C_NBYTES_MAX : nbytes;
 800186a:	79fd      	ldrb	r5, [r7, #7]
	nbytes -= tx_count;
 800186c:	b2eb      	uxtb	r3, r5
 800186e:	79fa      	ldrb	r2, [r7, #7]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	71fb      	strb	r3, [r7, #7]

	//The number of bytes to be transferred: NBYTES[7:0]. If the number of bytes is equal to
	//or greater than 255 bytes, NBYTES[7:0] must initially be filled with 0xFF.
	I2C_NBytestobeTransferred(pI2CHandle -> pI2Cx, nbytes);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	79fa      	ldrb	r2, [r7, #7]
 800187a:	4611      	mov	r1, r2
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fe24 	bl	80014ca <I2C_NBytestobeTransferred>
	//In order to initiate the communication, the user must program the following parameters for
	//the addressed slave in the I2C_CR2 register:
	//Addressing mode (7-bit or 10-bit): ADD10 => 0 <=: 10-bit addressing mode (master mode)
	//0: The master operates in 7-bit addressing mode,
	//1: The master operates in 10-bit addressing mode
	I2C_AddressMode7bits(pI2CHandle -> pI2Cx);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff fdb4 	bl	80013f4 <I2C_AddressMode7bits>
	//program the device address
	//: Slave address (master mode)
	//In 7-bit addressing mode (ADD10 = 0):
	//SADD[7:1] should be written with the 7-bit slave address to be sent. The bits SADD[9],
	//SADD[8] and SADD[0] are don't care.
	I2C_ExecuteAddressPhase(pI2CHandle -> pI2Cx, SlaveAddr);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	79ba      	ldrb	r2, [r7, #6]
 8001892:	4611      	mov	r1, r2
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff fe07 	bl	80014a8 <I2C_ExecuteAddressPhase>

	//Transfer direction: RD_WRN
	I2C_TransferDirWriteMasterM(pI2CHandle -> pI2Cx);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff fdb7 	bl	8001412 <I2C_TransferDirWriteMasterM>
    // sequence is sent, by an arbitration loss, by a timeout error detection, or when PE = 0. It can
    // also be cleared by software by writing ‘1’ to the ADDRCF bit in the I2C_ICR register.
    // 0: No Start generation.
    // 1: Restart/Start generation:
     //I2C_GenerateStartCondition(pI2CHandle -> pI2Cx);
     uint8_t RorWTransfer = I2C_WRITE_TRANSFER_MM;
 80018a4:	2300      	movs	r3, #0
 80018a6:	76fb      	strb	r3, [r7, #27]
     //I2C_PeripheralControl(pI2CHandle -> pI2Cx, ENABLE);
	//6. Send the data until Len becomes 0
	//while( (I2C_GetFlagStatus(pI2CHandle -> pI2Cx, I2C_FLAG_TCR)) ){
	//while(!(I2C_GetFlagStatus(pI2CHandle -> pI2Cx, I2C_FLAG_TXE)));  // wait till TXE is set
 	//3. Enable the I2C peripheral
	while(tx_count  > 0 ){
 80018a8:	e047      	b.n	800193a <I2C_MasterSendData+0x11a>
		// Wait until either TXIS or NACK flag is set
		wait = delay_val;
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	617b      	str	r3, [r7, #20]
		while (!((reg = pI2CHandle -> pI2Cx -> ISR) & ((1 << I2C_ISR_TXIS) | (1 << I2C_ISR_NACKF))) && --wait);
 80018ae:	bf00      	nop
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	699c      	ldr	r4, [r3, #24]
 80018b6:	f004 0312 	and.w	r3, r4, #18
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d104      	bne.n	80018c8 <I2C_MasterSendData+0xa8>
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	3b01      	subs	r3, #1
 80018c2:	617b      	str	r3, [r7, #20]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1f3      	bne.n	80018b0 <I2C_MasterSendData+0x90>
		if ((reg & (1 << I2C_ISR_NACKF)) || (wait == 0U)) {
 80018c8:	f004 0310 	and.w	r3, r4, #16
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d137      	bne.n	8001940 <I2C_MasterSendData+0x120>
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d034      	beq.n	8001940 <I2C_MasterSendData+0x120>
			return 0;
		}

			while((I2C_GetFlagStatus(pI2CHandle -> pI2Cx, I2C_FLAG_TXE)));  // wait till TXE is set
 80018d6:	bf00      	nop
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2101      	movs	r1, #1
 80018de:	4618      	mov	r0, r3
 80018e0:	f000 f8bd 	bl	8001a5e <I2C_GetFlagStatus>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f6      	bne.n	80018d8 <I2C_MasterSendData+0xb8>
			pI2CHandle -> pI2Cx -> TXDR = * pTxBuffer;
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	781a      	ldrb	r2, [r3, #0]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	629a      	str	r2, [r3, #40]	; 0x28
			pTxBuffer ++;
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	3301      	adds	r3, #1
 80018f8:	60bb      	str	r3, [r7, #8]
			tx_count --;
 80018fa:	3d01      	subs	r5, #1

			if ((tx_count == 0U) && (nbytes != 0U)) {
 80018fc:	2d00      	cmp	r5, #0
 80018fe:	d11c      	bne.n	800193a <I2C_MasterSendData+0x11a>
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d019      	beq.n	800193a <I2C_MasterSendData+0x11a>
						// Wait until TCR flag is set (Transfer Complete Reload)
					wait = delay_val;
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	617b      	str	r3, [r7, #20]
					while (!(pI2CHandle -> pI2Cx -> ISR & (1 << I2C_ISR_TCR)) && --wait);
 800190a:	bf00      	nop
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001916:	2b00      	cmp	r3, #0
 8001918:	d104      	bne.n	8001924 <I2C_MasterSendData+0x104>
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	3b01      	subs	r3, #1
 800191e:	617b      	str	r3, [r7, #20]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1f3      	bne.n	800190c <I2C_MasterSendData+0xec>
					if (wait == 0U) {
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d00c      	beq.n	8001944 <I2C_MasterSendData+0x124>
						return 0;
					}
					// Configure next (or last) portion transfer
					reg = pI2CHandle -> pI2Cx -> CR2;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	685c      	ldr	r4, [r3, #4]
					if ( (nbytes > I2C_NBYTES_MAX)) {
						reg |= (1 << I2C_CR2_RELOAD);
					} //else if (!(I2C_GetFlagStatus(pI2CHandle -> pI2Cx, I2C_FLAG_STOPF))) {
						//reg |= (1 << I2C_CR2_AUTOEND);
					//}
					tx_count = (nbytes > I2C_NBYTES_MAX) ? I2C_NBYTES_MAX : nbytes;
 8001930:	79fd      	ldrb	r5, [r7, #7]
						nbytes -= tx_count;
 8001932:	b2eb      	uxtb	r3, r5
 8001934:	79fa      	ldrb	r2, [r7, #7]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	71fb      	strb	r3, [r7, #7]
	while(tx_count  > 0 ){
 800193a:	2d00      	cmp	r5, #0
 800193c:	d1b5      	bne.n	80018aa <I2C_MasterSendData+0x8a>
 800193e:	e002      	b.n	8001946 <I2C_MasterSendData+0x126>
			return 0;
 8001940:	bf00      	nop
 8001942:	e000      	b.n	8001946 <I2C_MasterSendData+0x126>
						return 0;
 8001944:	bf00      	nop
			//	}
			//}
		//}
	//}
}
}
 8001946:	3720      	adds	r7, #32
 8001948:	46bd      	mov	sp, r7
 800194a:	bdb0      	pop	{r4, r5, r7, pc}

0800194c <I2C_MasterReceiveData>:
/*
 *Data receive
*/
void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle, uint8_t *pRxBuffer, uint8_t Len, uint8_t SlaveAddr, uint8_t AutoendEnorDi, uint8_t RestartdEnorDi){
 800194c:	b590      	push	{r4, r7, lr}
 800194e:	b089      	sub	sp, #36	; 0x24
 8001950:	af02      	add	r7, sp, #8
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	4611      	mov	r1, r2
 8001958:	461a      	mov	r2, r3
 800195a:	460b      	mov	r3, r1
 800195c:	71fb      	strb	r3, [r7, #7]
 800195e:	4613      	mov	r3, r2
 8001960:	71bb      	strb	r3, [r7, #6]

	//Addressing mode (7-bit or 10-bit): ADD10 => 0 <=: 10-bit addressing mode (master mode)
	//0: The master operates in 7-bit addressing mode,
	//1: The master operates in 10-bit addressing mode
	I2C_AddressMode7bits(pI2CHandle -> pI2Cx);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff fd44 	bl	80013f4 <I2C_AddressMode7bits>
	//program the device address
	//: Slave address (master mode)
	//In 7-bit addressing mode (ADD10 = 0):
	//SADD[7:1] should be written with the 7-bit slave address to be sent. The bits SADD[9],
	//SADD[8] and SADD[0] are don't care.
	I2C_ExecuteAddressPhase(pI2CHandle -> pI2Cx, SlaveAddr);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	79ba      	ldrb	r2, [r7, #6]
 8001972:	4611      	mov	r1, r2
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff fd97 	bl	80014a8 <I2C_ExecuteAddressPhase>

	//Transfer direction: RD_WRN
	I2C_TransferDirReadMasterM(pI2CHandle -> pI2Cx);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff fd56 	bl	8001430 <I2C_TransferDirReadMasterM>

     //The number of bytes to be transferred: NBYTES[7:0]. If the number of bytes is equal to
     //or greater than 255 bytes, NBYTES[7:0] must initially be filled with 0xFF.
    I2C_NBytestobeTransferred(pI2CHandle -> pI2Cx, Len);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	79fa      	ldrb	r2, [r7, #7]
 800198a:	4611      	mov	r1, r2
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff fd9c 	bl	80014ca <I2C_NBytestobeTransferred>
     //This bit is set by software, and cleared by hardware after the Start followed by the address
     // sequence is sent, by an arbitration loss, by a timeout error detection, or when PE = 0. It can
     // also be cleared by software by writing ‘1’ to the ADDRCF bit in the I2C_ICR register.
     // 0: No Start generation.
     // 1: Restart/Start generation:
     I2C_GenerateStartCondition(pI2CHandle -> pI2Cx);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff fd77 	bl	800148a <I2C_GenerateStartCondition>
     uint8_t RorWTransfer = I2C_READ_TRANSFER_MM;
 800199c:	2301      	movs	r3, #1
 800199e:	75fb      	strb	r3, [r7, #23]
		//read the data until Len becomes zero
     while(Len > 0 ){
 80019a0:	e03a      	b.n	8001a18 <I2C_MasterReceiveData+0xcc>
			//wait until RXNE becomes 1
    		while((I2C_GetFlagStatus(pI2CHandle -> pI2Cx, I2C_FLAG_RXNE))){}  // wait till RXNE is set
 80019a2:	bf00      	nop
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2104      	movs	r1, #4
 80019aa:	4618      	mov	r0, r3
 80019ac:	f000 f857 	bl	8001a5e <I2C_GetFlagStatus>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1f6      	bne.n	80019a4 <I2C_MasterReceiveData+0x58>

    		//read the data from data register in the buffer
    		 *pRxBuffer = pI2CHandle -> pI2Cx -> RXDR;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	701a      	strb	r2, [r3, #0]
    		//if((pI2CHandle -> pI2Cx -> CR2 & (1 << I2C_CR2_AUTOEND)) == I2C_AUTOEND_DISABLE_MM){
    			//if((pI2CHandle -> pI2Cx -> CR2 & (1 << I2C_CR2_RELOAD)) == I2C_RELOAD_DISABLE_MM){

					if(Len == 0){
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d121      	bne.n	8001a0c <I2C_MasterReceiveData+0xc0>
						//I2C_ISR.TC = 1?
						while(!(I2C_GetFlagStatus(pI2CHandle -> pI2Cx, I2C_FLAG_TC)));  // wait till TC is set
 80019c8:	bf00      	nop
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2140      	movs	r1, #64	; 0x40
 80019d0:	4618      	mov	r0, r3
 80019d2:	f000 f844 	bl	8001a5e <I2C_GetFlagStatus>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d0f6      	beq.n	80019ca <I2C_MasterReceiveData+0x7e>
						if(RestartdEnorDi == I2C_RESTART_ENABLE_MM){
 80019dc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d10e      	bne.n	8001a02 <I2C_MasterReceiveData+0xb6>
							I2C_RestartCondition(pI2CHandle -> pI2Cx, SlaveAddr, RorWTransfer, Len,  AutoendEnorDi, RestartdEnorDi);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	6818      	ldr	r0, [r3, #0]
 80019e8:	79fc      	ldrb	r4, [r7, #7]
 80019ea:	7dfa      	ldrb	r2, [r7, #23]
 80019ec:	79b9      	ldrb	r1, [r7, #6]
 80019ee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019f2:	9301      	str	r3, [sp, #4]
 80019f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80019f8:	9300      	str	r3, [sp, #0]
 80019fa:	4623      	mov	r3, r4
 80019fc:	f7ff fd9b 	bl	8001536 <I2C_RestartCondition>
 8001a00:	e004      	b.n	8001a0c <I2C_MasterReceiveData+0xc0>
						}else
						//generate STOP condition
						I2C_GenerateStopCondition(pI2CHandle -> pI2Cx);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff fdc0 	bl	800158c <I2C_GenerateStopCondition>
					}
					//increment the buffer address
					pRxBuffer++;
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	60bb      	str	r3, [r7, #8]
					Len --;
 8001a12:	79fb      	ldrb	r3, [r7, #7]
 8001a14:	3b01      	subs	r3, #1
 8001a16:	71fb      	strb	r3, [r7, #7]
     while(Len > 0 ){
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1c1      	bne.n	80019a2 <I2C_MasterReceiveData+0x56>
    			//}
    		//}
		}

}
 8001a1e:	bf00      	nop
 8001a20:	bf00      	nop
 8001a22:	371c      	adds	r7, #28
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd90      	pop	{r4, r7, pc}

08001a28 <I2C_PeripheralControl>:
	*(NVIC_PR_BASEADDR + IPRx) |= (IRQPriority << Shift_Amount);
}
/*
 * other Peripheral Control APIs
 */
void I2C_PeripheralControl(I2C_RegDef_t* pI2Cx,uint8_t EnorDi){
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	460b      	mov	r3, r1
 8001a32:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8001a34:	78fb      	ldrb	r3, [r7, #3]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d106      	bne.n	8001a48 <I2C_PeripheralControl+0x20>
		pI2Cx -> CR1 |= (1 << I2C_CR1_PE);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f043 0201 	orr.w	r2, r3, #1
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	601a      	str	r2, [r3, #0]
	}else{
		pI2Cx -> CR1 &= ~(1 << I2C_CR1_PE);
	}
}
 8001a46:	e005      	b.n	8001a54 <I2C_PeripheralControl+0x2c>
		pI2Cx -> CR1 &= ~(1 << I2C_CR1_PE);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f023 0201 	bic.w	r2, r3, #1
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	601a      	str	r2, [r3, #0]
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bc80      	pop	{r7}
 8001a5c:	4770      	bx	lr

08001a5e <I2C_GetFlagStatus>:

/*
 *
 */
uint8_t I2C_GetFlagStatus(I2C_RegDef_t* pI2Cx, uint32_t FlagName){
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
 8001a66:	6039      	str	r1, [r7, #0]
	if(pI2Cx ->ISR & FlagName){
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	699a      	ldr	r2, [r3, #24]
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <I2C_GetFlagStatus+0x1a>
		return FLAG_SET;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e000      	b.n	8001a7a <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr

08001a84 <RCC_GetPCLK1Value>:
uint16_t AHB_preScaler[8] = {2, 4, 8, 16, 64, 128, 256, 512};
// software to control the division factor of the APB1 clock
uint16_t APB1_preScaler[4] = {2, 4, 8, 16};
// software to control the division factor of the APB2 clock
uint16_t APB2_preScaler[4] = {2, 4, 8, 16};
uint32_t RCC_GetPCLK1Value(void){
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk;
	uint8_t clksrc, temp, ahbp, apbp1;

	clksrc = ((RCC ->CFGR >> 2) & 0x3);
 8001a8a:	4b24      	ldr	r3, [pc, #144]	; (8001b1c <RCC_GetPCLK1Value+0x98>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	089b      	lsrs	r3, r3, #2
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	f003 0303 	and.w	r3, r3, #3
 8001a96:	727b      	strb	r3, [r7, #9]

	if(clksrc == RCC_CFGR_SWS_MSI){
 8001a98:	7a7b      	ldrb	r3, [r7, #9]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d00a      	beq.n	8001ab4 <RCC_GetPCLK1Value+0x30>
		//SystemClk = RCC_MSIOutClk();
	}else if(clksrc == RCC_CFGR_SWS_HSI){
 8001a9e:	7a7b      	ldrb	r3, [r7, #9]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d102      	bne.n	8001aaa <RCC_GetPCLK1Value+0x26>
		SystemClk = 16000000;
 8001aa4:	4b1e      	ldr	r3, [pc, #120]	; (8001b20 <RCC_GetPCLK1Value+0x9c>)
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	e004      	b.n	8001ab4 <RCC_GetPCLK1Value+0x30>
	}else if(clksrc == RCC_CFGR_SWS_HSE){
 8001aaa:	7a7b      	ldrb	r3, [r7, #9]
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d101      	bne.n	8001ab4 <RCC_GetPCLK1Value+0x30>
		SystemClk = 8000000;
 8001ab0:	4b1c      	ldr	r3, [pc, #112]	; (8001b24 <RCC_GetPCLK1Value+0xa0>)
 8001ab2:	60fb      	str	r3, [r7, #12]
	}else if(clksrc == RCC_CFGR_SWS_PLL){
		//SystemClk = RCC_PLLOutClk();
	}

	//: AHB prescaler
	temp = ((RCC ->CFGR >> 4) & 0xf);
 8001ab4:	4b19      	ldr	r3, [pc, #100]	; (8001b1c <RCC_GetPCLK1Value+0x98>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	091b      	lsrs	r3, r3, #4
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	f003 030f 	and.w	r3, r3, #15
 8001ac0:	723b      	strb	r3, [r7, #8]

	if(temp < 8){
 8001ac2:	7a3b      	ldrb	r3, [r7, #8]
 8001ac4:	2b07      	cmp	r3, #7
 8001ac6:	d802      	bhi.n	8001ace <RCC_GetPCLK1Value+0x4a>
		ahbp = 1;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	72fb      	strb	r3, [r7, #11]
 8001acc:	e005      	b.n	8001ada <RCC_GetPCLK1Value+0x56>
	}else{
		ahbp = AHB_preScaler[temp - 8];
 8001ace:	7a3b      	ldrb	r3, [r7, #8]
 8001ad0:	3b08      	subs	r3, #8
 8001ad2:	4a15      	ldr	r2, [pc, #84]	; (8001b28 <RCC_GetPCLK1Value+0xa4>)
 8001ad4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ad8:	72fb      	strb	r3, [r7, #11]
	}

	//: APB1 prescaler
	temp = ((RCC ->CFGR >> 8) & 0x7);
 8001ada:	4b10      	ldr	r3, [pc, #64]	; (8001b1c <RCC_GetPCLK1Value+0x98>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	0a1b      	lsrs	r3, r3, #8
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	723b      	strb	r3, [r7, #8]

	if(temp < 4){
 8001ae8:	7a3b      	ldrb	r3, [r7, #8]
 8001aea:	2b03      	cmp	r3, #3
 8001aec:	d802      	bhi.n	8001af4 <RCC_GetPCLK1Value+0x70>
		apbp1 = 1;
 8001aee:	2301      	movs	r3, #1
 8001af0:	72bb      	strb	r3, [r7, #10]
 8001af2:	e005      	b.n	8001b00 <RCC_GetPCLK1Value+0x7c>
	}else{
		apbp1 = APB1_preScaler[temp - 4];
 8001af4:	7a3b      	ldrb	r3, [r7, #8]
 8001af6:	3b04      	subs	r3, #4
 8001af8:	4a0c      	ldr	r2, [pc, #48]	; (8001b2c <RCC_GetPCLK1Value+0xa8>)
 8001afa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001afe:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = ((SystemClk / ahbp) / apbp1);
 8001b00:	7afb      	ldrb	r3, [r7, #11]
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b08:	7abb      	ldrb	r3, [r7, #10]
 8001b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0e:	607b      	str	r3, [r7, #4]

return pclk1;
 8001b10:	687b      	ldr	r3, [r7, #4]
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3714      	adds	r7, #20
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	00f42400 	.word	0x00f42400
 8001b24:	007a1200 	.word	0x007a1200
 8001b28:	20000000 	.word	0x20000000
 8001b2c:	20000010 	.word	0x20000010

08001b30 <std>:
 8001b30:	2300      	movs	r3, #0
 8001b32:	b510      	push	{r4, lr}
 8001b34:	4604      	mov	r4, r0
 8001b36:	e9c0 3300 	strd	r3, r3, [r0]
 8001b3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001b3e:	6083      	str	r3, [r0, #8]
 8001b40:	8181      	strh	r1, [r0, #12]
 8001b42:	6643      	str	r3, [r0, #100]	; 0x64
 8001b44:	81c2      	strh	r2, [r0, #14]
 8001b46:	6183      	str	r3, [r0, #24]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	2208      	movs	r2, #8
 8001b4c:	305c      	adds	r0, #92	; 0x5c
 8001b4e:	f000 f906 	bl	8001d5e <memset>
 8001b52:	4b0d      	ldr	r3, [pc, #52]	; (8001b88 <std+0x58>)
 8001b54:	6263      	str	r3, [r4, #36]	; 0x24
 8001b56:	4b0d      	ldr	r3, [pc, #52]	; (8001b8c <std+0x5c>)
 8001b58:	62a3      	str	r3, [r4, #40]	; 0x28
 8001b5a:	4b0d      	ldr	r3, [pc, #52]	; (8001b90 <std+0x60>)
 8001b5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001b5e:	4b0d      	ldr	r3, [pc, #52]	; (8001b94 <std+0x64>)
 8001b60:	6323      	str	r3, [r4, #48]	; 0x30
 8001b62:	4b0d      	ldr	r3, [pc, #52]	; (8001b98 <std+0x68>)
 8001b64:	6224      	str	r4, [r4, #32]
 8001b66:	429c      	cmp	r4, r3
 8001b68:	d006      	beq.n	8001b78 <std+0x48>
 8001b6a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8001b6e:	4294      	cmp	r4, r2
 8001b70:	d002      	beq.n	8001b78 <std+0x48>
 8001b72:	33d0      	adds	r3, #208	; 0xd0
 8001b74:	429c      	cmp	r4, r3
 8001b76:	d105      	bne.n	8001b84 <std+0x54>
 8001b78:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001b80:	f000 b966 	b.w	8001e50 <__retarget_lock_init_recursive>
 8001b84:	bd10      	pop	{r4, pc}
 8001b86:	bf00      	nop
 8001b88:	08001cd9 	.word	0x08001cd9
 8001b8c:	08001cfb 	.word	0x08001cfb
 8001b90:	08001d33 	.word	0x08001d33
 8001b94:	08001d57 	.word	0x08001d57
 8001b98:	200000d4 	.word	0x200000d4

08001b9c <stdio_exit_handler>:
 8001b9c:	4a02      	ldr	r2, [pc, #8]	; (8001ba8 <stdio_exit_handler+0xc>)
 8001b9e:	4903      	ldr	r1, [pc, #12]	; (8001bac <stdio_exit_handler+0x10>)
 8001ba0:	4803      	ldr	r0, [pc, #12]	; (8001bb0 <stdio_exit_handler+0x14>)
 8001ba2:	f000 b869 	b.w	8001c78 <_fwalk_sglue>
 8001ba6:	bf00      	nop
 8001ba8:	20000018 	.word	0x20000018
 8001bac:	080026ed 	.word	0x080026ed
 8001bb0:	20000024 	.word	0x20000024

08001bb4 <cleanup_stdio>:
 8001bb4:	6841      	ldr	r1, [r0, #4]
 8001bb6:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <cleanup_stdio+0x34>)
 8001bb8:	4299      	cmp	r1, r3
 8001bba:	b510      	push	{r4, lr}
 8001bbc:	4604      	mov	r4, r0
 8001bbe:	d001      	beq.n	8001bc4 <cleanup_stdio+0x10>
 8001bc0:	f000 fd94 	bl	80026ec <_fflush_r>
 8001bc4:	68a1      	ldr	r1, [r4, #8]
 8001bc6:	4b09      	ldr	r3, [pc, #36]	; (8001bec <cleanup_stdio+0x38>)
 8001bc8:	4299      	cmp	r1, r3
 8001bca:	d002      	beq.n	8001bd2 <cleanup_stdio+0x1e>
 8001bcc:	4620      	mov	r0, r4
 8001bce:	f000 fd8d 	bl	80026ec <_fflush_r>
 8001bd2:	68e1      	ldr	r1, [r4, #12]
 8001bd4:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <cleanup_stdio+0x3c>)
 8001bd6:	4299      	cmp	r1, r3
 8001bd8:	d004      	beq.n	8001be4 <cleanup_stdio+0x30>
 8001bda:	4620      	mov	r0, r4
 8001bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001be0:	f000 bd84 	b.w	80026ec <_fflush_r>
 8001be4:	bd10      	pop	{r4, pc}
 8001be6:	bf00      	nop
 8001be8:	200000d4 	.word	0x200000d4
 8001bec:	2000013c 	.word	0x2000013c
 8001bf0:	200001a4 	.word	0x200001a4

08001bf4 <global_stdio_init.part.0>:
 8001bf4:	b510      	push	{r4, lr}
 8001bf6:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <global_stdio_init.part.0+0x30>)
 8001bf8:	4c0b      	ldr	r4, [pc, #44]	; (8001c28 <global_stdio_init.part.0+0x34>)
 8001bfa:	4a0c      	ldr	r2, [pc, #48]	; (8001c2c <global_stdio_init.part.0+0x38>)
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	4620      	mov	r0, r4
 8001c00:	2200      	movs	r2, #0
 8001c02:	2104      	movs	r1, #4
 8001c04:	f7ff ff94 	bl	8001b30 <std>
 8001c08:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	2109      	movs	r1, #9
 8001c10:	f7ff ff8e 	bl	8001b30 <std>
 8001c14:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8001c18:	2202      	movs	r2, #2
 8001c1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c1e:	2112      	movs	r1, #18
 8001c20:	f7ff bf86 	b.w	8001b30 <std>
 8001c24:	2000020c 	.word	0x2000020c
 8001c28:	200000d4 	.word	0x200000d4
 8001c2c:	08001b9d 	.word	0x08001b9d

08001c30 <__sfp_lock_acquire>:
 8001c30:	4801      	ldr	r0, [pc, #4]	; (8001c38 <__sfp_lock_acquire+0x8>)
 8001c32:	f000 b90e 	b.w	8001e52 <__retarget_lock_acquire_recursive>
 8001c36:	bf00      	nop
 8001c38:	20000215 	.word	0x20000215

08001c3c <__sfp_lock_release>:
 8001c3c:	4801      	ldr	r0, [pc, #4]	; (8001c44 <__sfp_lock_release+0x8>)
 8001c3e:	f000 b909 	b.w	8001e54 <__retarget_lock_release_recursive>
 8001c42:	bf00      	nop
 8001c44:	20000215 	.word	0x20000215

08001c48 <__sinit>:
 8001c48:	b510      	push	{r4, lr}
 8001c4a:	4604      	mov	r4, r0
 8001c4c:	f7ff fff0 	bl	8001c30 <__sfp_lock_acquire>
 8001c50:	6a23      	ldr	r3, [r4, #32]
 8001c52:	b11b      	cbz	r3, 8001c5c <__sinit+0x14>
 8001c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c58:	f7ff bff0 	b.w	8001c3c <__sfp_lock_release>
 8001c5c:	4b04      	ldr	r3, [pc, #16]	; (8001c70 <__sinit+0x28>)
 8001c5e:	6223      	str	r3, [r4, #32]
 8001c60:	4b04      	ldr	r3, [pc, #16]	; (8001c74 <__sinit+0x2c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1f5      	bne.n	8001c54 <__sinit+0xc>
 8001c68:	f7ff ffc4 	bl	8001bf4 <global_stdio_init.part.0>
 8001c6c:	e7f2      	b.n	8001c54 <__sinit+0xc>
 8001c6e:	bf00      	nop
 8001c70:	08001bb5 	.word	0x08001bb5
 8001c74:	2000020c 	.word	0x2000020c

08001c78 <_fwalk_sglue>:
 8001c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001c7c:	4607      	mov	r7, r0
 8001c7e:	4688      	mov	r8, r1
 8001c80:	4614      	mov	r4, r2
 8001c82:	2600      	movs	r6, #0
 8001c84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001c88:	f1b9 0901 	subs.w	r9, r9, #1
 8001c8c:	d505      	bpl.n	8001c9a <_fwalk_sglue+0x22>
 8001c8e:	6824      	ldr	r4, [r4, #0]
 8001c90:	2c00      	cmp	r4, #0
 8001c92:	d1f7      	bne.n	8001c84 <_fwalk_sglue+0xc>
 8001c94:	4630      	mov	r0, r6
 8001c96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001c9a:	89ab      	ldrh	r3, [r5, #12]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d907      	bls.n	8001cb0 <_fwalk_sglue+0x38>
 8001ca0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	d003      	beq.n	8001cb0 <_fwalk_sglue+0x38>
 8001ca8:	4629      	mov	r1, r5
 8001caa:	4638      	mov	r0, r7
 8001cac:	47c0      	blx	r8
 8001cae:	4306      	orrs	r6, r0
 8001cb0:	3568      	adds	r5, #104	; 0x68
 8001cb2:	e7e9      	b.n	8001c88 <_fwalk_sglue+0x10>

08001cb4 <iprintf>:
 8001cb4:	b40f      	push	{r0, r1, r2, r3}
 8001cb6:	b507      	push	{r0, r1, r2, lr}
 8001cb8:	4906      	ldr	r1, [pc, #24]	; (8001cd4 <iprintf+0x20>)
 8001cba:	ab04      	add	r3, sp, #16
 8001cbc:	6808      	ldr	r0, [r1, #0]
 8001cbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8001cc2:	6881      	ldr	r1, [r0, #8]
 8001cc4:	9301      	str	r3, [sp, #4]
 8001cc6:	f000 f9e5 	bl	8002094 <_vfiprintf_r>
 8001cca:	b003      	add	sp, #12
 8001ccc:	f85d eb04 	ldr.w	lr, [sp], #4
 8001cd0:	b004      	add	sp, #16
 8001cd2:	4770      	bx	lr
 8001cd4:	20000070 	.word	0x20000070

08001cd8 <__sread>:
 8001cd8:	b510      	push	{r4, lr}
 8001cda:	460c      	mov	r4, r1
 8001cdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ce0:	f000 f868 	bl	8001db4 <_read_r>
 8001ce4:	2800      	cmp	r0, #0
 8001ce6:	bfab      	itete	ge
 8001ce8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001cea:	89a3      	ldrhlt	r3, [r4, #12]
 8001cec:	181b      	addge	r3, r3, r0
 8001cee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001cf2:	bfac      	ite	ge
 8001cf4:	6563      	strge	r3, [r4, #84]	; 0x54
 8001cf6:	81a3      	strhlt	r3, [r4, #12]
 8001cf8:	bd10      	pop	{r4, pc}

08001cfa <__swrite>:
 8001cfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cfe:	461f      	mov	r7, r3
 8001d00:	898b      	ldrh	r3, [r1, #12]
 8001d02:	05db      	lsls	r3, r3, #23
 8001d04:	4605      	mov	r5, r0
 8001d06:	460c      	mov	r4, r1
 8001d08:	4616      	mov	r6, r2
 8001d0a:	d505      	bpl.n	8001d18 <__swrite+0x1e>
 8001d0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d10:	2302      	movs	r3, #2
 8001d12:	2200      	movs	r2, #0
 8001d14:	f000 f83c 	bl	8001d90 <_lseek_r>
 8001d18:	89a3      	ldrh	r3, [r4, #12]
 8001d1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001d1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d22:	81a3      	strh	r3, [r4, #12]
 8001d24:	4632      	mov	r2, r6
 8001d26:	463b      	mov	r3, r7
 8001d28:	4628      	mov	r0, r5
 8001d2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001d2e:	f000 b853 	b.w	8001dd8 <_write_r>

08001d32 <__sseek>:
 8001d32:	b510      	push	{r4, lr}
 8001d34:	460c      	mov	r4, r1
 8001d36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d3a:	f000 f829 	bl	8001d90 <_lseek_r>
 8001d3e:	1c43      	adds	r3, r0, #1
 8001d40:	89a3      	ldrh	r3, [r4, #12]
 8001d42:	bf15      	itete	ne
 8001d44:	6560      	strne	r0, [r4, #84]	; 0x54
 8001d46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001d4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001d4e:	81a3      	strheq	r3, [r4, #12]
 8001d50:	bf18      	it	ne
 8001d52:	81a3      	strhne	r3, [r4, #12]
 8001d54:	bd10      	pop	{r4, pc}

08001d56 <__sclose>:
 8001d56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d5a:	f000 b809 	b.w	8001d70 <_close_r>

08001d5e <memset>:
 8001d5e:	4402      	add	r2, r0
 8001d60:	4603      	mov	r3, r0
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d100      	bne.n	8001d68 <memset+0xa>
 8001d66:	4770      	bx	lr
 8001d68:	f803 1b01 	strb.w	r1, [r3], #1
 8001d6c:	e7f9      	b.n	8001d62 <memset+0x4>
	...

08001d70 <_close_r>:
 8001d70:	b538      	push	{r3, r4, r5, lr}
 8001d72:	4d06      	ldr	r5, [pc, #24]	; (8001d8c <_close_r+0x1c>)
 8001d74:	2300      	movs	r3, #0
 8001d76:	4604      	mov	r4, r0
 8001d78:	4608      	mov	r0, r1
 8001d7a:	602b      	str	r3, [r5, #0]
 8001d7c:	f7fe fcaf 	bl	80006de <_close>
 8001d80:	1c43      	adds	r3, r0, #1
 8001d82:	d102      	bne.n	8001d8a <_close_r+0x1a>
 8001d84:	682b      	ldr	r3, [r5, #0]
 8001d86:	b103      	cbz	r3, 8001d8a <_close_r+0x1a>
 8001d88:	6023      	str	r3, [r4, #0]
 8001d8a:	bd38      	pop	{r3, r4, r5, pc}
 8001d8c:	20000210 	.word	0x20000210

08001d90 <_lseek_r>:
 8001d90:	b538      	push	{r3, r4, r5, lr}
 8001d92:	4d07      	ldr	r5, [pc, #28]	; (8001db0 <_lseek_r+0x20>)
 8001d94:	4604      	mov	r4, r0
 8001d96:	4608      	mov	r0, r1
 8001d98:	4611      	mov	r1, r2
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	602a      	str	r2, [r5, #0]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	f7fe fcc1 	bl	8000726 <_lseek>
 8001da4:	1c43      	adds	r3, r0, #1
 8001da6:	d102      	bne.n	8001dae <_lseek_r+0x1e>
 8001da8:	682b      	ldr	r3, [r5, #0]
 8001daa:	b103      	cbz	r3, 8001dae <_lseek_r+0x1e>
 8001dac:	6023      	str	r3, [r4, #0]
 8001dae:	bd38      	pop	{r3, r4, r5, pc}
 8001db0:	20000210 	.word	0x20000210

08001db4 <_read_r>:
 8001db4:	b538      	push	{r3, r4, r5, lr}
 8001db6:	4d07      	ldr	r5, [pc, #28]	; (8001dd4 <_read_r+0x20>)
 8001db8:	4604      	mov	r4, r0
 8001dba:	4608      	mov	r0, r1
 8001dbc:	4611      	mov	r1, r2
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	602a      	str	r2, [r5, #0]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	f7fe fc52 	bl	800066c <_read>
 8001dc8:	1c43      	adds	r3, r0, #1
 8001dca:	d102      	bne.n	8001dd2 <_read_r+0x1e>
 8001dcc:	682b      	ldr	r3, [r5, #0]
 8001dce:	b103      	cbz	r3, 8001dd2 <_read_r+0x1e>
 8001dd0:	6023      	str	r3, [r4, #0]
 8001dd2:	bd38      	pop	{r3, r4, r5, pc}
 8001dd4:	20000210 	.word	0x20000210

08001dd8 <_write_r>:
 8001dd8:	b538      	push	{r3, r4, r5, lr}
 8001dda:	4d07      	ldr	r5, [pc, #28]	; (8001df8 <_write_r+0x20>)
 8001ddc:	4604      	mov	r4, r0
 8001dde:	4608      	mov	r0, r1
 8001de0:	4611      	mov	r1, r2
 8001de2:	2200      	movs	r2, #0
 8001de4:	602a      	str	r2, [r5, #0]
 8001de6:	461a      	mov	r2, r3
 8001de8:	f7fe fc5d 	bl	80006a6 <_write>
 8001dec:	1c43      	adds	r3, r0, #1
 8001dee:	d102      	bne.n	8001df6 <_write_r+0x1e>
 8001df0:	682b      	ldr	r3, [r5, #0]
 8001df2:	b103      	cbz	r3, 8001df6 <_write_r+0x1e>
 8001df4:	6023      	str	r3, [r4, #0]
 8001df6:	bd38      	pop	{r3, r4, r5, pc}
 8001df8:	20000210 	.word	0x20000210

08001dfc <__errno>:
 8001dfc:	4b01      	ldr	r3, [pc, #4]	; (8001e04 <__errno+0x8>)
 8001dfe:	6818      	ldr	r0, [r3, #0]
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	20000070 	.word	0x20000070

08001e08 <__libc_init_array>:
 8001e08:	b570      	push	{r4, r5, r6, lr}
 8001e0a:	4d0d      	ldr	r5, [pc, #52]	; (8001e40 <__libc_init_array+0x38>)
 8001e0c:	4c0d      	ldr	r4, [pc, #52]	; (8001e44 <__libc_init_array+0x3c>)
 8001e0e:	1b64      	subs	r4, r4, r5
 8001e10:	10a4      	asrs	r4, r4, #2
 8001e12:	2600      	movs	r6, #0
 8001e14:	42a6      	cmp	r6, r4
 8001e16:	d109      	bne.n	8001e2c <__libc_init_array+0x24>
 8001e18:	4d0b      	ldr	r5, [pc, #44]	; (8001e48 <__libc_init_array+0x40>)
 8001e1a:	4c0c      	ldr	r4, [pc, #48]	; (8001e4c <__libc_init_array+0x44>)
 8001e1c:	f000 fdb8 	bl	8002990 <_init>
 8001e20:	1b64      	subs	r4, r4, r5
 8001e22:	10a4      	asrs	r4, r4, #2
 8001e24:	2600      	movs	r6, #0
 8001e26:	42a6      	cmp	r6, r4
 8001e28:	d105      	bne.n	8001e36 <__libc_init_array+0x2e>
 8001e2a:	bd70      	pop	{r4, r5, r6, pc}
 8001e2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e30:	4798      	blx	r3
 8001e32:	3601      	adds	r6, #1
 8001e34:	e7ee      	b.n	8001e14 <__libc_init_array+0xc>
 8001e36:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e3a:	4798      	blx	r3
 8001e3c:	3601      	adds	r6, #1
 8001e3e:	e7f2      	b.n	8001e26 <__libc_init_array+0x1e>
 8001e40:	08002a88 	.word	0x08002a88
 8001e44:	08002a88 	.word	0x08002a88
 8001e48:	08002a88 	.word	0x08002a88
 8001e4c:	08002a8c 	.word	0x08002a8c

08001e50 <__retarget_lock_init_recursive>:
 8001e50:	4770      	bx	lr

08001e52 <__retarget_lock_acquire_recursive>:
 8001e52:	4770      	bx	lr

08001e54 <__retarget_lock_release_recursive>:
 8001e54:	4770      	bx	lr
	...

08001e58 <_free_r>:
 8001e58:	b538      	push	{r3, r4, r5, lr}
 8001e5a:	4605      	mov	r5, r0
 8001e5c:	2900      	cmp	r1, #0
 8001e5e:	d041      	beq.n	8001ee4 <_free_r+0x8c>
 8001e60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001e64:	1f0c      	subs	r4, r1, #4
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	bfb8      	it	lt
 8001e6a:	18e4      	addlt	r4, r4, r3
 8001e6c:	f000 f8de 	bl	800202c <__malloc_lock>
 8001e70:	4a1d      	ldr	r2, [pc, #116]	; (8001ee8 <_free_r+0x90>)
 8001e72:	6813      	ldr	r3, [r2, #0]
 8001e74:	b933      	cbnz	r3, 8001e84 <_free_r+0x2c>
 8001e76:	6063      	str	r3, [r4, #4]
 8001e78:	6014      	str	r4, [r2, #0]
 8001e7a:	4628      	mov	r0, r5
 8001e7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001e80:	f000 b8da 	b.w	8002038 <__malloc_unlock>
 8001e84:	42a3      	cmp	r3, r4
 8001e86:	d908      	bls.n	8001e9a <_free_r+0x42>
 8001e88:	6820      	ldr	r0, [r4, #0]
 8001e8a:	1821      	adds	r1, r4, r0
 8001e8c:	428b      	cmp	r3, r1
 8001e8e:	bf01      	itttt	eq
 8001e90:	6819      	ldreq	r1, [r3, #0]
 8001e92:	685b      	ldreq	r3, [r3, #4]
 8001e94:	1809      	addeq	r1, r1, r0
 8001e96:	6021      	streq	r1, [r4, #0]
 8001e98:	e7ed      	b.n	8001e76 <_free_r+0x1e>
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	b10b      	cbz	r3, 8001ea4 <_free_r+0x4c>
 8001ea0:	42a3      	cmp	r3, r4
 8001ea2:	d9fa      	bls.n	8001e9a <_free_r+0x42>
 8001ea4:	6811      	ldr	r1, [r2, #0]
 8001ea6:	1850      	adds	r0, r2, r1
 8001ea8:	42a0      	cmp	r0, r4
 8001eaa:	d10b      	bne.n	8001ec4 <_free_r+0x6c>
 8001eac:	6820      	ldr	r0, [r4, #0]
 8001eae:	4401      	add	r1, r0
 8001eb0:	1850      	adds	r0, r2, r1
 8001eb2:	4283      	cmp	r3, r0
 8001eb4:	6011      	str	r1, [r2, #0]
 8001eb6:	d1e0      	bne.n	8001e7a <_free_r+0x22>
 8001eb8:	6818      	ldr	r0, [r3, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	6053      	str	r3, [r2, #4]
 8001ebe:	4408      	add	r0, r1
 8001ec0:	6010      	str	r0, [r2, #0]
 8001ec2:	e7da      	b.n	8001e7a <_free_r+0x22>
 8001ec4:	d902      	bls.n	8001ecc <_free_r+0x74>
 8001ec6:	230c      	movs	r3, #12
 8001ec8:	602b      	str	r3, [r5, #0]
 8001eca:	e7d6      	b.n	8001e7a <_free_r+0x22>
 8001ecc:	6820      	ldr	r0, [r4, #0]
 8001ece:	1821      	adds	r1, r4, r0
 8001ed0:	428b      	cmp	r3, r1
 8001ed2:	bf04      	itt	eq
 8001ed4:	6819      	ldreq	r1, [r3, #0]
 8001ed6:	685b      	ldreq	r3, [r3, #4]
 8001ed8:	6063      	str	r3, [r4, #4]
 8001eda:	bf04      	itt	eq
 8001edc:	1809      	addeq	r1, r1, r0
 8001ede:	6021      	streq	r1, [r4, #0]
 8001ee0:	6054      	str	r4, [r2, #4]
 8001ee2:	e7ca      	b.n	8001e7a <_free_r+0x22>
 8001ee4:	bd38      	pop	{r3, r4, r5, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20000218 	.word	0x20000218

08001eec <sbrk_aligned>:
 8001eec:	b570      	push	{r4, r5, r6, lr}
 8001eee:	4e0e      	ldr	r6, [pc, #56]	; (8001f28 <sbrk_aligned+0x3c>)
 8001ef0:	460c      	mov	r4, r1
 8001ef2:	6831      	ldr	r1, [r6, #0]
 8001ef4:	4605      	mov	r5, r0
 8001ef6:	b911      	cbnz	r1, 8001efe <sbrk_aligned+0x12>
 8001ef8:	f000 fcb6 	bl	8002868 <_sbrk_r>
 8001efc:	6030      	str	r0, [r6, #0]
 8001efe:	4621      	mov	r1, r4
 8001f00:	4628      	mov	r0, r5
 8001f02:	f000 fcb1 	bl	8002868 <_sbrk_r>
 8001f06:	1c43      	adds	r3, r0, #1
 8001f08:	d00a      	beq.n	8001f20 <sbrk_aligned+0x34>
 8001f0a:	1cc4      	adds	r4, r0, #3
 8001f0c:	f024 0403 	bic.w	r4, r4, #3
 8001f10:	42a0      	cmp	r0, r4
 8001f12:	d007      	beq.n	8001f24 <sbrk_aligned+0x38>
 8001f14:	1a21      	subs	r1, r4, r0
 8001f16:	4628      	mov	r0, r5
 8001f18:	f000 fca6 	bl	8002868 <_sbrk_r>
 8001f1c:	3001      	adds	r0, #1
 8001f1e:	d101      	bne.n	8001f24 <sbrk_aligned+0x38>
 8001f20:	f04f 34ff 	mov.w	r4, #4294967295
 8001f24:	4620      	mov	r0, r4
 8001f26:	bd70      	pop	{r4, r5, r6, pc}
 8001f28:	2000021c 	.word	0x2000021c

08001f2c <_malloc_r>:
 8001f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f30:	1ccd      	adds	r5, r1, #3
 8001f32:	f025 0503 	bic.w	r5, r5, #3
 8001f36:	3508      	adds	r5, #8
 8001f38:	2d0c      	cmp	r5, #12
 8001f3a:	bf38      	it	cc
 8001f3c:	250c      	movcc	r5, #12
 8001f3e:	2d00      	cmp	r5, #0
 8001f40:	4607      	mov	r7, r0
 8001f42:	db01      	blt.n	8001f48 <_malloc_r+0x1c>
 8001f44:	42a9      	cmp	r1, r5
 8001f46:	d905      	bls.n	8001f54 <_malloc_r+0x28>
 8001f48:	230c      	movs	r3, #12
 8001f4a:	603b      	str	r3, [r7, #0]
 8001f4c:	2600      	movs	r6, #0
 8001f4e:	4630      	mov	r0, r6
 8001f50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001f54:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002028 <_malloc_r+0xfc>
 8001f58:	f000 f868 	bl	800202c <__malloc_lock>
 8001f5c:	f8d8 3000 	ldr.w	r3, [r8]
 8001f60:	461c      	mov	r4, r3
 8001f62:	bb5c      	cbnz	r4, 8001fbc <_malloc_r+0x90>
 8001f64:	4629      	mov	r1, r5
 8001f66:	4638      	mov	r0, r7
 8001f68:	f7ff ffc0 	bl	8001eec <sbrk_aligned>
 8001f6c:	1c43      	adds	r3, r0, #1
 8001f6e:	4604      	mov	r4, r0
 8001f70:	d155      	bne.n	800201e <_malloc_r+0xf2>
 8001f72:	f8d8 4000 	ldr.w	r4, [r8]
 8001f76:	4626      	mov	r6, r4
 8001f78:	2e00      	cmp	r6, #0
 8001f7a:	d145      	bne.n	8002008 <_malloc_r+0xdc>
 8001f7c:	2c00      	cmp	r4, #0
 8001f7e:	d048      	beq.n	8002012 <_malloc_r+0xe6>
 8001f80:	6823      	ldr	r3, [r4, #0]
 8001f82:	4631      	mov	r1, r6
 8001f84:	4638      	mov	r0, r7
 8001f86:	eb04 0903 	add.w	r9, r4, r3
 8001f8a:	f000 fc6d 	bl	8002868 <_sbrk_r>
 8001f8e:	4581      	cmp	r9, r0
 8001f90:	d13f      	bne.n	8002012 <_malloc_r+0xe6>
 8001f92:	6821      	ldr	r1, [r4, #0]
 8001f94:	1a6d      	subs	r5, r5, r1
 8001f96:	4629      	mov	r1, r5
 8001f98:	4638      	mov	r0, r7
 8001f9a:	f7ff ffa7 	bl	8001eec <sbrk_aligned>
 8001f9e:	3001      	adds	r0, #1
 8001fa0:	d037      	beq.n	8002012 <_malloc_r+0xe6>
 8001fa2:	6823      	ldr	r3, [r4, #0]
 8001fa4:	442b      	add	r3, r5
 8001fa6:	6023      	str	r3, [r4, #0]
 8001fa8:	f8d8 3000 	ldr.w	r3, [r8]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d038      	beq.n	8002022 <_malloc_r+0xf6>
 8001fb0:	685a      	ldr	r2, [r3, #4]
 8001fb2:	42a2      	cmp	r2, r4
 8001fb4:	d12b      	bne.n	800200e <_malloc_r+0xe2>
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	e00f      	b.n	8001fdc <_malloc_r+0xb0>
 8001fbc:	6822      	ldr	r2, [r4, #0]
 8001fbe:	1b52      	subs	r2, r2, r5
 8001fc0:	d41f      	bmi.n	8002002 <_malloc_r+0xd6>
 8001fc2:	2a0b      	cmp	r2, #11
 8001fc4:	d917      	bls.n	8001ff6 <_malloc_r+0xca>
 8001fc6:	1961      	adds	r1, r4, r5
 8001fc8:	42a3      	cmp	r3, r4
 8001fca:	6025      	str	r5, [r4, #0]
 8001fcc:	bf18      	it	ne
 8001fce:	6059      	strne	r1, [r3, #4]
 8001fd0:	6863      	ldr	r3, [r4, #4]
 8001fd2:	bf08      	it	eq
 8001fd4:	f8c8 1000 	streq.w	r1, [r8]
 8001fd8:	5162      	str	r2, [r4, r5]
 8001fda:	604b      	str	r3, [r1, #4]
 8001fdc:	4638      	mov	r0, r7
 8001fde:	f104 060b 	add.w	r6, r4, #11
 8001fe2:	f000 f829 	bl	8002038 <__malloc_unlock>
 8001fe6:	f026 0607 	bic.w	r6, r6, #7
 8001fea:	1d23      	adds	r3, r4, #4
 8001fec:	1af2      	subs	r2, r6, r3
 8001fee:	d0ae      	beq.n	8001f4e <_malloc_r+0x22>
 8001ff0:	1b9b      	subs	r3, r3, r6
 8001ff2:	50a3      	str	r3, [r4, r2]
 8001ff4:	e7ab      	b.n	8001f4e <_malloc_r+0x22>
 8001ff6:	42a3      	cmp	r3, r4
 8001ff8:	6862      	ldr	r2, [r4, #4]
 8001ffa:	d1dd      	bne.n	8001fb8 <_malloc_r+0x8c>
 8001ffc:	f8c8 2000 	str.w	r2, [r8]
 8002000:	e7ec      	b.n	8001fdc <_malloc_r+0xb0>
 8002002:	4623      	mov	r3, r4
 8002004:	6864      	ldr	r4, [r4, #4]
 8002006:	e7ac      	b.n	8001f62 <_malloc_r+0x36>
 8002008:	4634      	mov	r4, r6
 800200a:	6876      	ldr	r6, [r6, #4]
 800200c:	e7b4      	b.n	8001f78 <_malloc_r+0x4c>
 800200e:	4613      	mov	r3, r2
 8002010:	e7cc      	b.n	8001fac <_malloc_r+0x80>
 8002012:	230c      	movs	r3, #12
 8002014:	603b      	str	r3, [r7, #0]
 8002016:	4638      	mov	r0, r7
 8002018:	f000 f80e 	bl	8002038 <__malloc_unlock>
 800201c:	e797      	b.n	8001f4e <_malloc_r+0x22>
 800201e:	6025      	str	r5, [r4, #0]
 8002020:	e7dc      	b.n	8001fdc <_malloc_r+0xb0>
 8002022:	605b      	str	r3, [r3, #4]
 8002024:	deff      	udf	#255	; 0xff
 8002026:	bf00      	nop
 8002028:	20000218 	.word	0x20000218

0800202c <__malloc_lock>:
 800202c:	4801      	ldr	r0, [pc, #4]	; (8002034 <__malloc_lock+0x8>)
 800202e:	f7ff bf10 	b.w	8001e52 <__retarget_lock_acquire_recursive>
 8002032:	bf00      	nop
 8002034:	20000214 	.word	0x20000214

08002038 <__malloc_unlock>:
 8002038:	4801      	ldr	r0, [pc, #4]	; (8002040 <__malloc_unlock+0x8>)
 800203a:	f7ff bf0b 	b.w	8001e54 <__retarget_lock_release_recursive>
 800203e:	bf00      	nop
 8002040:	20000214 	.word	0x20000214

08002044 <__sfputc_r>:
 8002044:	6893      	ldr	r3, [r2, #8]
 8002046:	3b01      	subs	r3, #1
 8002048:	2b00      	cmp	r3, #0
 800204a:	b410      	push	{r4}
 800204c:	6093      	str	r3, [r2, #8]
 800204e:	da07      	bge.n	8002060 <__sfputc_r+0x1c>
 8002050:	6994      	ldr	r4, [r2, #24]
 8002052:	42a3      	cmp	r3, r4
 8002054:	db01      	blt.n	800205a <__sfputc_r+0x16>
 8002056:	290a      	cmp	r1, #10
 8002058:	d102      	bne.n	8002060 <__sfputc_r+0x1c>
 800205a:	bc10      	pop	{r4}
 800205c:	f000 bb6e 	b.w	800273c <__swbuf_r>
 8002060:	6813      	ldr	r3, [r2, #0]
 8002062:	1c58      	adds	r0, r3, #1
 8002064:	6010      	str	r0, [r2, #0]
 8002066:	7019      	strb	r1, [r3, #0]
 8002068:	4608      	mov	r0, r1
 800206a:	bc10      	pop	{r4}
 800206c:	4770      	bx	lr

0800206e <__sfputs_r>:
 800206e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002070:	4606      	mov	r6, r0
 8002072:	460f      	mov	r7, r1
 8002074:	4614      	mov	r4, r2
 8002076:	18d5      	adds	r5, r2, r3
 8002078:	42ac      	cmp	r4, r5
 800207a:	d101      	bne.n	8002080 <__sfputs_r+0x12>
 800207c:	2000      	movs	r0, #0
 800207e:	e007      	b.n	8002090 <__sfputs_r+0x22>
 8002080:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002084:	463a      	mov	r2, r7
 8002086:	4630      	mov	r0, r6
 8002088:	f7ff ffdc 	bl	8002044 <__sfputc_r>
 800208c:	1c43      	adds	r3, r0, #1
 800208e:	d1f3      	bne.n	8002078 <__sfputs_r+0xa>
 8002090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002094 <_vfiprintf_r>:
 8002094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002098:	460d      	mov	r5, r1
 800209a:	b09d      	sub	sp, #116	; 0x74
 800209c:	4614      	mov	r4, r2
 800209e:	4698      	mov	r8, r3
 80020a0:	4606      	mov	r6, r0
 80020a2:	b118      	cbz	r0, 80020ac <_vfiprintf_r+0x18>
 80020a4:	6a03      	ldr	r3, [r0, #32]
 80020a6:	b90b      	cbnz	r3, 80020ac <_vfiprintf_r+0x18>
 80020a8:	f7ff fdce 	bl	8001c48 <__sinit>
 80020ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80020ae:	07d9      	lsls	r1, r3, #31
 80020b0:	d405      	bmi.n	80020be <_vfiprintf_r+0x2a>
 80020b2:	89ab      	ldrh	r3, [r5, #12]
 80020b4:	059a      	lsls	r2, r3, #22
 80020b6:	d402      	bmi.n	80020be <_vfiprintf_r+0x2a>
 80020b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80020ba:	f7ff feca 	bl	8001e52 <__retarget_lock_acquire_recursive>
 80020be:	89ab      	ldrh	r3, [r5, #12]
 80020c0:	071b      	lsls	r3, r3, #28
 80020c2:	d501      	bpl.n	80020c8 <_vfiprintf_r+0x34>
 80020c4:	692b      	ldr	r3, [r5, #16]
 80020c6:	b99b      	cbnz	r3, 80020f0 <_vfiprintf_r+0x5c>
 80020c8:	4629      	mov	r1, r5
 80020ca:	4630      	mov	r0, r6
 80020cc:	f000 fb74 	bl	80027b8 <__swsetup_r>
 80020d0:	b170      	cbz	r0, 80020f0 <_vfiprintf_r+0x5c>
 80020d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80020d4:	07dc      	lsls	r4, r3, #31
 80020d6:	d504      	bpl.n	80020e2 <_vfiprintf_r+0x4e>
 80020d8:	f04f 30ff 	mov.w	r0, #4294967295
 80020dc:	b01d      	add	sp, #116	; 0x74
 80020de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020e2:	89ab      	ldrh	r3, [r5, #12]
 80020e4:	0598      	lsls	r0, r3, #22
 80020e6:	d4f7      	bmi.n	80020d8 <_vfiprintf_r+0x44>
 80020e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80020ea:	f7ff feb3 	bl	8001e54 <__retarget_lock_release_recursive>
 80020ee:	e7f3      	b.n	80020d8 <_vfiprintf_r+0x44>
 80020f0:	2300      	movs	r3, #0
 80020f2:	9309      	str	r3, [sp, #36]	; 0x24
 80020f4:	2320      	movs	r3, #32
 80020f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80020fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80020fe:	2330      	movs	r3, #48	; 0x30
 8002100:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80022b4 <_vfiprintf_r+0x220>
 8002104:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002108:	f04f 0901 	mov.w	r9, #1
 800210c:	4623      	mov	r3, r4
 800210e:	469a      	mov	sl, r3
 8002110:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002114:	b10a      	cbz	r2, 800211a <_vfiprintf_r+0x86>
 8002116:	2a25      	cmp	r2, #37	; 0x25
 8002118:	d1f9      	bne.n	800210e <_vfiprintf_r+0x7a>
 800211a:	ebba 0b04 	subs.w	fp, sl, r4
 800211e:	d00b      	beq.n	8002138 <_vfiprintf_r+0xa4>
 8002120:	465b      	mov	r3, fp
 8002122:	4622      	mov	r2, r4
 8002124:	4629      	mov	r1, r5
 8002126:	4630      	mov	r0, r6
 8002128:	f7ff ffa1 	bl	800206e <__sfputs_r>
 800212c:	3001      	adds	r0, #1
 800212e:	f000 80a9 	beq.w	8002284 <_vfiprintf_r+0x1f0>
 8002132:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002134:	445a      	add	r2, fp
 8002136:	9209      	str	r2, [sp, #36]	; 0x24
 8002138:	f89a 3000 	ldrb.w	r3, [sl]
 800213c:	2b00      	cmp	r3, #0
 800213e:	f000 80a1 	beq.w	8002284 <_vfiprintf_r+0x1f0>
 8002142:	2300      	movs	r3, #0
 8002144:	f04f 32ff 	mov.w	r2, #4294967295
 8002148:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800214c:	f10a 0a01 	add.w	sl, sl, #1
 8002150:	9304      	str	r3, [sp, #16]
 8002152:	9307      	str	r3, [sp, #28]
 8002154:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002158:	931a      	str	r3, [sp, #104]	; 0x68
 800215a:	4654      	mov	r4, sl
 800215c:	2205      	movs	r2, #5
 800215e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002162:	4854      	ldr	r0, [pc, #336]	; (80022b4 <_vfiprintf_r+0x220>)
 8002164:	f7fe f834 	bl	80001d0 <memchr>
 8002168:	9a04      	ldr	r2, [sp, #16]
 800216a:	b9d8      	cbnz	r0, 80021a4 <_vfiprintf_r+0x110>
 800216c:	06d1      	lsls	r1, r2, #27
 800216e:	bf44      	itt	mi
 8002170:	2320      	movmi	r3, #32
 8002172:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002176:	0713      	lsls	r3, r2, #28
 8002178:	bf44      	itt	mi
 800217a:	232b      	movmi	r3, #43	; 0x2b
 800217c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002180:	f89a 3000 	ldrb.w	r3, [sl]
 8002184:	2b2a      	cmp	r3, #42	; 0x2a
 8002186:	d015      	beq.n	80021b4 <_vfiprintf_r+0x120>
 8002188:	9a07      	ldr	r2, [sp, #28]
 800218a:	4654      	mov	r4, sl
 800218c:	2000      	movs	r0, #0
 800218e:	f04f 0c0a 	mov.w	ip, #10
 8002192:	4621      	mov	r1, r4
 8002194:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002198:	3b30      	subs	r3, #48	; 0x30
 800219a:	2b09      	cmp	r3, #9
 800219c:	d94d      	bls.n	800223a <_vfiprintf_r+0x1a6>
 800219e:	b1b0      	cbz	r0, 80021ce <_vfiprintf_r+0x13a>
 80021a0:	9207      	str	r2, [sp, #28]
 80021a2:	e014      	b.n	80021ce <_vfiprintf_r+0x13a>
 80021a4:	eba0 0308 	sub.w	r3, r0, r8
 80021a8:	fa09 f303 	lsl.w	r3, r9, r3
 80021ac:	4313      	orrs	r3, r2
 80021ae:	9304      	str	r3, [sp, #16]
 80021b0:	46a2      	mov	sl, r4
 80021b2:	e7d2      	b.n	800215a <_vfiprintf_r+0xc6>
 80021b4:	9b03      	ldr	r3, [sp, #12]
 80021b6:	1d19      	adds	r1, r3, #4
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	9103      	str	r1, [sp, #12]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	bfbb      	ittet	lt
 80021c0:	425b      	neglt	r3, r3
 80021c2:	f042 0202 	orrlt.w	r2, r2, #2
 80021c6:	9307      	strge	r3, [sp, #28]
 80021c8:	9307      	strlt	r3, [sp, #28]
 80021ca:	bfb8      	it	lt
 80021cc:	9204      	strlt	r2, [sp, #16]
 80021ce:	7823      	ldrb	r3, [r4, #0]
 80021d0:	2b2e      	cmp	r3, #46	; 0x2e
 80021d2:	d10c      	bne.n	80021ee <_vfiprintf_r+0x15a>
 80021d4:	7863      	ldrb	r3, [r4, #1]
 80021d6:	2b2a      	cmp	r3, #42	; 0x2a
 80021d8:	d134      	bne.n	8002244 <_vfiprintf_r+0x1b0>
 80021da:	9b03      	ldr	r3, [sp, #12]
 80021dc:	1d1a      	adds	r2, r3, #4
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	9203      	str	r2, [sp, #12]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	bfb8      	it	lt
 80021e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80021ea:	3402      	adds	r4, #2
 80021ec:	9305      	str	r3, [sp, #20]
 80021ee:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80022b8 <_vfiprintf_r+0x224>
 80021f2:	7821      	ldrb	r1, [r4, #0]
 80021f4:	2203      	movs	r2, #3
 80021f6:	4650      	mov	r0, sl
 80021f8:	f7fd ffea 	bl	80001d0 <memchr>
 80021fc:	b138      	cbz	r0, 800220e <_vfiprintf_r+0x17a>
 80021fe:	9b04      	ldr	r3, [sp, #16]
 8002200:	eba0 000a 	sub.w	r0, r0, sl
 8002204:	2240      	movs	r2, #64	; 0x40
 8002206:	4082      	lsls	r2, r0
 8002208:	4313      	orrs	r3, r2
 800220a:	3401      	adds	r4, #1
 800220c:	9304      	str	r3, [sp, #16]
 800220e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002212:	482a      	ldr	r0, [pc, #168]	; (80022bc <_vfiprintf_r+0x228>)
 8002214:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002218:	2206      	movs	r2, #6
 800221a:	f7fd ffd9 	bl	80001d0 <memchr>
 800221e:	2800      	cmp	r0, #0
 8002220:	d03f      	beq.n	80022a2 <_vfiprintf_r+0x20e>
 8002222:	4b27      	ldr	r3, [pc, #156]	; (80022c0 <_vfiprintf_r+0x22c>)
 8002224:	bb1b      	cbnz	r3, 800226e <_vfiprintf_r+0x1da>
 8002226:	9b03      	ldr	r3, [sp, #12]
 8002228:	3307      	adds	r3, #7
 800222a:	f023 0307 	bic.w	r3, r3, #7
 800222e:	3308      	adds	r3, #8
 8002230:	9303      	str	r3, [sp, #12]
 8002232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002234:	443b      	add	r3, r7
 8002236:	9309      	str	r3, [sp, #36]	; 0x24
 8002238:	e768      	b.n	800210c <_vfiprintf_r+0x78>
 800223a:	fb0c 3202 	mla	r2, ip, r2, r3
 800223e:	460c      	mov	r4, r1
 8002240:	2001      	movs	r0, #1
 8002242:	e7a6      	b.n	8002192 <_vfiprintf_r+0xfe>
 8002244:	2300      	movs	r3, #0
 8002246:	3401      	adds	r4, #1
 8002248:	9305      	str	r3, [sp, #20]
 800224a:	4619      	mov	r1, r3
 800224c:	f04f 0c0a 	mov.w	ip, #10
 8002250:	4620      	mov	r0, r4
 8002252:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002256:	3a30      	subs	r2, #48	; 0x30
 8002258:	2a09      	cmp	r2, #9
 800225a:	d903      	bls.n	8002264 <_vfiprintf_r+0x1d0>
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0c6      	beq.n	80021ee <_vfiprintf_r+0x15a>
 8002260:	9105      	str	r1, [sp, #20]
 8002262:	e7c4      	b.n	80021ee <_vfiprintf_r+0x15a>
 8002264:	fb0c 2101 	mla	r1, ip, r1, r2
 8002268:	4604      	mov	r4, r0
 800226a:	2301      	movs	r3, #1
 800226c:	e7f0      	b.n	8002250 <_vfiprintf_r+0x1bc>
 800226e:	ab03      	add	r3, sp, #12
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	462a      	mov	r2, r5
 8002274:	4b13      	ldr	r3, [pc, #76]	; (80022c4 <_vfiprintf_r+0x230>)
 8002276:	a904      	add	r1, sp, #16
 8002278:	4630      	mov	r0, r6
 800227a:	f3af 8000 	nop.w
 800227e:	4607      	mov	r7, r0
 8002280:	1c78      	adds	r0, r7, #1
 8002282:	d1d6      	bne.n	8002232 <_vfiprintf_r+0x19e>
 8002284:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002286:	07d9      	lsls	r1, r3, #31
 8002288:	d405      	bmi.n	8002296 <_vfiprintf_r+0x202>
 800228a:	89ab      	ldrh	r3, [r5, #12]
 800228c:	059a      	lsls	r2, r3, #22
 800228e:	d402      	bmi.n	8002296 <_vfiprintf_r+0x202>
 8002290:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002292:	f7ff fddf 	bl	8001e54 <__retarget_lock_release_recursive>
 8002296:	89ab      	ldrh	r3, [r5, #12]
 8002298:	065b      	lsls	r3, r3, #25
 800229a:	f53f af1d 	bmi.w	80020d8 <_vfiprintf_r+0x44>
 800229e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80022a0:	e71c      	b.n	80020dc <_vfiprintf_r+0x48>
 80022a2:	ab03      	add	r3, sp, #12
 80022a4:	9300      	str	r3, [sp, #0]
 80022a6:	462a      	mov	r2, r5
 80022a8:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <_vfiprintf_r+0x230>)
 80022aa:	a904      	add	r1, sp, #16
 80022ac:	4630      	mov	r0, r6
 80022ae:	f000 f879 	bl	80023a4 <_printf_i>
 80022b2:	e7e4      	b.n	800227e <_vfiprintf_r+0x1ea>
 80022b4:	08002a55 	.word	0x08002a55
 80022b8:	08002a5b 	.word	0x08002a5b
 80022bc:	08002a5f 	.word	0x08002a5f
 80022c0:	00000000 	.word	0x00000000
 80022c4:	0800206f 	.word	0x0800206f

080022c8 <_printf_common>:
 80022c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80022cc:	4616      	mov	r6, r2
 80022ce:	4699      	mov	r9, r3
 80022d0:	688a      	ldr	r2, [r1, #8]
 80022d2:	690b      	ldr	r3, [r1, #16]
 80022d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80022d8:	4293      	cmp	r3, r2
 80022da:	bfb8      	it	lt
 80022dc:	4613      	movlt	r3, r2
 80022de:	6033      	str	r3, [r6, #0]
 80022e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80022e4:	4607      	mov	r7, r0
 80022e6:	460c      	mov	r4, r1
 80022e8:	b10a      	cbz	r2, 80022ee <_printf_common+0x26>
 80022ea:	3301      	adds	r3, #1
 80022ec:	6033      	str	r3, [r6, #0]
 80022ee:	6823      	ldr	r3, [r4, #0]
 80022f0:	0699      	lsls	r1, r3, #26
 80022f2:	bf42      	ittt	mi
 80022f4:	6833      	ldrmi	r3, [r6, #0]
 80022f6:	3302      	addmi	r3, #2
 80022f8:	6033      	strmi	r3, [r6, #0]
 80022fa:	6825      	ldr	r5, [r4, #0]
 80022fc:	f015 0506 	ands.w	r5, r5, #6
 8002300:	d106      	bne.n	8002310 <_printf_common+0x48>
 8002302:	f104 0a19 	add.w	sl, r4, #25
 8002306:	68e3      	ldr	r3, [r4, #12]
 8002308:	6832      	ldr	r2, [r6, #0]
 800230a:	1a9b      	subs	r3, r3, r2
 800230c:	42ab      	cmp	r3, r5
 800230e:	dc26      	bgt.n	800235e <_printf_common+0x96>
 8002310:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002314:	1e13      	subs	r3, r2, #0
 8002316:	6822      	ldr	r2, [r4, #0]
 8002318:	bf18      	it	ne
 800231a:	2301      	movne	r3, #1
 800231c:	0692      	lsls	r2, r2, #26
 800231e:	d42b      	bmi.n	8002378 <_printf_common+0xb0>
 8002320:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002324:	4649      	mov	r1, r9
 8002326:	4638      	mov	r0, r7
 8002328:	47c0      	blx	r8
 800232a:	3001      	adds	r0, #1
 800232c:	d01e      	beq.n	800236c <_printf_common+0xa4>
 800232e:	6823      	ldr	r3, [r4, #0]
 8002330:	6922      	ldr	r2, [r4, #16]
 8002332:	f003 0306 	and.w	r3, r3, #6
 8002336:	2b04      	cmp	r3, #4
 8002338:	bf02      	ittt	eq
 800233a:	68e5      	ldreq	r5, [r4, #12]
 800233c:	6833      	ldreq	r3, [r6, #0]
 800233e:	1aed      	subeq	r5, r5, r3
 8002340:	68a3      	ldr	r3, [r4, #8]
 8002342:	bf0c      	ite	eq
 8002344:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002348:	2500      	movne	r5, #0
 800234a:	4293      	cmp	r3, r2
 800234c:	bfc4      	itt	gt
 800234e:	1a9b      	subgt	r3, r3, r2
 8002350:	18ed      	addgt	r5, r5, r3
 8002352:	2600      	movs	r6, #0
 8002354:	341a      	adds	r4, #26
 8002356:	42b5      	cmp	r5, r6
 8002358:	d11a      	bne.n	8002390 <_printf_common+0xc8>
 800235a:	2000      	movs	r0, #0
 800235c:	e008      	b.n	8002370 <_printf_common+0xa8>
 800235e:	2301      	movs	r3, #1
 8002360:	4652      	mov	r2, sl
 8002362:	4649      	mov	r1, r9
 8002364:	4638      	mov	r0, r7
 8002366:	47c0      	blx	r8
 8002368:	3001      	adds	r0, #1
 800236a:	d103      	bne.n	8002374 <_printf_common+0xac>
 800236c:	f04f 30ff 	mov.w	r0, #4294967295
 8002370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002374:	3501      	adds	r5, #1
 8002376:	e7c6      	b.n	8002306 <_printf_common+0x3e>
 8002378:	18e1      	adds	r1, r4, r3
 800237a:	1c5a      	adds	r2, r3, #1
 800237c:	2030      	movs	r0, #48	; 0x30
 800237e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002382:	4422      	add	r2, r4
 8002384:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002388:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800238c:	3302      	adds	r3, #2
 800238e:	e7c7      	b.n	8002320 <_printf_common+0x58>
 8002390:	2301      	movs	r3, #1
 8002392:	4622      	mov	r2, r4
 8002394:	4649      	mov	r1, r9
 8002396:	4638      	mov	r0, r7
 8002398:	47c0      	blx	r8
 800239a:	3001      	adds	r0, #1
 800239c:	d0e6      	beq.n	800236c <_printf_common+0xa4>
 800239e:	3601      	adds	r6, #1
 80023a0:	e7d9      	b.n	8002356 <_printf_common+0x8e>
	...

080023a4 <_printf_i>:
 80023a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80023a8:	7e0f      	ldrb	r7, [r1, #24]
 80023aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80023ac:	2f78      	cmp	r7, #120	; 0x78
 80023ae:	4691      	mov	r9, r2
 80023b0:	4680      	mov	r8, r0
 80023b2:	460c      	mov	r4, r1
 80023b4:	469a      	mov	sl, r3
 80023b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80023ba:	d807      	bhi.n	80023cc <_printf_i+0x28>
 80023bc:	2f62      	cmp	r7, #98	; 0x62
 80023be:	d80a      	bhi.n	80023d6 <_printf_i+0x32>
 80023c0:	2f00      	cmp	r7, #0
 80023c2:	f000 80d4 	beq.w	800256e <_printf_i+0x1ca>
 80023c6:	2f58      	cmp	r7, #88	; 0x58
 80023c8:	f000 80c0 	beq.w	800254c <_printf_i+0x1a8>
 80023cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80023d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80023d4:	e03a      	b.n	800244c <_printf_i+0xa8>
 80023d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80023da:	2b15      	cmp	r3, #21
 80023dc:	d8f6      	bhi.n	80023cc <_printf_i+0x28>
 80023de:	a101      	add	r1, pc, #4	; (adr r1, 80023e4 <_printf_i+0x40>)
 80023e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80023e4:	0800243d 	.word	0x0800243d
 80023e8:	08002451 	.word	0x08002451
 80023ec:	080023cd 	.word	0x080023cd
 80023f0:	080023cd 	.word	0x080023cd
 80023f4:	080023cd 	.word	0x080023cd
 80023f8:	080023cd 	.word	0x080023cd
 80023fc:	08002451 	.word	0x08002451
 8002400:	080023cd 	.word	0x080023cd
 8002404:	080023cd 	.word	0x080023cd
 8002408:	080023cd 	.word	0x080023cd
 800240c:	080023cd 	.word	0x080023cd
 8002410:	08002555 	.word	0x08002555
 8002414:	0800247d 	.word	0x0800247d
 8002418:	0800250f 	.word	0x0800250f
 800241c:	080023cd 	.word	0x080023cd
 8002420:	080023cd 	.word	0x080023cd
 8002424:	08002577 	.word	0x08002577
 8002428:	080023cd 	.word	0x080023cd
 800242c:	0800247d 	.word	0x0800247d
 8002430:	080023cd 	.word	0x080023cd
 8002434:	080023cd 	.word	0x080023cd
 8002438:	08002517 	.word	0x08002517
 800243c:	682b      	ldr	r3, [r5, #0]
 800243e:	1d1a      	adds	r2, r3, #4
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	602a      	str	r2, [r5, #0]
 8002444:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002448:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800244c:	2301      	movs	r3, #1
 800244e:	e09f      	b.n	8002590 <_printf_i+0x1ec>
 8002450:	6820      	ldr	r0, [r4, #0]
 8002452:	682b      	ldr	r3, [r5, #0]
 8002454:	0607      	lsls	r7, r0, #24
 8002456:	f103 0104 	add.w	r1, r3, #4
 800245a:	6029      	str	r1, [r5, #0]
 800245c:	d501      	bpl.n	8002462 <_printf_i+0xbe>
 800245e:	681e      	ldr	r6, [r3, #0]
 8002460:	e003      	b.n	800246a <_printf_i+0xc6>
 8002462:	0646      	lsls	r6, r0, #25
 8002464:	d5fb      	bpl.n	800245e <_printf_i+0xba>
 8002466:	f9b3 6000 	ldrsh.w	r6, [r3]
 800246a:	2e00      	cmp	r6, #0
 800246c:	da03      	bge.n	8002476 <_printf_i+0xd2>
 800246e:	232d      	movs	r3, #45	; 0x2d
 8002470:	4276      	negs	r6, r6
 8002472:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002476:	485a      	ldr	r0, [pc, #360]	; (80025e0 <_printf_i+0x23c>)
 8002478:	230a      	movs	r3, #10
 800247a:	e012      	b.n	80024a2 <_printf_i+0xfe>
 800247c:	682b      	ldr	r3, [r5, #0]
 800247e:	6820      	ldr	r0, [r4, #0]
 8002480:	1d19      	adds	r1, r3, #4
 8002482:	6029      	str	r1, [r5, #0]
 8002484:	0605      	lsls	r5, r0, #24
 8002486:	d501      	bpl.n	800248c <_printf_i+0xe8>
 8002488:	681e      	ldr	r6, [r3, #0]
 800248a:	e002      	b.n	8002492 <_printf_i+0xee>
 800248c:	0641      	lsls	r1, r0, #25
 800248e:	d5fb      	bpl.n	8002488 <_printf_i+0xe4>
 8002490:	881e      	ldrh	r6, [r3, #0]
 8002492:	4853      	ldr	r0, [pc, #332]	; (80025e0 <_printf_i+0x23c>)
 8002494:	2f6f      	cmp	r7, #111	; 0x6f
 8002496:	bf0c      	ite	eq
 8002498:	2308      	moveq	r3, #8
 800249a:	230a      	movne	r3, #10
 800249c:	2100      	movs	r1, #0
 800249e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80024a2:	6865      	ldr	r5, [r4, #4]
 80024a4:	60a5      	str	r5, [r4, #8]
 80024a6:	2d00      	cmp	r5, #0
 80024a8:	bfa2      	ittt	ge
 80024aa:	6821      	ldrge	r1, [r4, #0]
 80024ac:	f021 0104 	bicge.w	r1, r1, #4
 80024b0:	6021      	strge	r1, [r4, #0]
 80024b2:	b90e      	cbnz	r6, 80024b8 <_printf_i+0x114>
 80024b4:	2d00      	cmp	r5, #0
 80024b6:	d04b      	beq.n	8002550 <_printf_i+0x1ac>
 80024b8:	4615      	mov	r5, r2
 80024ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80024be:	fb03 6711 	mls	r7, r3, r1, r6
 80024c2:	5dc7      	ldrb	r7, [r0, r7]
 80024c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80024c8:	4637      	mov	r7, r6
 80024ca:	42bb      	cmp	r3, r7
 80024cc:	460e      	mov	r6, r1
 80024ce:	d9f4      	bls.n	80024ba <_printf_i+0x116>
 80024d0:	2b08      	cmp	r3, #8
 80024d2:	d10b      	bne.n	80024ec <_printf_i+0x148>
 80024d4:	6823      	ldr	r3, [r4, #0]
 80024d6:	07de      	lsls	r6, r3, #31
 80024d8:	d508      	bpl.n	80024ec <_printf_i+0x148>
 80024da:	6923      	ldr	r3, [r4, #16]
 80024dc:	6861      	ldr	r1, [r4, #4]
 80024de:	4299      	cmp	r1, r3
 80024e0:	bfde      	ittt	le
 80024e2:	2330      	movle	r3, #48	; 0x30
 80024e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80024e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80024ec:	1b52      	subs	r2, r2, r5
 80024ee:	6122      	str	r2, [r4, #16]
 80024f0:	f8cd a000 	str.w	sl, [sp]
 80024f4:	464b      	mov	r3, r9
 80024f6:	aa03      	add	r2, sp, #12
 80024f8:	4621      	mov	r1, r4
 80024fa:	4640      	mov	r0, r8
 80024fc:	f7ff fee4 	bl	80022c8 <_printf_common>
 8002500:	3001      	adds	r0, #1
 8002502:	d14a      	bne.n	800259a <_printf_i+0x1f6>
 8002504:	f04f 30ff 	mov.w	r0, #4294967295
 8002508:	b004      	add	sp, #16
 800250a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800250e:	6823      	ldr	r3, [r4, #0]
 8002510:	f043 0320 	orr.w	r3, r3, #32
 8002514:	6023      	str	r3, [r4, #0]
 8002516:	4833      	ldr	r0, [pc, #204]	; (80025e4 <_printf_i+0x240>)
 8002518:	2778      	movs	r7, #120	; 0x78
 800251a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800251e:	6823      	ldr	r3, [r4, #0]
 8002520:	6829      	ldr	r1, [r5, #0]
 8002522:	061f      	lsls	r7, r3, #24
 8002524:	f851 6b04 	ldr.w	r6, [r1], #4
 8002528:	d402      	bmi.n	8002530 <_printf_i+0x18c>
 800252a:	065f      	lsls	r7, r3, #25
 800252c:	bf48      	it	mi
 800252e:	b2b6      	uxthmi	r6, r6
 8002530:	07df      	lsls	r7, r3, #31
 8002532:	bf48      	it	mi
 8002534:	f043 0320 	orrmi.w	r3, r3, #32
 8002538:	6029      	str	r1, [r5, #0]
 800253a:	bf48      	it	mi
 800253c:	6023      	strmi	r3, [r4, #0]
 800253e:	b91e      	cbnz	r6, 8002548 <_printf_i+0x1a4>
 8002540:	6823      	ldr	r3, [r4, #0]
 8002542:	f023 0320 	bic.w	r3, r3, #32
 8002546:	6023      	str	r3, [r4, #0]
 8002548:	2310      	movs	r3, #16
 800254a:	e7a7      	b.n	800249c <_printf_i+0xf8>
 800254c:	4824      	ldr	r0, [pc, #144]	; (80025e0 <_printf_i+0x23c>)
 800254e:	e7e4      	b.n	800251a <_printf_i+0x176>
 8002550:	4615      	mov	r5, r2
 8002552:	e7bd      	b.n	80024d0 <_printf_i+0x12c>
 8002554:	682b      	ldr	r3, [r5, #0]
 8002556:	6826      	ldr	r6, [r4, #0]
 8002558:	6961      	ldr	r1, [r4, #20]
 800255a:	1d18      	adds	r0, r3, #4
 800255c:	6028      	str	r0, [r5, #0]
 800255e:	0635      	lsls	r5, r6, #24
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	d501      	bpl.n	8002568 <_printf_i+0x1c4>
 8002564:	6019      	str	r1, [r3, #0]
 8002566:	e002      	b.n	800256e <_printf_i+0x1ca>
 8002568:	0670      	lsls	r0, r6, #25
 800256a:	d5fb      	bpl.n	8002564 <_printf_i+0x1c0>
 800256c:	8019      	strh	r1, [r3, #0]
 800256e:	2300      	movs	r3, #0
 8002570:	6123      	str	r3, [r4, #16]
 8002572:	4615      	mov	r5, r2
 8002574:	e7bc      	b.n	80024f0 <_printf_i+0x14c>
 8002576:	682b      	ldr	r3, [r5, #0]
 8002578:	1d1a      	adds	r2, r3, #4
 800257a:	602a      	str	r2, [r5, #0]
 800257c:	681d      	ldr	r5, [r3, #0]
 800257e:	6862      	ldr	r2, [r4, #4]
 8002580:	2100      	movs	r1, #0
 8002582:	4628      	mov	r0, r5
 8002584:	f7fd fe24 	bl	80001d0 <memchr>
 8002588:	b108      	cbz	r0, 800258e <_printf_i+0x1ea>
 800258a:	1b40      	subs	r0, r0, r5
 800258c:	6060      	str	r0, [r4, #4]
 800258e:	6863      	ldr	r3, [r4, #4]
 8002590:	6123      	str	r3, [r4, #16]
 8002592:	2300      	movs	r3, #0
 8002594:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002598:	e7aa      	b.n	80024f0 <_printf_i+0x14c>
 800259a:	6923      	ldr	r3, [r4, #16]
 800259c:	462a      	mov	r2, r5
 800259e:	4649      	mov	r1, r9
 80025a0:	4640      	mov	r0, r8
 80025a2:	47d0      	blx	sl
 80025a4:	3001      	adds	r0, #1
 80025a6:	d0ad      	beq.n	8002504 <_printf_i+0x160>
 80025a8:	6823      	ldr	r3, [r4, #0]
 80025aa:	079b      	lsls	r3, r3, #30
 80025ac:	d413      	bmi.n	80025d6 <_printf_i+0x232>
 80025ae:	68e0      	ldr	r0, [r4, #12]
 80025b0:	9b03      	ldr	r3, [sp, #12]
 80025b2:	4298      	cmp	r0, r3
 80025b4:	bfb8      	it	lt
 80025b6:	4618      	movlt	r0, r3
 80025b8:	e7a6      	b.n	8002508 <_printf_i+0x164>
 80025ba:	2301      	movs	r3, #1
 80025bc:	4632      	mov	r2, r6
 80025be:	4649      	mov	r1, r9
 80025c0:	4640      	mov	r0, r8
 80025c2:	47d0      	blx	sl
 80025c4:	3001      	adds	r0, #1
 80025c6:	d09d      	beq.n	8002504 <_printf_i+0x160>
 80025c8:	3501      	adds	r5, #1
 80025ca:	68e3      	ldr	r3, [r4, #12]
 80025cc:	9903      	ldr	r1, [sp, #12]
 80025ce:	1a5b      	subs	r3, r3, r1
 80025d0:	42ab      	cmp	r3, r5
 80025d2:	dcf2      	bgt.n	80025ba <_printf_i+0x216>
 80025d4:	e7eb      	b.n	80025ae <_printf_i+0x20a>
 80025d6:	2500      	movs	r5, #0
 80025d8:	f104 0619 	add.w	r6, r4, #25
 80025dc:	e7f5      	b.n	80025ca <_printf_i+0x226>
 80025de:	bf00      	nop
 80025e0:	08002a66 	.word	0x08002a66
 80025e4:	08002a77 	.word	0x08002a77

080025e8 <__sflush_r>:
 80025e8:	898a      	ldrh	r2, [r1, #12]
 80025ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ec:	4605      	mov	r5, r0
 80025ee:	0710      	lsls	r0, r2, #28
 80025f0:	460c      	mov	r4, r1
 80025f2:	d457      	bmi.n	80026a4 <__sflush_r+0xbc>
 80025f4:	684b      	ldr	r3, [r1, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	dc04      	bgt.n	8002604 <__sflush_r+0x1c>
 80025fa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	dc01      	bgt.n	8002604 <__sflush_r+0x1c>
 8002600:	2000      	movs	r0, #0
 8002602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002604:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002606:	2e00      	cmp	r6, #0
 8002608:	d0fa      	beq.n	8002600 <__sflush_r+0x18>
 800260a:	2300      	movs	r3, #0
 800260c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002610:	682f      	ldr	r7, [r5, #0]
 8002612:	6a21      	ldr	r1, [r4, #32]
 8002614:	602b      	str	r3, [r5, #0]
 8002616:	d032      	beq.n	800267e <__sflush_r+0x96>
 8002618:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800261a:	89a3      	ldrh	r3, [r4, #12]
 800261c:	075a      	lsls	r2, r3, #29
 800261e:	d505      	bpl.n	800262c <__sflush_r+0x44>
 8002620:	6863      	ldr	r3, [r4, #4]
 8002622:	1ac0      	subs	r0, r0, r3
 8002624:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002626:	b10b      	cbz	r3, 800262c <__sflush_r+0x44>
 8002628:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800262a:	1ac0      	subs	r0, r0, r3
 800262c:	2300      	movs	r3, #0
 800262e:	4602      	mov	r2, r0
 8002630:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002632:	6a21      	ldr	r1, [r4, #32]
 8002634:	4628      	mov	r0, r5
 8002636:	47b0      	blx	r6
 8002638:	1c43      	adds	r3, r0, #1
 800263a:	89a3      	ldrh	r3, [r4, #12]
 800263c:	d106      	bne.n	800264c <__sflush_r+0x64>
 800263e:	6829      	ldr	r1, [r5, #0]
 8002640:	291d      	cmp	r1, #29
 8002642:	d82b      	bhi.n	800269c <__sflush_r+0xb4>
 8002644:	4a28      	ldr	r2, [pc, #160]	; (80026e8 <__sflush_r+0x100>)
 8002646:	410a      	asrs	r2, r1
 8002648:	07d6      	lsls	r6, r2, #31
 800264a:	d427      	bmi.n	800269c <__sflush_r+0xb4>
 800264c:	2200      	movs	r2, #0
 800264e:	6062      	str	r2, [r4, #4]
 8002650:	04d9      	lsls	r1, r3, #19
 8002652:	6922      	ldr	r2, [r4, #16]
 8002654:	6022      	str	r2, [r4, #0]
 8002656:	d504      	bpl.n	8002662 <__sflush_r+0x7a>
 8002658:	1c42      	adds	r2, r0, #1
 800265a:	d101      	bne.n	8002660 <__sflush_r+0x78>
 800265c:	682b      	ldr	r3, [r5, #0]
 800265e:	b903      	cbnz	r3, 8002662 <__sflush_r+0x7a>
 8002660:	6560      	str	r0, [r4, #84]	; 0x54
 8002662:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002664:	602f      	str	r7, [r5, #0]
 8002666:	2900      	cmp	r1, #0
 8002668:	d0ca      	beq.n	8002600 <__sflush_r+0x18>
 800266a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800266e:	4299      	cmp	r1, r3
 8002670:	d002      	beq.n	8002678 <__sflush_r+0x90>
 8002672:	4628      	mov	r0, r5
 8002674:	f7ff fbf0 	bl	8001e58 <_free_r>
 8002678:	2000      	movs	r0, #0
 800267a:	6360      	str	r0, [r4, #52]	; 0x34
 800267c:	e7c1      	b.n	8002602 <__sflush_r+0x1a>
 800267e:	2301      	movs	r3, #1
 8002680:	4628      	mov	r0, r5
 8002682:	47b0      	blx	r6
 8002684:	1c41      	adds	r1, r0, #1
 8002686:	d1c8      	bne.n	800261a <__sflush_r+0x32>
 8002688:	682b      	ldr	r3, [r5, #0]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d0c5      	beq.n	800261a <__sflush_r+0x32>
 800268e:	2b1d      	cmp	r3, #29
 8002690:	d001      	beq.n	8002696 <__sflush_r+0xae>
 8002692:	2b16      	cmp	r3, #22
 8002694:	d101      	bne.n	800269a <__sflush_r+0xb2>
 8002696:	602f      	str	r7, [r5, #0]
 8002698:	e7b2      	b.n	8002600 <__sflush_r+0x18>
 800269a:	89a3      	ldrh	r3, [r4, #12]
 800269c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026a0:	81a3      	strh	r3, [r4, #12]
 80026a2:	e7ae      	b.n	8002602 <__sflush_r+0x1a>
 80026a4:	690f      	ldr	r7, [r1, #16]
 80026a6:	2f00      	cmp	r7, #0
 80026a8:	d0aa      	beq.n	8002600 <__sflush_r+0x18>
 80026aa:	0793      	lsls	r3, r2, #30
 80026ac:	680e      	ldr	r6, [r1, #0]
 80026ae:	bf08      	it	eq
 80026b0:	694b      	ldreq	r3, [r1, #20]
 80026b2:	600f      	str	r7, [r1, #0]
 80026b4:	bf18      	it	ne
 80026b6:	2300      	movne	r3, #0
 80026b8:	1bf6      	subs	r6, r6, r7
 80026ba:	608b      	str	r3, [r1, #8]
 80026bc:	2e00      	cmp	r6, #0
 80026be:	dd9f      	ble.n	8002600 <__sflush_r+0x18>
 80026c0:	6a21      	ldr	r1, [r4, #32]
 80026c2:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80026c6:	4633      	mov	r3, r6
 80026c8:	463a      	mov	r2, r7
 80026ca:	4628      	mov	r0, r5
 80026cc:	47e0      	blx	ip
 80026ce:	2800      	cmp	r0, #0
 80026d0:	dc06      	bgt.n	80026e0 <__sflush_r+0xf8>
 80026d2:	89a3      	ldrh	r3, [r4, #12]
 80026d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026d8:	81a3      	strh	r3, [r4, #12]
 80026da:	f04f 30ff 	mov.w	r0, #4294967295
 80026de:	e790      	b.n	8002602 <__sflush_r+0x1a>
 80026e0:	4407      	add	r7, r0
 80026e2:	1a36      	subs	r6, r6, r0
 80026e4:	e7ea      	b.n	80026bc <__sflush_r+0xd4>
 80026e6:	bf00      	nop
 80026e8:	dfbffffe 	.word	0xdfbffffe

080026ec <_fflush_r>:
 80026ec:	b538      	push	{r3, r4, r5, lr}
 80026ee:	690b      	ldr	r3, [r1, #16]
 80026f0:	4605      	mov	r5, r0
 80026f2:	460c      	mov	r4, r1
 80026f4:	b913      	cbnz	r3, 80026fc <_fflush_r+0x10>
 80026f6:	2500      	movs	r5, #0
 80026f8:	4628      	mov	r0, r5
 80026fa:	bd38      	pop	{r3, r4, r5, pc}
 80026fc:	b118      	cbz	r0, 8002706 <_fflush_r+0x1a>
 80026fe:	6a03      	ldr	r3, [r0, #32]
 8002700:	b90b      	cbnz	r3, 8002706 <_fflush_r+0x1a>
 8002702:	f7ff faa1 	bl	8001c48 <__sinit>
 8002706:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d0f3      	beq.n	80026f6 <_fflush_r+0xa>
 800270e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002710:	07d0      	lsls	r0, r2, #31
 8002712:	d404      	bmi.n	800271e <_fflush_r+0x32>
 8002714:	0599      	lsls	r1, r3, #22
 8002716:	d402      	bmi.n	800271e <_fflush_r+0x32>
 8002718:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800271a:	f7ff fb9a 	bl	8001e52 <__retarget_lock_acquire_recursive>
 800271e:	4628      	mov	r0, r5
 8002720:	4621      	mov	r1, r4
 8002722:	f7ff ff61 	bl	80025e8 <__sflush_r>
 8002726:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002728:	07da      	lsls	r2, r3, #31
 800272a:	4605      	mov	r5, r0
 800272c:	d4e4      	bmi.n	80026f8 <_fflush_r+0xc>
 800272e:	89a3      	ldrh	r3, [r4, #12]
 8002730:	059b      	lsls	r3, r3, #22
 8002732:	d4e1      	bmi.n	80026f8 <_fflush_r+0xc>
 8002734:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002736:	f7ff fb8d 	bl	8001e54 <__retarget_lock_release_recursive>
 800273a:	e7dd      	b.n	80026f8 <_fflush_r+0xc>

0800273c <__swbuf_r>:
 800273c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800273e:	460e      	mov	r6, r1
 8002740:	4614      	mov	r4, r2
 8002742:	4605      	mov	r5, r0
 8002744:	b118      	cbz	r0, 800274e <__swbuf_r+0x12>
 8002746:	6a03      	ldr	r3, [r0, #32]
 8002748:	b90b      	cbnz	r3, 800274e <__swbuf_r+0x12>
 800274a:	f7ff fa7d 	bl	8001c48 <__sinit>
 800274e:	69a3      	ldr	r3, [r4, #24]
 8002750:	60a3      	str	r3, [r4, #8]
 8002752:	89a3      	ldrh	r3, [r4, #12]
 8002754:	071a      	lsls	r2, r3, #28
 8002756:	d525      	bpl.n	80027a4 <__swbuf_r+0x68>
 8002758:	6923      	ldr	r3, [r4, #16]
 800275a:	b31b      	cbz	r3, 80027a4 <__swbuf_r+0x68>
 800275c:	6823      	ldr	r3, [r4, #0]
 800275e:	6922      	ldr	r2, [r4, #16]
 8002760:	1a98      	subs	r0, r3, r2
 8002762:	6963      	ldr	r3, [r4, #20]
 8002764:	b2f6      	uxtb	r6, r6
 8002766:	4283      	cmp	r3, r0
 8002768:	4637      	mov	r7, r6
 800276a:	dc04      	bgt.n	8002776 <__swbuf_r+0x3a>
 800276c:	4621      	mov	r1, r4
 800276e:	4628      	mov	r0, r5
 8002770:	f7ff ffbc 	bl	80026ec <_fflush_r>
 8002774:	b9e0      	cbnz	r0, 80027b0 <__swbuf_r+0x74>
 8002776:	68a3      	ldr	r3, [r4, #8]
 8002778:	3b01      	subs	r3, #1
 800277a:	60a3      	str	r3, [r4, #8]
 800277c:	6823      	ldr	r3, [r4, #0]
 800277e:	1c5a      	adds	r2, r3, #1
 8002780:	6022      	str	r2, [r4, #0]
 8002782:	701e      	strb	r6, [r3, #0]
 8002784:	6962      	ldr	r2, [r4, #20]
 8002786:	1c43      	adds	r3, r0, #1
 8002788:	429a      	cmp	r2, r3
 800278a:	d004      	beq.n	8002796 <__swbuf_r+0x5a>
 800278c:	89a3      	ldrh	r3, [r4, #12]
 800278e:	07db      	lsls	r3, r3, #31
 8002790:	d506      	bpl.n	80027a0 <__swbuf_r+0x64>
 8002792:	2e0a      	cmp	r6, #10
 8002794:	d104      	bne.n	80027a0 <__swbuf_r+0x64>
 8002796:	4621      	mov	r1, r4
 8002798:	4628      	mov	r0, r5
 800279a:	f7ff ffa7 	bl	80026ec <_fflush_r>
 800279e:	b938      	cbnz	r0, 80027b0 <__swbuf_r+0x74>
 80027a0:	4638      	mov	r0, r7
 80027a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027a4:	4621      	mov	r1, r4
 80027a6:	4628      	mov	r0, r5
 80027a8:	f000 f806 	bl	80027b8 <__swsetup_r>
 80027ac:	2800      	cmp	r0, #0
 80027ae:	d0d5      	beq.n	800275c <__swbuf_r+0x20>
 80027b0:	f04f 37ff 	mov.w	r7, #4294967295
 80027b4:	e7f4      	b.n	80027a0 <__swbuf_r+0x64>
	...

080027b8 <__swsetup_r>:
 80027b8:	b538      	push	{r3, r4, r5, lr}
 80027ba:	4b2a      	ldr	r3, [pc, #168]	; (8002864 <__swsetup_r+0xac>)
 80027bc:	4605      	mov	r5, r0
 80027be:	6818      	ldr	r0, [r3, #0]
 80027c0:	460c      	mov	r4, r1
 80027c2:	b118      	cbz	r0, 80027cc <__swsetup_r+0x14>
 80027c4:	6a03      	ldr	r3, [r0, #32]
 80027c6:	b90b      	cbnz	r3, 80027cc <__swsetup_r+0x14>
 80027c8:	f7ff fa3e 	bl	8001c48 <__sinit>
 80027cc:	89a3      	ldrh	r3, [r4, #12]
 80027ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80027d2:	0718      	lsls	r0, r3, #28
 80027d4:	d422      	bmi.n	800281c <__swsetup_r+0x64>
 80027d6:	06d9      	lsls	r1, r3, #27
 80027d8:	d407      	bmi.n	80027ea <__swsetup_r+0x32>
 80027da:	2309      	movs	r3, #9
 80027dc:	602b      	str	r3, [r5, #0]
 80027de:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80027e2:	81a3      	strh	r3, [r4, #12]
 80027e4:	f04f 30ff 	mov.w	r0, #4294967295
 80027e8:	e034      	b.n	8002854 <__swsetup_r+0x9c>
 80027ea:	0758      	lsls	r0, r3, #29
 80027ec:	d512      	bpl.n	8002814 <__swsetup_r+0x5c>
 80027ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80027f0:	b141      	cbz	r1, 8002804 <__swsetup_r+0x4c>
 80027f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80027f6:	4299      	cmp	r1, r3
 80027f8:	d002      	beq.n	8002800 <__swsetup_r+0x48>
 80027fa:	4628      	mov	r0, r5
 80027fc:	f7ff fb2c 	bl	8001e58 <_free_r>
 8002800:	2300      	movs	r3, #0
 8002802:	6363      	str	r3, [r4, #52]	; 0x34
 8002804:	89a3      	ldrh	r3, [r4, #12]
 8002806:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800280a:	81a3      	strh	r3, [r4, #12]
 800280c:	2300      	movs	r3, #0
 800280e:	6063      	str	r3, [r4, #4]
 8002810:	6923      	ldr	r3, [r4, #16]
 8002812:	6023      	str	r3, [r4, #0]
 8002814:	89a3      	ldrh	r3, [r4, #12]
 8002816:	f043 0308 	orr.w	r3, r3, #8
 800281a:	81a3      	strh	r3, [r4, #12]
 800281c:	6923      	ldr	r3, [r4, #16]
 800281e:	b94b      	cbnz	r3, 8002834 <__swsetup_r+0x7c>
 8002820:	89a3      	ldrh	r3, [r4, #12]
 8002822:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002826:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800282a:	d003      	beq.n	8002834 <__swsetup_r+0x7c>
 800282c:	4621      	mov	r1, r4
 800282e:	4628      	mov	r0, r5
 8002830:	f000 f850 	bl	80028d4 <__smakebuf_r>
 8002834:	89a0      	ldrh	r0, [r4, #12]
 8002836:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800283a:	f010 0301 	ands.w	r3, r0, #1
 800283e:	d00a      	beq.n	8002856 <__swsetup_r+0x9e>
 8002840:	2300      	movs	r3, #0
 8002842:	60a3      	str	r3, [r4, #8]
 8002844:	6963      	ldr	r3, [r4, #20]
 8002846:	425b      	negs	r3, r3
 8002848:	61a3      	str	r3, [r4, #24]
 800284a:	6923      	ldr	r3, [r4, #16]
 800284c:	b943      	cbnz	r3, 8002860 <__swsetup_r+0xa8>
 800284e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002852:	d1c4      	bne.n	80027de <__swsetup_r+0x26>
 8002854:	bd38      	pop	{r3, r4, r5, pc}
 8002856:	0781      	lsls	r1, r0, #30
 8002858:	bf58      	it	pl
 800285a:	6963      	ldrpl	r3, [r4, #20]
 800285c:	60a3      	str	r3, [r4, #8]
 800285e:	e7f4      	b.n	800284a <__swsetup_r+0x92>
 8002860:	2000      	movs	r0, #0
 8002862:	e7f7      	b.n	8002854 <__swsetup_r+0x9c>
 8002864:	20000070 	.word	0x20000070

08002868 <_sbrk_r>:
 8002868:	b538      	push	{r3, r4, r5, lr}
 800286a:	4d06      	ldr	r5, [pc, #24]	; (8002884 <_sbrk_r+0x1c>)
 800286c:	2300      	movs	r3, #0
 800286e:	4604      	mov	r4, r0
 8002870:	4608      	mov	r0, r1
 8002872:	602b      	str	r3, [r5, #0]
 8002874:	f7fd ff64 	bl	8000740 <_sbrk>
 8002878:	1c43      	adds	r3, r0, #1
 800287a:	d102      	bne.n	8002882 <_sbrk_r+0x1a>
 800287c:	682b      	ldr	r3, [r5, #0]
 800287e:	b103      	cbz	r3, 8002882 <_sbrk_r+0x1a>
 8002880:	6023      	str	r3, [r4, #0]
 8002882:	bd38      	pop	{r3, r4, r5, pc}
 8002884:	20000210 	.word	0x20000210

08002888 <__swhatbuf_r>:
 8002888:	b570      	push	{r4, r5, r6, lr}
 800288a:	460c      	mov	r4, r1
 800288c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002890:	2900      	cmp	r1, #0
 8002892:	b096      	sub	sp, #88	; 0x58
 8002894:	4615      	mov	r5, r2
 8002896:	461e      	mov	r6, r3
 8002898:	da0d      	bge.n	80028b6 <__swhatbuf_r+0x2e>
 800289a:	89a3      	ldrh	r3, [r4, #12]
 800289c:	f013 0f80 	tst.w	r3, #128	; 0x80
 80028a0:	f04f 0100 	mov.w	r1, #0
 80028a4:	bf0c      	ite	eq
 80028a6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80028aa:	2340      	movne	r3, #64	; 0x40
 80028ac:	2000      	movs	r0, #0
 80028ae:	6031      	str	r1, [r6, #0]
 80028b0:	602b      	str	r3, [r5, #0]
 80028b2:	b016      	add	sp, #88	; 0x58
 80028b4:	bd70      	pop	{r4, r5, r6, pc}
 80028b6:	466a      	mov	r2, sp
 80028b8:	f000 f848 	bl	800294c <_fstat_r>
 80028bc:	2800      	cmp	r0, #0
 80028be:	dbec      	blt.n	800289a <__swhatbuf_r+0x12>
 80028c0:	9901      	ldr	r1, [sp, #4]
 80028c2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80028c6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80028ca:	4259      	negs	r1, r3
 80028cc:	4159      	adcs	r1, r3
 80028ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028d2:	e7eb      	b.n	80028ac <__swhatbuf_r+0x24>

080028d4 <__smakebuf_r>:
 80028d4:	898b      	ldrh	r3, [r1, #12]
 80028d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80028d8:	079d      	lsls	r5, r3, #30
 80028da:	4606      	mov	r6, r0
 80028dc:	460c      	mov	r4, r1
 80028de:	d507      	bpl.n	80028f0 <__smakebuf_r+0x1c>
 80028e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80028e4:	6023      	str	r3, [r4, #0]
 80028e6:	6123      	str	r3, [r4, #16]
 80028e8:	2301      	movs	r3, #1
 80028ea:	6163      	str	r3, [r4, #20]
 80028ec:	b002      	add	sp, #8
 80028ee:	bd70      	pop	{r4, r5, r6, pc}
 80028f0:	ab01      	add	r3, sp, #4
 80028f2:	466a      	mov	r2, sp
 80028f4:	f7ff ffc8 	bl	8002888 <__swhatbuf_r>
 80028f8:	9900      	ldr	r1, [sp, #0]
 80028fa:	4605      	mov	r5, r0
 80028fc:	4630      	mov	r0, r6
 80028fe:	f7ff fb15 	bl	8001f2c <_malloc_r>
 8002902:	b948      	cbnz	r0, 8002918 <__smakebuf_r+0x44>
 8002904:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002908:	059a      	lsls	r2, r3, #22
 800290a:	d4ef      	bmi.n	80028ec <__smakebuf_r+0x18>
 800290c:	f023 0303 	bic.w	r3, r3, #3
 8002910:	f043 0302 	orr.w	r3, r3, #2
 8002914:	81a3      	strh	r3, [r4, #12]
 8002916:	e7e3      	b.n	80028e0 <__smakebuf_r+0xc>
 8002918:	89a3      	ldrh	r3, [r4, #12]
 800291a:	6020      	str	r0, [r4, #0]
 800291c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002920:	81a3      	strh	r3, [r4, #12]
 8002922:	9b00      	ldr	r3, [sp, #0]
 8002924:	6163      	str	r3, [r4, #20]
 8002926:	9b01      	ldr	r3, [sp, #4]
 8002928:	6120      	str	r0, [r4, #16]
 800292a:	b15b      	cbz	r3, 8002944 <__smakebuf_r+0x70>
 800292c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002930:	4630      	mov	r0, r6
 8002932:	f000 f81d 	bl	8002970 <_isatty_r>
 8002936:	b128      	cbz	r0, 8002944 <__smakebuf_r+0x70>
 8002938:	89a3      	ldrh	r3, [r4, #12]
 800293a:	f023 0303 	bic.w	r3, r3, #3
 800293e:	f043 0301 	orr.w	r3, r3, #1
 8002942:	81a3      	strh	r3, [r4, #12]
 8002944:	89a3      	ldrh	r3, [r4, #12]
 8002946:	431d      	orrs	r5, r3
 8002948:	81a5      	strh	r5, [r4, #12]
 800294a:	e7cf      	b.n	80028ec <__smakebuf_r+0x18>

0800294c <_fstat_r>:
 800294c:	b538      	push	{r3, r4, r5, lr}
 800294e:	4d07      	ldr	r5, [pc, #28]	; (800296c <_fstat_r+0x20>)
 8002950:	2300      	movs	r3, #0
 8002952:	4604      	mov	r4, r0
 8002954:	4608      	mov	r0, r1
 8002956:	4611      	mov	r1, r2
 8002958:	602b      	str	r3, [r5, #0]
 800295a:	f7fd fecb 	bl	80006f4 <_fstat>
 800295e:	1c43      	adds	r3, r0, #1
 8002960:	d102      	bne.n	8002968 <_fstat_r+0x1c>
 8002962:	682b      	ldr	r3, [r5, #0]
 8002964:	b103      	cbz	r3, 8002968 <_fstat_r+0x1c>
 8002966:	6023      	str	r3, [r4, #0]
 8002968:	bd38      	pop	{r3, r4, r5, pc}
 800296a:	bf00      	nop
 800296c:	20000210 	.word	0x20000210

08002970 <_isatty_r>:
 8002970:	b538      	push	{r3, r4, r5, lr}
 8002972:	4d06      	ldr	r5, [pc, #24]	; (800298c <_isatty_r+0x1c>)
 8002974:	2300      	movs	r3, #0
 8002976:	4604      	mov	r4, r0
 8002978:	4608      	mov	r0, r1
 800297a:	602b      	str	r3, [r5, #0]
 800297c:	f7fd fec9 	bl	8000712 <_isatty>
 8002980:	1c43      	adds	r3, r0, #1
 8002982:	d102      	bne.n	800298a <_isatty_r+0x1a>
 8002984:	682b      	ldr	r3, [r5, #0]
 8002986:	b103      	cbz	r3, 800298a <_isatty_r+0x1a>
 8002988:	6023      	str	r3, [r4, #0]
 800298a:	bd38      	pop	{r3, r4, r5, pc}
 800298c:	20000210 	.word	0x20000210

08002990 <_init>:
 8002990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002992:	bf00      	nop
 8002994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002996:	bc08      	pop	{r3}
 8002998:	469e      	mov	lr, r3
 800299a:	4770      	bx	lr

0800299c <_fini>:
 800299c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800299e:	bf00      	nop
 80029a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029a2:	bc08      	pop	{r3}
 80029a4:	469e      	mov	lr, r3
 80029a6:	4770      	bx	lr
